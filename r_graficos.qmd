# Gr√°ficos

[Status](convencoes.html#status-do-material) üü®üü®üü®

## Introdu√ß√£o

R oferece uma s√©rie de fun√ß√µes nativas para cria√ß√£o de gr√°ficos. Estas fun√ß√µes possuem muitos par√¢metros que permitem melhorar visualamente as apreesenta√ß√µes dos gr√°ficos.

Abaixo um exemplo de um gr√°fico de criado com a fun√ß√£o `plot` do pacote **graphics**. Os argumentos `x` e `y` s√£o usados nas coordenadas e j√° s√£o suficientes para a gera√ß√£o de um gr√°fico.

```{r}
df_aprovacoes <- readRDS('data/aprovacoes_por_porte_de_empresa_aprovacoes.RDS')

plot(x = df_aprovacoes$ANO, y = df_aprovacoes$GRANDE)
```

Podemos customizar com diversos par√¢metros. Por exemplo `main` √© o argumento que define o t√≠tulo do gr√°fico, enquanto que `xlab` e `ylab` s√£o os *labels* dos eixos. O argumento `col` define a cor. Note que o R possui muitas cores que podem ser identificadas como *strings*. Voc√™ pode ver as dispon√≠veis com a fun√ß√£o `colors`.

```{r}
plot(df_aprovacoes$ANO, df_aprovacoes$GRANDE, 
     col ='brown3', main = 'Gr√°fico - Aprova√ß√µes - Porte: Grande', 
     xlab = 'Ano', ylab = 'Valor Aprovado')
```

Veja que o gr√°fico foi exibido com pontos para os valores. O par√¢metro `type` permite outras op√ß√µes:

-   `p` (padr√£o): pontos

-   `l`: linhas

-   `b`: pontos e linhas

-   `c`: pontos 'vazios' ligados por linhas

Obviamente, nem todos os tipos de gr√°ficos se enquadram para todos os tipos de dados. Se usarmos um gr√°fico de pontos e linhas nos dados do exemplo acima, as linhas n√£o far√£o muito sentido.

```{r}
plot(df_aprovacoes$ANO, df_aprovacoes$GRANDE, 
     type = 'b',
     col ='brown3', 
     main = 'Gr√°fico - Aprova√ß√µes - Porte: Grande', 
     xlab = 'Ano', ylab = 'Valor Aprovado')

```

Podemos criar um gr√°fico de linhas com a base de dados da [Taxa Selic Acumulado no M√™s](bases_dados.html#taxa-de-juros---selic-acumulada-no-m%C3%AAs) divulgada pelo Banco Central do Brasil. Vamos utilizar os par√¢metros `lty` (de *line type*) para determinar o tipo de linha e `lwd` (de *line width*) para determinar a largura da linha.

```{r}
df_taxa_selic <- read.csv2('./data/csv_serie_sgs_4390.csv',
                           dec = ',', quote = '\"',
                           col.names = c('DATA', 'SELIC'))

# formatar data
df_taxa_selic$DATA <- as.Date(df_taxa_selic$DATA, format = '%d/%m/%Y')

# filtrar a partir de 2017
df_taxa_selic <- df_taxa_selic |> 
  subset(DATA >= '2017-01-01')

plot(df_taxa_selic$DATA, df_taxa_selic$SELIC, 
     type = 'b', col ='firebrick3', lty = 3, lwd = 1.5,
     main = 'Taxa Selic Acumulada Mensal', 
     xlab = 'Data', ylab = 'Selic Acumulada (% a.m.)')
```

## Histograma

Abaixo um exemplo de um histograma:

```{r}

hist(df_taxa_selic$SELIC, col ='cyan4', 
     main = 'Selic', 
     xlab = 'Taxa Selic',
     ylab = 'Qtde')

hist(df_aprovacoes$PEQUENA, col = 'cyan3', 
   main = 'Aprova√ß√µes - Porte: Pequena', 
   xlab = 'Valor - Aprova√ß√µes',
   ylab = 'Qtde')

```

------------------------------------------------------------------------

@sthda

@schmuller_2019

√öltima atualiza√ß√£o: `r format(file.info('r_graficos.qmd')$mtime, '%d/%m/%Y - %H:%M:%S')`
