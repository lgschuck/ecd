---
engine: knitr
---

# Pacote data.table

[Status](convencoes.html#status-do-material) üü¶üü®üü®

O pacote **data.table** oferece estrutura para manipula√ß√£o de bases de dados de forma mais r√°pida que a base do R. As estruturas de dados s√£o chamadas de **data tables** e funcionam de forma similar a um **data frame**.

```{r}
library(data.table)

df_aprovacoes <-
  readRDS('./data/aprovacoes_por_porte_de_empresa.RDS')
```

## Criando um Data Table

### Fun√ß√£o data.table

A cria√ß√£o de um **data table** se d√° de forma an√°loga a um **data frame** atrav√©s da fun√ß√£o `data.table`.

```{r}
df_exemplo <- data.table(x = 1:10)
df_exemplo |> class()
```

### Fun√ß√£o setDT

Tamb√©m podemos criar um **data table** a partir de um **data frame** com o comando `setDT` ou com a fun√ß√£o `as.data.table`.

```{r}
df_aprovacoes_as <- as.data.table(df_aprovacoes)
df_aprovacoes_as |> class()

df_aprovacoes <- setDT(df_aprovacoes)
df_aprovacoes |> class()

identical(df_aprovacoes_as, df_aprovacoes)
```

As opera√ß√µes realizadas com **data tables** possuem sintaxe espec√≠fica e bastante sucinta. As opera√ß√µes s√£o feitas sobre a base de dados na seguinte forma:

*base[ linhas, colunas, agrega√ß√£o ]*

## Filtrando Dados

De forma an√°logo a um **data frame** padr√£o, os filtros nas linhas ocorrem antes da v√≠rgula e podem usar operadores l√≥gicos e relacionais. Uma grande vantagem √© que as colunas podem ser referenciadas apenas pelo seu nome, sem incluir o nome do objeto.

```{r}
df_aprovacoes[ANO == 2022 & MES > 6, ]
```

## Selecionando Colunas

Para sele√ß√£o de colunas, podemos colocar o nome da coluna diretamente ap√≥s a v√≠rgula, por√©m o reotrno √© dado em forma de vetor e n√£o mant√©m a estrutura do **data table**.

```{r}
df_aprovacoes[, GRANDE] |> 
  is.vector()

df_aprovacoes[, GRANDE] |> 
  is.data.table()
```

Para sele√ß√£o mais robusta devem ser informadas as colunas dentro de uma lista, que pode ser abreviada por um ponto.

```{r}
df_aprovacoes[, list(GRANDE)] |> 
  is.data.table()

# selecioanndo mais de uma coluna
df_aprovacoes[, list(GRANDE, PEQUENA)] |> 
  head(3)

# usando ponto
df_aprovacoes[, .(GRANDE, PEQUENA)] |> 
  head(3)
```

## Alterando Vari√°veis

A cria√ß√£o/altera√ß√£o de vari√°veis pode ser feita basicamente de duas formas: forma **funcional** ou **LHS := RHS**. Em ambas as formas as opera√ß√µes s√£o feitas diretamente no pr√≥prio objeto, n√£o exigindo o operador de atribui√ß√£o `<-`.

### Forma Funcional

Na forma funcional se faz o uso do operador `:=` (*assignment by reference*), que deixa o c√≥digo bastante limpo e reduzido, facilitando a leitura.

```{r}
df_aprovacoes[, RAZAO_GRANDE_MICRO := GRANDE / MICRO]
df_aprovacoes[, RAZAO_GRANDE_MICRO] |> head()
```

√â poss√≠vel efetuar a atualiza√ß√£o/cria√ß√£o de v√°rias vari√°veis simultaneamente.

```{r}
df_aprovacoes[, `:=`(RAZAO_GRANDE_PEQUENA = GRANDE / PEQUENA,
                     RAZAO_GRANDE_MEDIA = GRANDE/MEDIA)]
```

### Forma LHS := RHS

Uma forma alternativa pode ser usada com dois "vetores", um com as vari√°veis a serem criadas e outro com os valores a serem atribu√≠dos.

```{r}
df_aprovacoes2 <- copy(df_aprovacoes)
df_aprovacoes[, c('RAZAO_GRANDE_PEQUENA', 'RAZAO_GRANDE_MEDIA') :=
                     list(GRANDE / PEQUENA, GRANDE/MEDIA)]

identical(df_aprovacoes, df_aprovacoes2)
```

## Agrupando

O agrupamento/agrega√ß√£o ocorre com o operador `by`. Exemplo com cria√ß√£o da m√©dia de valores aprovados para o porte **MICRO** por ano, sendo que o ano deve ser a partir de 2020.

```{r}
df_aprovacoes[ANO > 2019, list(MEAN_MICRO = mean(MICRO)), by = ANO]
```

## Ordenando Dados

A fun√ß√£o `setorder` permite ordena√ß√£o da base de dados sem exigir atribui√ß√£o como usado com R base (`df <- df[order(df$var),]`).

```{r}
df_aprovacoes |> head()
setorder(df_aprovacoes, -ANO, MES)
df_aprovacoes |> head(n = 8)
```

## Encadeamento

Existe a possibilidade de opera√ß√µes encadeadas. Esta opera√ß√µes s√£o √∫teis quando se deseja transforma uma vari√°vel rec√©m criada, por exemplo.

```{r, error = T}
df_aprovacoes3 <- copy(df_aprovacoes)
df_aprovacoes3[, `:=`(DATA_ATUAL = Sys.Date(),
                     ANO_ATUAL = format(DATA_ATUAL, '%y'))]
```

Sem o encadeamento n√£o √© poss√≠vel extrair o ano da vari√°vel **DATA_ATUAL** pois ela ainda n√£o foi criada.

```{r}
df_aprovacoes4 <- copy(df_aprovacoes)
df_aprovacoes4[, DATA_ATUAL := Sys.Date()][,
   ANO_ATUAL := format(DATA_ATUAL, '%y')]
```

O encadeamento √© equivalente ao uso do *pipe* e o *placeholder* indicando o data table.

```{r}
df_aprovacoes5 <- copy(df_aprovacoes)
df_aprovacoes5[, DATA_ATUAL := Sys.Date()] |> 
  _[, ANO_ATUAL := format(DATA_ATUAL, '%y')]

identical(df_aprovacoes4, df_aprovacoes5)
```

------------------------------------------------------------------------
@data.table

√öltima atualiza√ß√£o: `r format(file.info('pacotes_data_table.qmd')$mtime, '%d/%m/%Y - %H:%M:%S')`
