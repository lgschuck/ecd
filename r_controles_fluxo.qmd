---
engine: knitr
---

# Controles de Fluxo

[Status](convencoes.html#status-do-material) üü®üü®üü®

## Introdu√ß√£o

Assim como outras linguagens de programa√ß√£o R oferece uma s√©rie de operadores para controle de fluxo de c√≥digo.

::: callout-note
Controles de fluxo s√£o declara√ß√µes usadas na linguagem, mas **n√£o s√£o fun√ß√µes**.
:::

## If

O controle `if` √© a estrutura de controle mais b√°sica que tomada de decis√£o e "direcionamento" de c√≥digo. Em caso negativo do teste l√≥gico nenhuma opera√ß√£o √© executada.

```{r, erro = T}
x <- 5

# C√≥digos equivalentes
if(x > 4) print('x √© maior do que quatro')
if(x > 4) { print('x √© maior do que quatro')}
if(x > 4) {
  print('x √© maior do que quatro') }
if(x > 4) { print('x √© maior do que quatro')
}
if(x > 4) {
  print('x √© maior do que quatro')
} # o mais organizado
```

Note que se o teste n√£o retornar `TRUE` ou `FALSE` o R reportar√° erro.

```{r, error = T}
x <- NA

if (x > 4) print('x √© maior do que quatro')
```

## Ifelse

R possui a **fun√ß√£o** `ifelse`, que apesar de n√£o ser para controle de fluxo, possui l√≥gica de uso muito semelhante ao `if` e por este motivo ser√° tratada neste cap√≠tulo. Esta fun√ß√£o efetua teste em valor de entrada e define um valor a ser retornado caso verdadeiro e outro caso falso.

O retorno de `ifelse` possui o mesmo formato da estrutura informada no argumento **test**. Esta fun√ß√£o pode ser usada para atribui√ß√£o em data frames de forma mais sucinta.

Vejamos um exemplo:

```{r, erro = T}
df_mtcars6 <-
  mtcars |> 
  subset(select = c('hp', 'mpg', 'cyl')) |> 
  head()

df_mtcars6                 

df_mtcars6[df_mtcars6$hp > 100, 'RESULTADO'] <-
  df_mtcars6[df_mtcars6$hp > 100, ]$mpg

df_mtcars6[df_mtcars6$hp <= 100, 'RESULTADO'] <-
  df_mtcars6[df_mtcars6$hp <= 100,]$cyl

df_mtcars6

# com ifelse
df_mtcars6$RESULTADO2 <- 
  ifelse(df_mtcars6$hp > 100, 
         df_mtcars6$mpg, 
         df_mtcars6$cyl)

df_mtcars6
```

## If Else

O `if else` pode ser usado para inserir uma a√ß√£o ap√≥s o retorno negativo do teste feito pelo `if`.

```{r}
x <- 3
if(x > 4) {
  print('x √© maior do que quatro')
} else {
   print('x n√£o √© maior do que quatro')
}
```

Veja que podem ser usadas muitas declara√ß√£o `else` em sequ√™ncia.

```{r}
x <- 3
if(x > 3) {
  print('x √© maior do que tr√™s')
} else if (x < 3){
  print('x √© menor do que tr√™s')
} else if (x == 3){
  print('x √© igual a tr√™s')
}
```

## La√ßo For

Um la√ßo `for` √© uma estrutura que efetua uma determinada quantidade de passos de acordo com a sequ√™ncia informada. a declara√ß√£o deve ser feita no formato: `for(x in seq)`, sendo x a vari√°vel que ser√° atualizada a cada itera√ß√£o iniciando no ¬¥rimeiro valor informado em `seq` e ecerrando no √∫ltimo. Um exemplo:

```{r}
for(x in 1:5){
  print(paste('Itera√ß√£o:', x))
}
```

Caso se deseje mudar o incremento a cada passo pode ser usada a fun√ß√£o `seq`. Tamb√©m √© poss√≠vel usar um passo decrescente.

```{r}
for(x in seq(2, 1, -0.25)) {
  print(paste('Valor de x:', x))
}
```

No exemplo acima, x √© inicializada com valor 1 e vai sendo incrementada em 1 unidade ao in√≠cio do pr√≥ximo passo. Um la√ßo `for` tamb√©m pode fazer itera√ß√µes sobre vetores com texto, por exemplo.

```{r}
for(i in c('S√£o Paulo', 'Rio de Janeiro', 'Porto Alegre')){
  print(paste('Cidade atual:', i))
}
```

No la√ßo `for` a sequ√™ncia no qual ser√° feita a itera√ß√£o √© considerada antes de se iniciar o la√ßo, assim mesmo se houver alguma altera√ß√£o nesta sequ√™ncia em um dos passos esta altera√ß√£o n√£o impactar√° na execu√ß√£o.

```{r}
x <- 3
for(i in 1:x) {
  x <- x + 2
  print(x)
}
```

## While

::: callout-note
### For x While

Um la√ßo `for` √© utilizado quando se tem uma sequ√™ncia definida de passos. Caso se deseje executar alguma opera√ß√£o at√© o atendimeto de uma condi√ß√£o, use `while`.
:::

A estrutura `while` possui a seguinte configura√ß√£o: `while(condi√ß√£o)`. Assim, a repeti√ß√£o do c√≥digo dentro de um bloco while ocorre at√© que a condi√ß√£o n√£o seja mais satisfeita. Exemplo:

```{r}
condicao <- 5
while(condicao < 7){
  print(condicao)
  condicao <- condicao + 1
}
```

A vari√°vel **condicao** √© iniciada com valor 5 e atende a condi√ß√£o **se \< 7**. O c√≥digo ent√£o √© executado, imprimindo no console o valor da variav√©l e ap√≥s esta recebe seu pr√≥prio valor mais 1. Na itera√ß√£o seguinte seu valor √© 6 e ainda atende a condi√ß√£o de **se \< 7**. Na terceira itera√ß√£o seu valor, novamente atualizado, ser√° 7 e n√£o cumprindo a condi√ß√£o o `while` √© encerrado.

A estrutura `while` pode ficar operando indefinidamente se por algum motivo a condi√ß√£o seja sempre atendida. Teste o c√≥digo abaixo e veja que ele rodar√° indefinidamente. Voc√™ pode par√°-lo teclando **ESC** no teclado.

```{r, eval = F}
while(TRUE){
  print(condicao)
  condicao <- condicao + 1
}
```

## Repeat

E estrutura `repeat` funciona de forma an√°loga ao `while`, entretanto esta n√£o testa condi√ß√£o de parada. Para efetuar a parada o usu√°rio deve fazer de forma expl√≠cita.

```{r}
x <- 1
y <- 2
  
repeat{
  x <- x + y  
  print(x)  
  if (x > 11) break
}
```

## Break e Next

O `break` encerra as estruturas `for`, `while` e `repeat`. `Next`, por sua vez, interrompe a execu√ß√£o da itera√ß√£o atual e inicia a pr√≥xima.

Abaixo um exemplo com uso de `break` em um la√ßo `for`. Note que apenas a primeira itera√ß√£o √© executada.

```{r}
for (i in 1:3){
  print(i)
  break
}
```

Abaixo um exemplo de uso do `next`. Repare que o comando `print('Teste')` nunca √© executado, pois o `next` interrompe a execu√ß√£o da itera√ß√£o atual, assim tudo que for colocado ap√≥s esta linha (dentro do la√ßo) n√£o √© executado.

```{r}
for (i in 1:3){
  print(i)
  next
  print('Teste')
}
```

Em caso de la√ßos embutidos, `break` e `next` impactam apenas o mais "interno".

```{r}
for (i in 1:3){
  for (j in 1:3){
    break
    print(paste('Valor de j √©:', j))
  }
  print(paste('Valor de i √©:', i))
}
```

------------------------------------------------------------------------

@datamentor_repeat_loop

@r

√öltima atualiza√ß√£o: `r format(file.info('r_controles_fluxo.qmd')$mtime, '%d/%m/%Y - %H:%M:%S')`
