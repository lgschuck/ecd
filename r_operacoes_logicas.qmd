# Opera√ß√µes L√≥gicas

[Status](convencoes.html#status-do-material) üü¶üü®üü®

A linguagem R oferece uma s√©rie de operadores para utiliza√ß√£o em testes l√≥gicos.

## Operadores Relacionais

| Operador | Fun√ß√£o           |
|----------|------------------|
| \>       | Maior que        |
| \<       | Menor que        |
| \>=      | Maior ou igual a |
| \<=      | Menor ou igual a |
| ==       | Igual a          |
| !=       | Diferente de     |

```{r}
5 > 6
5 <= 6
5 == 6
5 != 6
```

## Operadores L√≥gicos

| Operador | Fun√ß√£o              |
|----------|---------------------|
| !        | Nega√ß√£o             |
| &        | E                   |
| \|       | Ou                  |
| xor      | Ou exclusivo        |
| isTRUE   | Testa se verdadeiro |
| isFALSE  | Testa se falso      |

```{r}
!FALSE
!TRUE

5 > 6
!5 > 6

isTRUE(5 > 6)

isFALSE(5 > 6)
```

### Ou Exclusivo (Xor)

O operador `xor` fornece sa√≠da verdadeira quando apenas um dos valores for verdadeiro.

```{r}
# Falso XOR Falso = Falso
xor(5 > 6, 6 > 9)

# Verdadeiro XOR Verdadeiro = Falso
xor(5 > 4, 6 > 5)

# Verdadeiro XOR Falso = Verdadeiro
xor(5 > 4, 6 > 9)

# Falso XOR Verdadeiro = Falso
xor(5 > 6, 6 > 5)

```

## Preced√™ncia

Na utiliza√ß√£o de testes l√≥gicos √© importante observar a ordem (preced√™ncia) de aplica√ß√£o dos operadores. O uso de par√™nteses altera a o escopo de aplica√ß√£o dos operadores.

| Ordem | Operador                 |
|-------|--------------------------|
| 1     | \<, \>, \<=, \>=, ==, != |
| 2     | !                        |
| 3     | &                        |
| 4     | \|                       |

: Preced√™ncia de Operadores

Abaixo alguns testes.

```{r}
# Falso E Falso = Falso
5 > 6 & 4 > 5

# Verdadeiro E Verdadeiro = Verdadeiro
!5 > 6 & !4 > 5

# Verdadeiro E Falso = Falso
!5 > 6 & 4 > 5

# Nega√ß√£o de(Falso E Falso) = Verdadeiro
!(5 > 6 & 4 > 5)
```

```{r}
# Falso OU Falso = Falso
5 > 6 | 4 > 5

# Verdadeiro OU Verdadeiro = Verdadeiro
!5 > 6 | !4 > 5

# Verdadeiro OU Falso = Verdadeiro
!5 > 6 | 4 > 5

# Nega√ß√£o de (Falso OU Falso) = Verdadeiro
!(5 > 6 | 4 > 5)

```

## All e any

As fun√ß√µes `all` e `any` testam se vetores possuem valores `TRUE`, todos ou pelo menos 1, respectivamente.

```{r}
vetor_logico <- c(T, T, T)

all(vetor_logico)
any(vetor_logico)
```

Apenas valores `FALSE`:

```{r}
vetor_logico <- c(F, F, F)

all(vetor_logico)
any(vetor_logico)
```

Vetor com apenas 1 valor `TRUE`.

```{r}
vetor_logico <- c(T, F, F, F)
all(vetor_logico)
any(vetor_logico)
```

Vetor com todos os valores falsos (`FALSE`).

```{r}
vetor_logico <- c(F, F, F, F)
all(vetor_logico)
any(vetor_logico)
```

Note que a presen√ßa de valores `NA` altera completamente o retorno da fun√ß√£o `all`, mas n√£o da fun√ß√£o `any`.

```{r}
vetor_logico <- c(T, F, T, NA)
all(vetor_logico)
any(vetor_logico)
```

Isto ocorre, pois a fun√ß√£o `any` s√≥ retorna `NA` se existirem valores `NA` e `FALSE` no vetor.

```{r}
vetor_logico <- c(F, NA, NA, NA)
any(vetor_logico)

vetor_logico <- c(NA, NA , NA, NA)
any(vetor_logico)
```

Ambas as fun√ß√µes aceitam o par√¢metro `na.rm`, que remove no valores `NA` antes de fazer a avali√ß√£o.

```{r}
vetor_logico <- c(T, T, T, NA)
all(vetor_logico, na.rm = T)
any(vetor_logico, na.rm = T)
```

Com presen√ßa de valores falsos;

```{r}
vetor_logico <- c(T, F, F, NA)
all(vetor_logico, na.rm = T)
any(vetor_logico, na.rm = T)
```

Equivalente a:

```{r}
vetor_logico <- c(T, F, F)
all(vetor_logico, na.rm = T)
any(vetor_logico, na.rm = T)
```

## Operador %in%

O operador bin√°rio `%in%` efetua teste de presen√ßa do objeto da esquerda (*left hand side*) no da direita (*right hand side*).

```{r}
x <- c(1, 2, 3, 4)
y <- c(3, 4, 5)

x %in% y
y %in% x
```

Veja que o retorno √© dado pelo tamanho do objeto da esquerda. Assim `x %in% y` √© uma opera√ß√£o completamente diferente de `y %in% x.`

------------------------------------------------------------------------

@r

√öltima atualiza√ß√£o: `r format(file.info('r_operacoes_logicas.qmd')$mtime, '%d/%m/%Y - %H:%M:%S')`
