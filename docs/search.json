[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "eRando em Ciênc1a de D4do$",
    "section": "",
    "text": "Bem Vindo\nEste é um livro sobre a utilização da linguagem R em Ciência de Dados.\nEste material é um projeto pessoal usado como fonte de consulta e aprendizado, sem compromisso com uma estrutura específica.\nMuitas vezes o exposto aqui é a prática (para fixação e exploração) de conceitos apresentados em outros materiais. Assim todas as fontes utilizadas, mesmo que de forma subjetiva, são citadas.\n\n\nVersão do R\nA versão do R utilizada é a 4.3.0.\n\nÚltima atualização: 11/05/2023 - 19:56:16"
  },
  {
    "objectID": "intro_r.html#distribuição-de-conhecimento",
    "href": "intro_r.html#distribuição-de-conhecimento",
    "title": "Linguagem R",
    "section": "Distribuição de Conhecimento",
    "text": "Distribuição de Conhecimento\nUma vantagem da liguagem R é a existência de uma gama enorme de conteúdos distribuídos através da Internet, muitos de forma livre e de fácil acesso. Abaixo alguns sites com conteúdos muito ricos sobre R:\n\nhttps://rstudio.github.io/r-manuals/\nhttps://www.bigbookofr.com/\nhttps://r4ds.hadley.nz/\nhttps://www.datacamp.com/\nhttps://statisticsglobe.com/\nhttps://r-charts.com/\nhttp://www.sthda.com/english/\n\n\n¹ https://www.r-project.org/\nÚltima atualização: 10/05/2023 - 21:32:42"
  },
  {
    "objectID": "rstudio.html#o-que-é-o-rstudio",
    "href": "rstudio.html#o-que-é-o-rstudio",
    "title": "1  RStudio",
    "section": "1.1 O que é o RStudio?",
    "text": "1.1 O que é o RStudio?\nO RStudio é um IDE (Integrated Development Environment) criado pela Posit para as linguagens R e Python. Apesar de não ser necessário para uilização de R, o RStudio fornece muitas funcionalidades para programação. Neste capítulo serão apresentados alguns de seus principais recursos.\n\n\n\n\n\n\n\n\n\n\n\n1.1.1 Layout\nO RStudio possui basicamente 4 painéis dimensionáveis. Cada um destes painéis pode trazer uma série de abas.\n\nConsole: neste painel está embutido o R propriamente dito.\n\n\n\n\n\n\n\nFiles: estrutura de pastas do sistema.\n\n\n\n\n\n\n\nEnvironment: apresenta os objetos criados no ambiente do R.\n\n\n\n\n\n\n\nSource: aqui são abertos os arquivos de códigos (scripts, Rmarkdown, Quarto, SQL, etc)."
  },
  {
    "objectID": "rstudio.html#menu-tools",
    "href": "rstudio.html#menu-tools",
    "title": "1  RStudio",
    "section": "1.2 Menu Tools",
    "text": "1.2 Menu Tools\nO menu Tools oferece uma série de funcionalidades para configuração do ambiente de trabalho.\n\n\n\n\n\n\n1.2.1 Install Packages\nNesta opção é aberta a janela para instalação de pacotes.\n\n\n\n\n\n\nInstall From: local de busca dos pacotes a serem instalados\n\nRepository: repositório configurado\n\nPackages: nome dos pacotes a serem instalados. Podem ser escolhidos múltiplos pacotes, devendo ser separados por espaço ou vírgula\n\nPackage Archive File: opção para busca de arquivo a partir da máquina do usuário. Esta opção habilita botão para busca do pacote\n\nPackage archive: arquivo do pacote a ser instalado\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstall to Library: pasta de instalação dos pacotes\nInstall Dependencies: marcação para que seja feita isntalação de dependências dos pacotes selecionados.\n\n\n\n1.2.2 Check for Package Updates\nEste opção abre a janela Update Packages, permitindo visualizar quais pacotes possuem versões mais recentes. A coluna NEWS possibilita visualizar o arquivo com dados de atuializações feitas no pacote.\n\n\n\n\n\n\n\n1.2.3 Global Options\nEsta opção abre a janela Options do RStudio onde podem ser feitas as principais configurações de comportamento da ferramenta.\n\n\n\n\n\n\nRStudio\nIDE\nÚltima atualização: 02/08/2023 - 19:55:41"
  },
  {
    "objectID": "nomes.html#nomes",
    "href": "nomes.html#nomes",
    "title": "2  Nomeando Objetos",
    "section": "2.1 Nomes",
    "text": "2.1 Nomes\nA linguagem R aceita muitas possibilidades para nomeação de objetos. Inclusive podem ser criados objetos com espaços em seus nomes e até mesmo com caracteres especiais (desde que entre aspas ou crases).\n\nx <- 10\n\n.x <- 10\n\n`nome com espaco` <- 55\n\n'teste 1' <- 2\n\nUm objeto criado através do uso de aspas ou crases tem seu conteúdo acessado quando “chamado” com crases. Aspas são entendidas como sinalização para strings e assim não retornam o conteúdo do objeto e sim a própria string informada.\n\n'teste 1' #retorna como string\n\n[1] \"teste 1\"\n\n# Exibe conteúdo do objeto\n`teste 1`\n\n[1] 2\n\n\nObjetos podem ser criados com “.” no início de seus nomes. Estes são objetos ocultos e portanto não aparecem em um comando ls “puro”, por exemplo. Tampouco são exibidos na aba Environment do RStudio. Para visualizá-los através da função ls pode ser usado o parâmetro all.names = T.\n\nls()\n\n[1] \"nome com espaco\" \"teste 1\"         \"x\"              \n\nls(all.names = T)\n\n[1] \".main\"           \".x\"              \"nome com espaco\" \"teste 1\"        \n[5] \"x\"              \n\n\n\n2.1.1 Primeiro Caractere\nExistem algumas regras para iniciar o nome dos objetos. Alguns caracteres “especiais” não podem ser usados, bem como os números.\n\n$x <- 10  \n\nError: <text>:1:1: '$' inesperado\n1: $\n    ^\n\n\n\n55x <- 10 \n\nError: <text>:1:3: unexpected symbol\n1: 55x\n      ^\n\n\nPerceba que números podem ser usados desde que o primeiro caractere seja ‘válido’. Mas o mesmo não ocorre com caracteres “especiais”.\n\nx55x <- 888\n\nx55x\n\n[1] 888\n\n\n\nx$ <- 10\n\nError: <text>:1:4: unexpected assignment\n1: x$ <-\n       ^\n\n\nUma alternativa se dá mais uma vez com o uso de aspas ou crases. Com elas é possível ‘burlar’ estas limitações.\n\n`teste @!&` <- 123456\n\n`teste @!&`\n\n[1] 123456\n\n'55 teste @!&' <- 10\n\n`55 teste @!&`\n\n[1] 10\n\n\nApesar de possível, objetos com nomes mais complicados como os exemplificados acabam tornando a vida do programador um pouco mais difícil."
  },
  {
    "objectID": "nomes.html#case-sensitive",
    "href": "nomes.html#case-sensitive",
    "title": "2  Nomeando Objetos",
    "section": "2.2 Case Sensitive",
    "text": "2.2 Case Sensitive\nR é uma linguagem case sensitive, ou seja, ela diferencia maiúsculas de minúsculas. Assim um objeto com nome de Teste é diferente teste, tesTe, TESTE…\n\nteste <- 10\nTeste <- 15\ntesTe <- 20\nTESTE <- 25\n\nls()\n\n [1] \"55 teste @!&\"    \"nome com espaco\" \"teste\"           \"tesTe\"          \n [5] \"Teste\"           \"TESTE\"           \"teste @!&\"       \"teste 1\"        \n [9] \"x\"               \"x55x\""
  },
  {
    "objectID": "nomes.html#convenções",
    "href": "nomes.html#convenções",
    "title": "2  Nomeando Objetos",
    "section": "2.3 Convenções",
    "text": "2.3 Convenções\nConforme o seu código em R (e de outra linguagem qualquer) for crescendo você perceberá rapidamente a necessidade de identificar de forma intuitiva os objetos criados. Assim, é muito interessante a utilização de alguma convenção para facilitar sua vida. Existem diversas delas, como camelCase, snake_case, SCREAMING_SNAKE_CASE, etc. Uma “regra” importante seria não usar “.” em nome de objetos, pois através do ponto o R acessa funções (métodos) de acordo com a classe do objeto. Usar o ponto pode causar certa confusão.\n\n# camelCase\nobjetoTeste <- 'Teste camelCase'\n\n# snake_case\nobjeto_teste <- 'Teste snake_case'\n\nUm bom guia é o The tidyverse style guide. Tenha sempre em mente que sue código deve ser lido com facilidade no futuro, seja ele próximo ou distante.\n\nHands-On Programming with R, especialmente capítulo 2 - The Very Basics\nR Manuals :: An Introduction to R - Capítulo 1\nNaming_convention_(programming)\nÚltima atualização: 23/06/2023 - 23:50:34"
  },
  {
    "objectID": "data_frames.html#o-que-são-data-frames",
    "href": "data_frames.html#o-que-são-data-frames",
    "title": "3  Data Frames",
    "section": "3.1 O que são data frames ?",
    "text": "3.1 O que são data frames ?\nConforme o próprio manual do R, data.frame é a estrutura que imita de forma mais próxima um dataset do SAS ou SPSS. De forma resumida um data.frame é uma estrutura tabular com colunas (variáveis, atributos, etc) e registros (casos, observações, instâncias, etc). Diferente de uma matriz um data.frame pode ter diferentes tipos de dados.\nUm data.frame possui todas as colunas com o mesmo tamanho (quantidade de regitros). A classe de um objeto data.frame possui o mesmo nome ‘data.frame’. Abaixo pode ser visualizada a classe do data.frame Iris (muito usado em exemplos em Ciência de Dados) e também as primeiras linhas com o comando head.\n\nclass(iris)\n\n[1] \"data.frame\"\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa"
  },
  {
    "objectID": "data_frames.html#atributos",
    "href": "data_frames.html#atributos",
    "title": "3  Data Frames",
    "section": "3.2 Atributos",
    "text": "3.2 Atributos\nOs atributos “padrão” de um data.frame são: names, class e row.names. É possível acessá-los com a função attributes. O atributo names também pode ser obtido com a função names.\n\nattributes(iris)\n\n$names\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n\n$class\n[1] \"data.frame\"\n\n$row.names\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108\n[109] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126\n[127] 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144\n[145] 145 146 147 148 149 150\n\nnames(iris)\n\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\""
  },
  {
    "objectID": "data_frames.html#dimensões",
    "href": "data_frames.html#dimensões",
    "title": "3  Data Frames",
    "section": "3.3 Dimensões",
    "text": "3.3 Dimensões\nA função dim retorna as dimensões de um data.frame (linhas e colunas). Estes dados também podem ser obtidos com as funções nrow e ncol.\n\ndim(iris)\n\n[1] 150   5\n\nnrow(iris)\n\n[1] 150\n\nncol(iris)\n\n[1] 5"
  },
  {
    "objectID": "data_frames.html#acessando-dados",
    "href": "data_frames.html#acessando-dados",
    "title": "3  Data Frames",
    "section": "3.4 Acessando Dados",
    "text": "3.4 Acessando Dados\n\n3.4.1 Índices\nComo a estrutura de um data.frame é organizada em linhas e colunas, podemos acessar os dados utilizando colchetes ([ ]): base[linha, coluna]. Podem ser usados intervalos de índices com o operador ‘:’.\n\n# Acessar primeira linha e segunda coluna (Sepal.Width)\niris[1,2]\n\n[1] 3.5\n\n# Acessar linhas 1 até 3 e a segunda coluna\niris[1:3, 2]\n\n[1] 3.5 3.0 3.2\n\n\nApesar de ser possível, utilizar o índice faz com que a referência seja relativa, ou seja, a variável ‘1’ pode mudar caso o data.frame seja editado. Por exemplo, caso em algum momento anterior a variável Sepal.Length tenha sido excluída, uma nova variável assumirá o índice 1. Além disto ao se ler o código não fica claro qual variável está sendo acessada.\n\n\n3.4.2 Usando Nomes das Colunas\nExistem diversas outras formas para acessar dados de um data.frame, inclusive utilizando o nome da coluna de forma explícita.\n\n# Acessar primeira linha e segunda coluna (pelo nome)\niris[1:3,'Sepal.Width']\n\n[1] 3.5 3.0 3.2\n\n\nUma forma mais comum é utilizando o operador $ para acessar a coluna pelo seu nome.\n\n# Acessar primeira linha e segunda coluna (pelo nome)\niris[1,]$Sepal.Width\n\n[1] 3.5\n\n# Acessar linhas 1 até 3 e a segunda coluna (pelo nome)\niris[1:3,]$Sepal.Width\n\n[1] 3.5 3.0 3.2\n\n\n\n\n3.4.3 Filtrando Dados\nDigamos que se deseje acessar apenas dados que cumpram determinada condição. Para isto, na seleção das linhas do data.frame, deve ser informada condição lógica na forma abaixo:\n\n# Retorna valores de Speal.Width onde Petal.Length for maior do que 6\nx <- iris[iris$Petal.Length > 6,'Sepal.Width']\ny <- iris[iris$Petal.Length > 6,]$Sepal.Width\n\nx\n\n[1] 3.0 2.9 3.6 3.8 2.6 2.8 2.8 3.8 3.0\n\ny\n\n[1] 3.0 2.9 3.6 3.8 2.6 2.8 2.8 3.8 3.0\n\n# Função que compara os objetos\nidentical(x, y)\n\n[1] TRUE\n\n\nO retorno é dado pelas linhas em que a variável Petal.Length atende as condições declaradas. Este teste retorna um vetor de valores lógicos, e os valores TRUE são os que “permanecem”. Abaixo outro exemplo:\n\nhead(iris$Petal.Length) > 1.4\n\n[1] FALSE FALSE FALSE  TRUE FALSE  TRUE\n\n\nAplicando este vetor de valores lógicos, o R entende que as posições correspondentes a TRUE devem ser mantidas. No exemplo abaixo, as posições (linhas) 4 e 6 atendem a condição especificada, portanto apenas estas serão selecionadas.\n\niris2 <- head(iris)\nfiltro <- head(iris2$Petal.Length) > 1.4\n\niris2[filtro,'Sepal.Width']\n\n[1] 3.1 3.9\n\n\nEquivalente ao comando abaixo:\n\niris2[c(4,6), 'Sepal.Width']\n\n[1] 3.1 3.9\n\n\n\n3.4.3.1 Função Subset\nA função subset permite efetuar filtro em um data.frame e muitas vezes oferece uma forma mais organizada visualmente, principalmente quando em filtros com muitas condiões. Esta função também permite seleção de colunas a serem mantidas. Note que a função subset não demanda que o data.frame seja referenciado antes das variáveis e também aceita os nomes das variáveis sem aspas. Isto torna o código mais legível.\n\nsubset(x = mtcars, # dados\n       subset = mpg > 25, # filtro  \n       select = c(mpg, cyl, hp)) # colunas\n\n                mpg cyl  hp\nFiat 128       32.4   4  66\nHonda Civic    30.4   4  52\nToyota Corolla 33.9   4  65\nFiat X1-9      27.3   4  66\nPorsche 914-2  26.0   4  91\nLotus Europa   30.4   4 113\n\n\nUsando um filtro um pouco mais complexo e sem a informação do nome dos parâmetros:\n\nsubset(mtcars, # dados \n       mpg > 25 & cyl == 4 & hp > 70, # filtro  \n       c(mpg, cyl, hp)) # colunas\n\n               mpg cyl  hp\nPorsche 914-2 26.0   4  91\nLotus Europa  30.4   4 113\n\n\n\nR Manuals :: R Language Definition - Capítulo 2\nÚltima atualização: 23/06/2023 - 22:28:58"
  },
  {
    "objectID": "pacotes.html#o-que-são-pacotes",
    "href": "pacotes.html#o-que-são-pacotes",
    "title": "4  Pacotes",
    "section": "4.1 O que são pacotes?",
    "text": "4.1 O que são pacotes?\nUm pacote em R é basicamente um conjunto de funções e/ou funcionalidades criadas por terceiros que “expandem” o poder da linguagem. A principal opção para instalação de pacotes é através do CRAN. O CRAN é um repositório que contém milhares de pacotes (19.466 em maio de 2023). Nele também podem ser encontrados pacotes em suas versões “antigas”. Caso algum pacote não esteja hospedado no CRAN, ele também pode ser instalado, diretamente do arquivo fornecido pelo desenvolvedor do pacote por exemplo (muitos distribuem através do Github).\nExistem alguns pacotes “especiais” em R que compõem a própria linguagem. Estes pacotes possuem suas versões idênticas à da linguagem e são “classificados” com prioridade “base”. Assim quando se faz a instalação da linguagem R, muitos pacotes também são instalados."
  },
  {
    "objectID": "pacotes.html#pacotes-instalados",
    "href": "pacotes.html#pacotes-instalados",
    "title": "4  Pacotes",
    "section": "4.2 Pacotes Instalados",
    "text": "4.2 Pacotes Instalados\nPodemos ver os pacotes instalados com o comando installed.packages:\n\n# Exibindo 5 primeiros\nas.data.frame(installed.packages())$Package[1:5]\n\n[1] \"askpass\"   \"backports\" \"base64enc\" \"bit\"       \"bit64\"    \n\n\nA função installed.packages retorna uma série de informações a respeito dos pacotes. Abaixo alguns exemplos de pacotes bastante utilizados. Para simplificar a visualização foi usada função t, que transpõe o data.frame de colunas para linhas.\n\npacotes <- as.data.frame(installed.packages())\n# pacote base\nt(pacotes[pacotes$Package == 'base',])\n\n                      base                                \nPackage               \"base\"                              \nLibPath               \"C:/Program Files/R/R-4.3.0/library\"\nVersion               \"4.3.0\"                             \nPriority              \"base\"                              \nDepends               NA                                  \nImports               NA                                  \nLinkingTo             NA                                  \nSuggests              \"methods\"                           \nEnhances              NA                                  \nLicense               \"Part of R 4.3.0\"                   \nLicense_is_FOSS       NA                                  \nLicense_restricts_use NA                                  \nOS_type               NA                                  \nMD5sum                NA                                  \nNeedsCompilation      NA                                  \nBuilt                 \"4.3.0\"                             \n\n# pacote MASS\nt(pacotes[pacotes$Package == 'MASS',])\n\n                      MASS                                             \nPackage               \"MASS\"                                           \nLibPath               \"C:/Program Files/R/R-4.3.0/library\"             \nVersion               \"7.3-58.4\"                                       \nPriority              \"recommended\"                                    \nDepends               \"R (>= 4.3.0), grDevices, graphics, stats, utils\"\nImports               \"methods\"                                        \nLinkingTo             NA                                               \nSuggests              \"lattice, nlme, nnet, survival\"                  \nEnhances              NA                                               \nLicense               \"GPL-2 | GPL-3\"                                  \nLicense_is_FOSS       NA                                               \nLicense_restricts_use NA                                               \nOS_type               NA                                               \nMD5sum                NA                                               \nNeedsCompilation      \"yes\"                                            \nBuilt                 \"4.3.0\"                                          \n\n# pacote data.table\nt(pacotes[pacotes$Package == 'data.table',])\n\n                      data.table                                                                                               \nPackage               \"data.table\"                                                                                             \nLibPath               \"C:/Users/luisg/AppData/Local/R/win-library/4.3\"                                                         \nVersion               \"1.14.8\"                                                                                                 \nPriority              NA                                                                                                       \nDepends               \"R (>= 3.1.0)\"                                                                                           \nImports               \"methods\"                                                                                                \nLinkingTo             NA                                                                                                       \nSuggests              \"bit64 (>= 4.0.0), bit (>= 4.0.4), curl, R.utils, xts,\\nnanotime, zoo (>= 1.8-1), yaml, knitr, rmarkdown\"\nEnhances              NA                                                                                                       \nLicense               \"MPL-2.0 | file LICENSE\"                                                                                 \nLicense_is_FOSS       NA                                                                                                       \nLicense_restricts_use NA                                                                                                       \nOS_type               NA                                                                                                       \nMD5sum                NA                                                                                                       \nNeedsCompilation      \"yes\"                                                                                                    \nBuilt                 \"4.3.0\"                                                                                                  \n\n\nPode ser visto no campo Priority que para o pacote base o conteúdo é “base”, isto significa que este faz parte da instalação do R. Já o pacote MASS, por exemplo, é um pacote recomendado. O pacote data.table, que é um pacote “normal”, não possui informação no campo Priority.\nTambém podemos visualizar dados do pacote (arquivo DESCRIPTION do próprio pacote) com o comando packageDescription:\n\npackageDescription('base')\n\nPackage: base\nVersion: 4.3.0\nPriority: base\nTitle: The R Base Package\nAuthor: R Core Team and contributors worldwide\nMaintainer: R Core Team <do-use-Contact-address@r-project.org>\nContact: R-help mailing list <r-help@r-project.org>\nDescription: Base R functions.\nLicense: Part of R 4.3.0\nSuggests: methods\nBuilt: R 4.3.0; ; 2023-04-21 09:22:06 UTC; windows\n\n-- File: C:/PROGRA~1/R/R-43~1.0/library/base/Meta/package.rds"
  },
  {
    "objectID": "pacotes.html#pasta-de-instalação",
    "href": "pacotes.html#pasta-de-instalação",
    "title": "4  Pacotes",
    "section": "4.3 Pasta de Instalação",
    "text": "4.3 Pasta de Instalação\nO R possui pastas de instalação dos pacotes. Para visualizá-las basta usar o comando .libPaths. A pasta padrão de instalação traz os diversos pacotes que foram instalados junto com o R (os “básicos” e os recomendados).\n\n.libPaths()\n\n[1] \"C:/Users/luisg/AppData/Local/R/win-library/4.3\"\n[2] \"C:/Program Files/R/R-4.3.0/library\"            \n\n# Exibir 10 primeiros da primeira pasta\nlist.files(.libPaths()[1])[1:10]\n\n [1] \"askpass\"   \"backports\" \"base64enc\" \"bit\"       \"bit64\"     \"blob\"     \n [7] \"broom\"     \"bslib\"     \"cachem\"    \"callr\"    \n\n# Exibir 10 primeiros da segunda pasta\nlist.files(.libPaths()[2])[1:10]\n\n [1] \"base\"      \"boot\"      \"class\"     \"cluster\"   \"codetools\" \"compiler\" \n [7] \"datasets\"  \"foreign\"   \"graphics\"  \"grDevices\""
  },
  {
    "objectID": "pacotes.html#pacotes-disponíveis",
    "href": "pacotes.html#pacotes-disponíveis",
    "title": "4  Pacotes",
    "section": "4.4 Pacotes Disponíveis",
    "text": "4.4 Pacotes Disponíveis\nA função available.packages procura pacotes disponíveis no valor informado no argumento repos. Por padrão é buscado de getOption(“repos”).\n\n# Definir repositório\noptions(repos = 'https://cran.rstudio.com/')\n\n# Exibindo 5 primeiros\navailable.packages()[1:5]\n\n[1] \"A3\"            \"AalenJohansen\" \"AATtools\"      \"ABACUS\"       \n[5] \"abasequence\""
  },
  {
    "objectID": "pacotes.html#dependências-de-pacotes",
    "href": "pacotes.html#dependências-de-pacotes",
    "title": "4  Pacotes",
    "section": "4.5 Dependências de Pacotes",
    "text": "4.5 Dependências de Pacotes\nOs pacotes podem e em sua maioria utilizam funções de outros pacotes. Estes “outros pacotes” são denominadas de dependências. As informações de dependências também constam no DESCRIPTION do pacote.\nO pacote tools, que faz parte da base do R, oferece uma função para busca de dependências de pacotes. Inclusive existe a opção de recursividade, ou seja, busca também as dependências das dependências do pacote desejado.\n\ntools::package_dependencies('dplyr')\n\n$dplyr\n [1] \"cli\"        \"generics\"   \"glue\"       \"lifecycle\"  \"magrittr\"  \n [6] \"methods\"    \"pillar\"     \"R6\"         \"rlang\"      \"tibble\"    \n[11] \"tidyselect\" \"utils\"      \"vctrs\"     \n\ntools::package_dependencies('dplyr', recursive = T)\n\n$dplyr\n [1] \"cli\"        \"generics\"   \"glue\"       \"lifecycle\"  \"magrittr\"  \n [6] \"methods\"    \"pillar\"     \"R6\"         \"rlang\"      \"tibble\"    \n[11] \"tidyselect\" \"utils\"      \"vctrs\"      \"fansi\"      \"utf8\"      \n[16] \"pkgconfig\"  \"withr\"      \"grDevices\"  \"graphics\"   \"stats\""
  },
  {
    "objectID": "pacotes.html#instalação-de-pacotes",
    "href": "pacotes.html#instalação-de-pacotes",
    "title": "4  Pacotes",
    "section": "4.6 Instalação de Pacotes",
    "text": "4.6 Instalação de Pacotes\nPara efetuar a instalação de pacotes usa-se a função install.packages. Os pacotes podem ser instalados diretamente de repositórios na Internet (como o CRAN) ou de arquivos locais.\n\nÚltima atualização: 23/06/2023 - 22:07:54"
  },
  {
    "objectID": "ambientes.html#global-env",
    "href": "ambientes.html#global-env",
    "title": "5  Ambientes",
    "section": "5.1 Global Env",
    "text": "5.1 Global Env\nO Global Env é o ambiente “atual” do usuário. É nele que ficam armazenadas, por padrão, as funções criadas pelos usuários. Ele pode ser “visualizado” com os comandos abaixo:\n\nglobalenv()\n\n<environment: R_GlobalEnv>\n\n.GlobalEnv\n\n<environment: R_GlobalEnv>\n\n\nPodemos visualizar os objetos presentes no ambiente desejado com a função ls.\n\nvariavel <- 5\nls(globalenv())\n\n[1] \"variavel\"\n\nls()\n\n[1] \"variavel\""
  },
  {
    "objectID": "ambientes.html#ambiente-de-pacotes",
    "href": "ambientes.html#ambiente-de-pacotes",
    "title": "5  Ambientes",
    "section": "5.2 Ambiente de Pacotes",
    "text": "5.2 Ambiente de Pacotes\nOs pacotes também possuem ambientes e podemos listar seu “conteúdo” com a função ls. Abaixo usando ls para mostrar os 10 primeiros elementos presentes no ambiente do pacote data.table.\n\nlibrary(data.table)\nas.environment(\"package:data.table\")\n\n<environment: package:data.table>\nattr(,\"name\")\n[1] \"package:data.table\"\nattr(,\"path\")\n[1] \"C:/Users/luisg/AppData/Local/R/win-library/4.3/data.table\"\n\nls(as.environment('package:data.table'))[1:10]\n\n [1] \"%between%\"     \"%chin%\"        \"%flike%\"       \"%ilike%\"      \n [5] \"%inrange%\"     \"%like%\"        \":=\"            \"address\"      \n [9] \"alloc.col\"     \"as.data.table\""
  },
  {
    "objectID": "ambientes.html#ambientes-pai",
    "href": "ambientes.html#ambientes-pai",
    "title": "5  Ambientes",
    "section": "5.3 Ambientes “Pai”",
    "text": "5.3 Ambientes “Pai”\n\nparent.env(.GlobalEnv)\n\n<environment: package:data.table>\nattr(,\"name\")\n[1] \"package:data.table\"\nattr(,\"path\")\n[1] \"C:/Users/luisg/AppData/Local/R/win-library/4.3/data.table\"\n\nparent.env(as.environment(\"package:stats\"))\n\n<environment: package:graphics>\nattr(,\"name\")\n[1] \"package:graphics\"\nattr(,\"path\")\n[1] \"C:/Program Files/R/R-4.3.0/library/graphics\"\n\nparent.env(as.environment(\"package:base\"))\n\n<environment: R_EmptyEnv>\n\n\n\n5.3.1 Buscar Ambiente Pai (Recursivamente)\n\nbuscar_envs_pai <- function(ambiente, nivel = 1){\n \n    if(environmentName(ambiente)==\"R_EmptyEnv\"){\n    return ('Ambiente informado é R_EmptyEnv. Fim da busca.')\n    }\n    \n    marcacao <- ''\n    for (i in 1:nivel){\n      \n      marcacao <- paste0(' ', marcacao)\n    }\n    \n    writeLines(paste0(marcacao, '|-- ', environmentName(parent.env(ambiente))))\n\n    nivel <- nivel + 1\n    buscar_envs_pai(parent.env(ambiente), nivel = nivel)\n\n}\nbuscar_envs_pai(globalenv())\n\n |-- package:data.table\n  |-- tools:quarto\n   |-- tools:quarto\n    |-- package:stats\n     |-- package:graphics\n      |-- package:grDevices\n       |-- package:utils\n        |-- package:datasets\n         |-- package:methods\n          |-- Autoloads\n           |-- base\n            |-- R_EmptyEnv\n\n\n[1] \"Ambiente informado é R_EmptyEnv. Fim da busca.\""
  },
  {
    "objectID": "ambientes.html#criando-ambientes",
    "href": "ambientes.html#criando-ambientes",
    "title": "5  Ambientes",
    "section": "5.4 Criando Ambientes",
    "text": "5.4 Criando Ambientes\n\namb1 <- new.env()\n\namb1\n\n<environment: 0x000001ac54ce4b80>\n\nparent.env(amb1)\n\n<environment: R_GlobalEnv>\n\namb1$x <- 10\n\nx <- 15\n\nx\n\n[1] 15\n\namb1$x\n\n[1] 10\n\n\n\nHands-On Programming with R, especialmente capítulo 8 - Environments\ndata.table\nR-Bloggers - Environments Name\nÚltima atualização: 28/04/2023 - 21:11:03"
  },
  {
    "objectID": "funcoes.html#função-x-ambiente",
    "href": "funcoes.html#função-x-ambiente",
    "title": "6  Funções",
    "section": "6.1 Função x Ambiente",
    "text": "6.1 Função x Ambiente\nAs funções possuem seus próprios ambientes. Assim quando objetos são criados dentro de uma função eles só são acessados dentro dela.\n\nfuncao_exibir_envs <- function(){\n  print('Ambiente atual:') \n  print(environment())\n  \n  print(paste('Ambiente Pai:', environmentName(parent.env(environment()))))\n}\n\nfuncao_exibir_envs()\n\n[1] \"Ambiente atual:\"\n<environment: 0x000002845edf63a0>\n[1] \"Ambiente Pai: R_GlobalEnv\"\n\n\nPara visualizar o código de uma função podemos usar seu nome sem os parênteses.\n\nfuncao_exibir_envs  \n\nfunction(){\n  print('Ambiente atual:') \n  print(environment())\n  \n  print(paste('Ambiente Pai:', environmentName(parent.env(environment()))))\n}\n\n\n\nHands-On Programming with R, especialmente capítulo 8 - Environments\nÚltima atualização: 08/05/2023 - 21:18:59"
  },
  {
    "objectID": "intro_cd.html",
    "href": "intro_cd.html",
    "title": "Ciência de Dados",
    "section": "",
    "text": "Uma definição da IBM para Ciência de Dados:\n’A ciência de dados combina matemática e estatística, programação especializada, análise avançada, inteligência artificial (IA) e aprendizado de máquina com conhecimento em domínio específico para revelar insights acionáveis ocultos nos dados de uma organização’¹.\nUma definição mais sucinta da AWS:\n’A ciência de dados é o estudo dos dados para extrair insights significativos para os negócios’².\n\n¹ https://www.ibm.com/cloud/learn/data-science-introduction\n² https://aws.amazon.com/pt/what-is/data-science/\nÚltima atualização: 06/05/2023 - 18:19:23"
  },
  {
    "objectID": "vies_var.html",
    "href": "vies_var.html",
    "title": "7  Trade-Off Viés x Variância",
    "section": "",
    "text": "⚖️\n\nÚltima atualização: 21/06/2023 - 21:35:24"
  }
]