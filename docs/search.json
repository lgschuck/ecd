[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "eRando em Ci√™nc1a de D4do$",
    "section": "",
    "text": "Bem Vindo\nEste √© um livro sobre a utiliza√ß√£o da linguagem R em Ci√™ncia de Dados.\nEste material √© um projeto pessoal usado como fonte de consulta e aprendizado, sem compromisso com uma estrutura espec√≠fica.\nMuitas vezes o exposto aqui √© a pr√°tica (para fixa√ß√£o e explora√ß√£o) de conceitos apresentados em outros materiais. Assim todas as fontes utilizadas, mesmo que de forma subjetiva, s√£o citadas."
  },
  {
    "objectID": "index.html#vers√µes",
    "href": "index.html#vers√µes",
    "title": "eRando em Ci√™nc1a de D4do$",
    "section": "Vers√µes",
    "text": "Vers√µes\nA vers√£o deste material √©: 0.1.0.16-10-2023.\nA vers√£o do R utilizada √©: 4.3.0, Already Tomorrow.\nA vers√£o do RStudio √©: 2023.06.1+524, Mountain Hydrangea.\nA vers√£o do Quarto √©: 1.2.475.\n\n√öltima atualiza√ß√£o: 20/08/2023 - 22:47:23"
  },
  {
    "objectID": "autor.html",
    "href": "autor.html",
    "title": "Sobre o Autor",
    "section": "",
    "text": "Status üü©üü©üü©\nLu√≠s Gustavo Schuck √© formado em Gest√£o Financeira (2013) pelo Centro Universit√°rio Internacional - Uninter. Possui Especializa√ß√£o em Business Analytics (2021) pela Universidade Federal do Rio Grande do Sul - UFRGS, MBA em Administra√ß√£o e Finan√ßas (2017) pelo Centro Universit√°rio Internacional - Uninter e MBA em Gest√£o Banc√°ria (2015) pelo Centro Universit√°rio Leonardo da Vinci - Uniasselvi. Possui certifica√ß√£o ANBIMA CPA-10 (Certifica√ß√£o Profissional ANBIMA S√©rie-10).\nAtualmente √© aluno do curso de An√°lise e Desenvolvimento de Sistemas pela Universidade Feevale e atua como Analista na Unidade de Risco de Cr√©dito do Banco do Estado do Rio Grande do Sul (Banrisul). Utiliza R desde 2017.\n\n√öltima atualiza√ß√£o: 12/08/2023 - 15:56:19"
  },
  {
    "objectID": "sobre_r.html#r-foundation",
    "href": "sobre_r.html#r-foundation",
    "title": "Linguagem R",
    "section": "R Foundation",
    "text": "R Foundation\nA R Foundation √© uma organiza√ß√£o sem fins lucrativos que tem como objetivo promover o desenvolvimento da linguagem R e ser ponto de refer√™ncia para entidades que desejem interagir com a comunidade de desenvolvimento do R.\nA R Foundation possui uma grande quantidade de apoiadores e doadores. Dentre os principais Patronos do R est√° a empresa Posit, anteriormente RStudio, que desenvolve o principal IDE para R, tamb√©m chamado de RStudio.\nVoc√™ pode ser um apoiador!"
  },
  {
    "objectID": "sobre_r.html#comunidade",
    "href": "sobre_r.html#comunidade",
    "title": "Linguagem R",
    "section": "Comunidade",
    "text": "Comunidade\nUma grande vantagem da liguagem R √© a exist√™ncia de uma grande comunidade de desenvolvimento, assim como uma gama enorme de conte√∫dos distribu√≠dos atrav√©s da Internet, muitos de forma livre e de f√°cil acesso. Abaixo alguns sites com conte√∫dos muito ricos sobre R:\n\nAn√°lise de Dados Financeiros e Econ√¥micos com o R - Vers√£o Online\nIntrodu√ß√£o √† Linguagem R: seus fundamentos e sua pr√°tica\nR Manuals\nBig Book of R\nR for Data Science\nDatacamp\nStatistics Globe\nR Charts\nStatistical tools for high-throughput data analysis\n\n\n√öltima atualiza√ß√£o: 30/09/2023 - 21:17:21\n\n\n\n\nR Core Team. 2023. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/."
  },
  {
    "objectID": "r_intro.html#console-do-r",
    "href": "r_intro.html#console-do-r",
    "title": "1¬† Introdu√ß√£o",
    "section": "1.1 Console do R",
    "text": "1.1 Console do R\nA tela inicial do R em si √© um console, onde s√£o passados comandos e seu interpratador os executa e, se for o caso, exibe sa√≠das. O cursor fica posicionado ao lado do s√≠mbolo do prompt do R, >. Este s√≠mbolo indica que o sistema est√° pronto para receber novo comando.\n\n\n\n\n\nFigura¬†1.1: Tela Inicial\n\n\n\n\n\n1.1.1 Executando Comandos\nA tela inicial fornece algumas sugest√µes para consulta a dados sobre R, como licen√ßa da linguagem, cita√ß√£o, ajudas, etc. Usaremos como exemplo inicial o comando license(). Ap√≥s a digita√ß√£o do comando devemos confirmar com ENTER para que o R execute o comando informado e exiba na tela o resultado, no caso a licen√ßa da pr√≥pria linguagem. Ap√≥s a execu√ß√£o um novo sinal do prompt √© exibido em aguardo de um poss√≠vel pr√≥ximo comando.\n\n\n\n\n\nFigura¬†1.2: Tela Inicial - Licen√ßa\n\n\n\n\nPodemos digitar q(), por exemplo, que √© a fun√ß√£o que efetua o encerramento do R.\n\n\n\n\n\nFigura¬†1.3: Tela Inicial - Quit (sair)\n\n\n\n\nAgora considere um cen√°rio diferente, onde executamos o comando license() seguido do comando citation() (que mostra como deve ser feita a cita√ß√£o da Linguagem R). Conforme os comandos s√£o processados, o console vai sendo preenchido com estes comandos e suas respectivas sa√≠das. A medida que a tela vai ficando ‚Äúcheia‚Äù os dados exibidos no topo v√£o ‚Äúsumindo‚Äù para dar lugar aos mais recentes, na parte inferior.\n\n\n\n\n\nFigura¬†1.4: Tela Inicial - Atualiza√ß√£o do Console\n\n\n\n\n\n\n\n\n\n\nBuscando Comandos Anteriores\n\n\n\nPara buscar comandos executados anteriormente, pode-se usar a seta para cima do teclado. Os comandos v√£o sendo apresentados do mais recente ao mais antigo.\n\n\n\n\n1.1.2 Erros\nSempre que ocorrer algum erro na execu√ß√£o de um comando ser√° exibida no console uma mensagem com o termo Error. Muitas vezes a mensagem de erro auxilia na identifica√ß√£o da causa do erro reportado. Abaixo um exemplo com erro retornado pelo R ap√≥s a tentativa de execu√ß√£o de uma fun√ß√£o inexistente (erro na digita√ß√£o do comando).\n\ncitatin()\n\nError in citatin(): n√£o foi poss√≠vel encontrar a fun√ß√£o \"citatin\""
  },
  {
    "objectID": "r_intro.html#objetos",
    "href": "r_intro.html#objetos",
    "title": "1¬† Introdu√ß√£o",
    "section": "1.2 Objetos",
    "text": "1.2 Objetos\nR opera sobre entidades que s√£o conhecidas como objetos (R Core Team 2023a, cap 3). Existem diversos tipos de objetos em R como listas, matrizes, bases de dados, s√©ries temporais, gr√°ficos, modelos, etc. Neste cap√≠tulo inicial ser√£o utilizados os vetores, pois s√£o as estruturas mais b√°sicas.\n\n\n\n\n\n\nVari√°veis\n\n\n\nMuitas vezes objetos em R s√£o chamados de vari√°veis, no sentido de que vari√°veis armazenam dados. Isto ocorre principalmente para objetos que armazenam um √∫nico valor, como um √∫nico n√∫mero ou texto.\n\n\n\n1.2.1 Vetores (At√¥micos)\nVetores s√£o entidades que armazenam dados em posi√ß√µes (R Core Team 2023b, cap 2). Os vetores s√£o ditos at√¥micos, pois seus dados s√£o todos do mesmo tipo. Voc√™ pode pensar em um vetor como uma ‚Äúlocal‚Äù onde ser√£o armazenados dados. Os vetores podem ser de um dos 6 tipos abaixo:\n\nTipos de Vetores\n\n\n\n\n\n\n\nTipo\nDescri√ß√£o\nExemplo\n\n\n\n\nlogical\nvalor l√≥gico\nTRUE, FALSE\n\n\ninteger\nn√∫mero inteiro\n1\n\n\ndouble\nn√∫mero com ponto flutuante (real)\n1.5\n\n\ncomplex\nn√∫mero complexo\n1i\n\n\ncharacter\ntexto (strings)\n‚ÄòR √© software livre.‚Äô\n\n\nraw\nbytes"
  },
  {
    "objectID": "r_intro.html#cria√ß√£o-de-objetos",
    "href": "r_intro.html#cria√ß√£o-de-objetos",
    "title": "1¬† Introdu√ß√£o",
    "section": "1.3 Cria√ß√£o de Objetos",
    "text": "1.3 Cria√ß√£o de Objetos\nPara cria√ß√£o de objetos no R s√£o usados os operadores de atribui√ß√£o, <- e =. O operador mais usado √© o <-. Assim para cria√ß√£o de um objeto do tipo vetor, pode ser usado o c√≥digo abaixo, onde o objeto1 receber√° o valor 10.\n\nobjeto1 <- 10\n\nPara cria√ß√£o de vari√°veis do tipo texto, devem ser usadas aspas, simples ou duplas. Aqui o objeto2 foi criado com uso de aspas ao in√≠cio e ao final de texto para que o R trate o valor como character. Caso n√£o sejam colocadas as aspas, o R entender√° o texto informado como o nome de um objeto.\n\nobjeto2 = 'texto' \nobjeto3 <- texto\n\nError in eval(expr, envir, enclos): objeto 'texto' n√£o encontrado\n\n\nVoc√™ pode ver o conte√∫do de um objeto informando seu nome no console seguido de ENTER.\n\nobjeto1\n\n[1] 10\n\nobjeto2\n\n[1] \"texto\""
  },
  {
    "objectID": "r_intro.html#opera√ß√µes-com-objetos",
    "href": "r_intro.html#opera√ß√µes-com-objetos",
    "title": "1¬† Introdu√ß√£o",
    "section": "1.4 Opera√ß√µes com Objetos",
    "text": "1.4 Opera√ß√µes com Objetos\nObjetos podem ser atualizados/alterados, novamente, com o operador <-. No exemplo abaixo vamos criar um vetor de nome objeto3 com o operador :, que cria sequ√™ncias de valores. Em seguida o objeto3 ser√° atualizado recebendo seu pr√≥prio conte√∫do acrescido do valor 10.\n\nobjeto3 <- 1:5\nobjeto3\n\n[1] 1 2 3 4 5\n\nobjeto3 <- objeto3 + 10\nobjeto3\n\n[1] 11 12 13 14 15\n\n\nO vetor objeto3 foi criado com 5 posi√ß√µes, armazenando inicialmente os valores de 1 a 5. Ap√≥s o vetor recebeu atualiza√ß√£o dos valores para 11, 12, 13,14 e 15. NOte que a adi√ß√£o foi efetuada em todo o vetor.\nOs valores dos componentes dos vetores podem ser acessados atrav√©s de seu √≠ndice em combina√ß√£o com o operador de extra√ß√£o [. Em R os √≠ndices iniciam em 1 (em muitas linguagens de programa√ß√£o o primeiro √≠ndice √© 0).\nAssim para receber como retorno o valor da posi√ß√£o 4 do objeto3 usamos:\n\nobjeto3[4] \n\n[1] 14\n\n\nPodemos tamb√©m operar sobre este valor, por exemplo, adicionando 10 ao valor da quarta posicao do objeto3.\n\nobjeto3[4] + 10\n\n[1] 24\n\n\nNote que sem o operador de atribui√ß√£o o valor da posi√ß√£o 4 do objeto3 n√£o √© atualizada dentro do objeto, apenas √© exibida no console. Para atualizar seu valor devemos usar a atribui√ß√£o.\n\nobjeto3\n\n[1] 11 12 13 14 15\n\nobjeto3[4] <- objeto3[4] + 10\nobjeto3\n\n[1] 11 12 13 24 15\n\n\nNeste caso apenas o valor da posi√ß√£o 4 foi alterado.\nA busca por √≠ndices pode ser feita de forma mais elaborada. Por exemplo, para buscar tr√™s valores do vetor que est√£o armazenados de forma cont√≠gua podemos usar:\n\nobjeto3[1:3]\n\n[1] 11 12 13\n\n\nJ√° se for necess√°rio buscar dados de √≠ndices separados podemos usar a fun√ß√£o c (combina√ß√£o), que combina valores para formar um vetor.\n\nobjeto3[c(1,3,5)]\n\n[1] 11 13 15\n\n\nO sinal de menos pode ser combinado com o √≠ndice e isto causar√° a exclus√£o do √≠ndice da busca. Por exemplo, usar o √≠ndice -5 retorna todos os elementos, exceto o quinto.\n\nobjeto3[-5]\n\n[1] 11 12 13 24\n\nobjeto3[c(-2, -4)] # de forma combinada\n\n[1] 11 13 15\n\n\n\n1.4.1 Coer√ß√£o\nQuando vetores recebem dados de um tipo diferente o R tenta fazer uma opera√ß√£o de coer√ß√£o, transformando os valores a fim de ‚Äúatender‚Äù a todos. Nem sempre esta opera√ß√£o √© poss√≠vel e ela muitas vezes altera o vetor original. No exemplo abaixo o valor da posi√ß√£o 1 do vetor ser√° atualizado para receber a letra A. Como o vetor originalmente era do tipo integer, o R far√° a convers√£o dos valores para tipo character. Desta forma opera√ß√µes matem√°ticas n√£o ser√£o mais poss√≠veis sobre este vetor.\n\nobjeto3[1] <- 'A'\nobjeto3\n\n[1] \"A\"  \"12\" \"13\" \"24\" \"15\"\n\nobjeto3 + 10\n\nError in objeto3 + 10: argumento n√£o-num√©rico para operador bin√°rio"
  },
  {
    "objectID": "r_intro.html#usando-fun√ß√µes",
    "href": "r_intro.html#usando-fun√ß√µes",
    "title": "1¬† Introdu√ß√£o",
    "section": "1.5 Usando Fun√ß√µes",
    "text": "1.5 Usando Fun√ß√µes\nO cora√ß√£o da linguag√©m R s√£o suas fun√ß√µes. Atrav√©s delas s√£o feitas as mais diversas opera√ß√µes sobre os objetos. Basicamente fun√ß√µes devem ser usadas atrav√©s de seus nomes e com os argumentos dentro de par√™nteses: funcao(argumento1, argumento2, ‚Ä¶).\nPor exemplo, a fun√ß√£o typeof exige a informa√ß√£o de um argumento (um objeto do R). O R processa esta fun√ß√£o e devolve seu retorno, no caso qual o tipo do objeto1.\n\ntypeof(objeto1)\n\n[1] \"double\"\n\n\nA fun√ß√£o is.vector, por sua vez, testa se um objeto √© um vetor e retorna um valor l√≥gico como resposta do teste, TRUE (verdadeiro) ou FALSE (falso).\n\nis.vector(5)\n\n[1] TRUE\n\n\nO valor armazenado em um objeto pode ser visualizado com a fun√ß√£o print.\n\nprint(objeto1)\n\n[1] 10\n\n\n\n1.5.1 Argumentos de Fun√ß√µes\nAs fun√ß√µes em R podem ter diversos argumentos e muitas vezes estes argumentos possuem valores definidos por padr√£o. Assim caso o usu√°rio n√£o informe nenhum valor para os argumentos da fun√ß√£o esta usar√° os valores previamente definidos em seu c√≥digo.\nImportante notar que os argumento possuem nomes e estes nomes podem ser omitidos na chamada da fun√ß√£o. Voltemos a fun√ß√£o typeof, ela possui apenas um argumento de nome x. Inserindo o argumento na fun√ß√£o de forma expl√≠cita se obt√©m mesmo resultado anterior.\n\ntypeof(x = objeto1)\n\n[1] \"double\"\n\n\nNos casos de omiss√£o do nome dos argumentos, estes receber√£o os valores informados de acordo com a ordem presente no c√≥digo. Por exemplo a fun√ß√£o rep.int retorna os valores indicados no argumento x n (argumento times) vezes.\n\nrep.int(5, 4)\n\n[1] 5 5 5 5\n\nrep.int(x = 5, times = 4)\n\n[1] 5 5 5 5\n\n\nPerceba que os argumentos podem ser informados em ordem diversa, entretanto devem ser atribuidos de forma expl√≠cita. Veja que rep.int(times = 4, x = 5) √© diferente de rep.int(4, 5).\n\nrep.int(times = 4, x = 5)\n\n[1] 5 5 5 5\n\nrep.int(4, 5)\n\n[1] 4 4 4 4 4\n\n\n\n\n\n\n\n\nNota\n\n\n\nAlgumas fun√ß√µes n√£o possuem argumentos e ‚Äúapenas‚Äù executam seu c√≥digo, n√£o exigindo intera√ß√£o de entrada por parte do usu√°rio, como por exemplo as fun√ß√µes Sys.Date() e Sys.time(), que retornam a data e data e hora respectivamente.\n\n\n\n\n1.5.2 Armazenando Retorno\nAt√© aqui as fun√ß√µes foram usadas de forma que seus retornos foram apenas exibidos no console. Para que o valor retornado por uma fun√ß√£o seja armazenado em um objeto se faz o uso do operador de atribui√ß√£o.\n\ntipo_objeto1 <- typeof(objeto1)\nprint(tipo_objeto1)\n\n[1] \"double\"\n\n\nAgora o objeto tipo_objeto1 armazena o valor ‚Äúdouble‚Äù que foi retornado pelo fun√ß√£o typeof. Veja que a fun√ß√£o is.double que testa se o objeto √© double retorna FALSE, pois o objeto tipo_objeto1 recebeu um valor em formato texto. Dentro deste texto est√° contida a palavra double, mas isto n√£o significa que o tipo do vetor tipo_objeto1 passou a ser double. Cuidado para n√£o confundir o tipo do objeto com seu conte√∫do.\n\nis.double(tipo_objeto1)\n\n[1] FALSE\n\ntypeof(tipo_objeto1)\n\n[1] \"character\"\n\nis.character(tipo_objeto1)\n\n[1] TRUE"
  },
  {
    "objectID": "r_intro.html#exibindo-objetos",
    "href": "r_intro.html#exibindo-objetos",
    "title": "1¬† Introdu√ß√£o",
    "section": "1.6 Exibindo Objetos",
    "text": "1.6 Exibindo Objetos\nO R possui a fun√ß√£o ls que exibe os objetos existentes no ambiente. Veja que a fun√ß√£o ls possui valores padr√£o em seus argumentos, assim ela pode ser processada apenas com a digita√ß√£o do c√≥digo ls(). Mais detalhes em Fun√ß√µes.\n\nls()\n\n[1] \"objeto1\"      \"objeto2\"      \"objeto3\"      \"tipo_objeto1\""
  },
  {
    "objectID": "r_intro.html#remo√ß√£o-de-objetos",
    "href": "r_intro.html#remo√ß√£o-de-objetos",
    "title": "1¬† Introdu√ß√£o",
    "section": "1.7 Remo√ß√£o de Objetos",
    "text": "1.7 Remo√ß√£o de Objetos\nObjetos podem ser removidos (exclu√≠dos) com a fun√ß√£o rm.\n\nrm(objeto2)\nls()\n\n[1] \"objeto1\"      \"objeto3\"      \"tipo_objeto1\""
  },
  {
    "objectID": "r_intro.html#iniciando-o-rstudio",
    "href": "r_intro.html#iniciando-o-rstudio",
    "title": "1¬† Introdu√ß√£o",
    "section": "1.8 Iniciando o R‚Ä¶Studio",
    "text": "1.8 Iniciando o R‚Ä¶Studio\nR √© uma linguagem de programa√ß√£o e n√£o est√° focada em oferecer uma interface sofisticada de intera√ß√£o com o usu√°rio. Este papel fica por conta de outras ferramentas, como o RStudio, o IDE mais usado para a linguagem. Na pr√°tica ‚Äúningu√©m‚Äù usa o R puro para desenvolver seus projetos.\nDesta forma usaremos o RStudio como ferramenta de desenvolvimento, pois ela ir√° nos fornecer muitas funcionalidades como preenchimento de c√≥digo (code completion), janelas para instalar pacotes, janelas com arquivos de scripts, navega√ß√£o por pastas, visualiza√ß√£o e exporta√ß√£o de gr√°fico e claro comunica√ß√£o direta com o R.\nAo longo deste livro ser√£o usadas diversas funcionalidades do RStudio. Por√©m o foco ser√° sempre no conte√∫do, pois o detalhamento das principais funcionalidades do RStudio √© tratada em se√ß√£o espec√≠fica.\n\n\n\n\n\nFigura¬†1.5: Tela Inicial do RStudio\n\n\n\n\nNeste cap√≠tulo focaremos no painel Console, que ‚Äúabriga‚Äù o R e no Source, que permite utiliza√ß√£o de scripts.\n\n\n\n\n\nFigura¬†1.6: Aba Console\n\n\n\n\n\n\n\n\n\nFigura¬†1.7: Aba Source\n\n\n\n\n\n\n\n\n\n\nOutros IDE‚Äôs\n\n\n\nAl√©m do RStudio existem outras ferramentas para utiliza√ß√£o em conjunto com R, entre elas: Jupyter, VS Code e RKWard."
  },
  {
    "objectID": "r_intro.html#trabalhando-com-scripts",
    "href": "r_intro.html#trabalhando-com-scripts",
    "title": "1¬† Introdu√ß√£o",
    "section": "1.9 Trabalhando com Scripts",
    "text": "1.9 Trabalhando com Scripts\nScripts s√£o arquivos de texto que recebem c√≥digos e conforme desejo do usu√°rio s√£o enviados ao console para execu√ß√£o. Na pr√°tica usar o console diretamente √© √∫til para pequenas opera√ß√µes. No Rstudio voc√™ pode criar um script em File > New File > R Script. O arquivo de script ser√° aberto no painel Source.\n\n\n\n\n\nFigura¬†1.8: Script - Painel Source\n\n\n\n\nPara executar comandos de um arquivo de script voc√™ pode usar atalhos de teclado (Ctrl + Enter) ou atrav√©s do bot√£o Run no topo superior direito da aba Source. Ambas op√ß√µes executam ou a linha corrente ou a parte do texto selecionada.\n\n\n\n\n\nFigura¬†1.9: Source - Bot√£o Run\n\n\n\n\n\n\n\n\n\nFigura¬†1.10: Script - C√≥digo a Processar\n\n\n\n\n\n\n\n\n\nFigura¬†1.11: Console - Resultado\n\n\n\n\n\n1.9.1 Coment√°rios\nR aceita coment√°rios em seu c√≥digo atrav√©s do caractere sustenido (hashtag), ‚Äô#‚Äô. Coment√°rios s√£o muito importantes para facilitar a leitura do c√≥digo posteriormente. Uma forma interessante de organizar o seu c√≥digo √© criar uma linha de coment√°rio para separa√ß√£o de etapas de processamento. Perceba que as linhas de coment√°rios foram passadas para o console e este n√£o emitiu nenhuma mensagem, tampouco efetuou qualquer opera√ß√£o.\n\n\n\n\n\n\nPorqu√™‚Ä¶\n\n\n\nEm opera√ß√µes mais complexas procure colocar coment√°rios que expliquem os motivos de se executar alguma opera√ß√£o e n√£o o que o c√≥digo est√° fazendo. Foque no ‚Äòporqu√™‚Äô de cada opera√ß√£o e n√£o no ‚Äòo que‚Äô.\n\n\n\n√öltima atualiza√ß√£o: 18/09/2023 - 19:53:24\n\n\n\n\nR Core Team. 2023a. An Introduction to R. R Foundation for Statistical Computing. https://cran.r-project.org/doc/manuals/r-release/R-intro.html.\n\n\n‚Äî‚Äî‚Äî. 2023b. R Language Definition. R Foundation for Statistical Computing. https://cran.r-project.org/doc/manuals/r-release/R-lang.html."
  },
  {
    "objectID": "r_nomes.html#regras",
    "href": "r_nomes.html#regras",
    "title": "2¬† Nomeando Objetos",
    "section": "2.1 Regras",
    "text": "2.1 Regras\nA linguagem R aceita muitas possibilidades para nomea√ß√£o de objetos. Inclusive podem ser criados objetos com espa√ßos em seus nomes e at√© mesmo com caracteres especiais (desde que entre aspas ou crases).\n\nx <- 10\n\n.x <- 10\n\n`nome com espaco` <- 55\n\n'teste 1' <- 2\n\n\n\n\n\n\n\nNomes Significativos\n\n\n\nEscolha nomes intuitivos e que facilitem a identifica√ß√£o do conte√∫do armazenado nos objetos.\n\n\nUm objeto criado atrav√©s do uso de aspas ou crases tem seu conte√∫do acessado quando ‚Äúchamado‚Äù com crases (backticks). Aspas s√£o entendidas como sinaliza√ß√£o para strings e assim n√£o retornam o conte√∫do do objeto e sim a pr√≥pria string informada.\n\n'teste 1' # retorna como string\n\n[1] \"teste 1\"\n\n`teste 1` # Exibe conte√∫do do objeto\n\n[1] 2\n\n\n\n2.1.1 Primeiro Caractere\nExistem algumas regras para iniciar o nome dos objetos. Alguns caracteres ‚Äúespeciais‚Äù n√£o podem ser usados, bem como os n√∫meros.\n\n$x <- 10  \n\nError: <text>:1:1: '$' inesperado\n1: $\n    ^\n\n\n\n55x <- 10 \n\nError: <text>:1:3: unexpected symbol\n1: 55x\n      ^\n\n\nPerceba que n√∫meros podem ser usados nos nomes, desde que o primeiro caractere seja ‚Äòv√°lido‚Äô. Mas o mesmo n√£o ocorre com caracteres ‚Äúespeciais‚Äù.\n\nx55x <- 888\n\nx55x\n\n[1] 888\n\n\n\nx$ <- 10\n\nError: <text>:1:4: unexpected assignment\n1: x$ <-\n       ^\n\n\nUma alternativa se d√° mais uma vez com o uso de aspas ou crases. Com elas √© poss√≠vel ‚Äòburlar‚Äô estas limita√ß√µes.\n\n`teste @!&` <- 123456\n\n`teste @!&`\n\n[1] 123456\n\n'55 teste @!&' <- 10\n\n`55 teste @!&`\n\n[1] 10\n\n\nApesar de poss√≠vel, objetos com nomes mais complicados como os exemplificados acabam tornando a vida do programador um pouco mais dif√≠cil. Em geral, evite caracteres caracteres especiais e espa√ßos nos nomes. Caso algum dado (bases de dados) seja carregado de arquivo externo com este tipo de caracteres, fa√ßa a uniformiza√ß√£o dos nomes o quanto antes.\n\n2.1.1.1 Objetos ‚ÄúOcultos‚Äù\nObjetos podem ser criados com ‚Äú.‚Äù no in√≠cio de seus nomes desde que o segundo carctere seja uma letra. Estes s√£o objetos ‚Äúocultos‚Äù e portanto n√£o aparecem em um comando ls ‚Äúpuro‚Äù, por exemplo. Tampouco s√£o exibidos na aba Environment do RStudio. Para visualiz√°-los atrav√©s da fun√ß√£o ls deve ser usado o par√¢metro all.names = T.\n\nls()\n\n[1] \"55 teste @!&\"    \"nome com espaco\" \"teste @!&\"       \"teste 1\"        \n[5] \"x\"               \"x55x\"           \n\nls(all.names = T)\n\n[1] \".main\"           \".x\"              \"55 teste @!&\"    \"nome com espaco\"\n[5] \"teste @!&\"       \"teste 1\"         \"x\"               \"x55x\"           \n\n\n\n\n\n2.1.2 Case Sensitive\nR √© uma linguagem case sensitive, ou seja, ela diferencia mai√∫sculas de min√∫sculas. Assim um objeto com nome de Teste √© diferente teste, tesTe, TESTE‚Ä¶\n\nteste <- 10\nTeste <- 15\ntesTe <- 20\nTESTE <- 25\n\nls()\n\n [1] \"55 teste @!&\"    \"nome com espaco\" \"teste\"           \"tesTe\"          \n [5] \"Teste\"           \"TESTE\"           \"teste @!&\"       \"teste 1\"        \n [9] \"x\"               \"x55x\"           \n\n\n\n\n\n\n\n\nCampos de Tabelas\n\n\n\nCampos (vari√°veis) de dados tabulados, como planilhas de Excel, seguem as mesmas regras. Este tipo de dado ser√° tratado no cap√≠tulo sobre data frames."
  },
  {
    "objectID": "r_nomes.html#resumo",
    "href": "r_nomes.html#resumo",
    "title": "2¬† Nomeando Objetos",
    "section": "2.2 Resumo",
    "text": "2.2 Resumo\n\nResumo das Regras para Nomes\n\n\n\n\n\n\n\n\nCaracteres\nRegra\nExce√ß√£o\nExemplo\n\n\n\n\nLetras\nPermitido\n\nobjeto\nvariavel\n\n\nN√∫meros\nPermitido, ap√≥s primeiro caractere\nIniciado com ‚Äò.‚Äô\nobjeto1\n1objeto\n.1objeto\n\n\nEspa√ßos\nN√£o permitido\nPermitido com uso de aspas ou crases\nteste 1\n‚Äòteste 2‚Äô\n‚Äò2 teste‚Äô\n\n\nCaracteres especiais\nN√£o permitido\nPermitido com uso de aspas ou crases\n#teste\n‚Äò# teste‚Äô\n‚Äòt #$$%‚Äô\n\n\nPonto ‚Äò.‚Äô\nUso livre inclusive no in√≠cio\n\nobjeto.2\n.objeto.2"
  },
  {
    "objectID": "r_nomes.html#conven√ß√µes",
    "href": "r_nomes.html#conven√ß√µes",
    "title": "2¬† Nomeando Objetos",
    "section": "2.3 Conven√ß√µes",
    "text": "2.3 Conven√ß√µes\nConforme o seu c√≥digo em R (e de outra linguagem qualquer) for crescendo voc√™ perceber√° rapidamente a necessidade de identificar de forma intuitiva os objetos criados. Assim, √© muito interessante a utiliza√ß√£o de alguma conven√ß√£o para facilitar sua vida. Existem diversas delas, como camelCase, snake_case, SCREAMING_SNAKE_CASE, PascalCase, etc.\n\n# camelCase\nobjetoTeste <- 'Teste camelCase'\n\n# snake_case\nobjeto_teste <- 'Teste snake_case'\n\nUm bom guia √© o The tidyverse style guide. Tenha sempre em mente que sue c√≥digo deve ser lido com facilidade no futuro e muitas vezes por outros usu√°rios.\nNeste material os nomes de objetos e derivados seguir√£o a tabela abaixo. Estas defini√ß√µes foram escolhidas a fim de uniformizar o conte√∫do apresentado e se baseiam em experi√™ncia de uso e no Tidyverse Style Guide. Mais detalhes em Conven√ß√µes.\n\n\n\n\n\n\n\n\nTipo Objeto\nConven√ß√£o\nExemplo\n\n\n\n\nData.frame, tibble ou data.table\nsnake_case iniciado por df (data frame)\ndf_clientes\n\n\nVari√°veis de datasets\nSCREAMING_SNAKE_CASE\nNOME_CLIENTE\n\n\nFun√ß√µes\ncamelCase iniciado por fn, sendo a primeira palavra ap√≥s fn um verbo\nfnBuscarClientes\n\n\nDemais (vetores, listas, etc.)\nsnake_case\nnomes_cidades\n\n\n\n\n\n\n\n\n\nDica\n\n\n\nEvite usar ‚Äú.‚Äù em nome de objetos, pois atrav√©s do ponto o R acessa fun√ß√µes (m√©todos) de acordo com a classe do objeto. Usar o ponto pode causar certa confus√£o. Mais detalhes Fun√ß√µes.\n\n\n\nGrolemund (2014)\nR Core Team (2023)\nWikipedia (2023)\n√öltima atualiza√ß√£o: 18/09/2023 - 19:55:08\n\n\n\n\nGrolemund, Garrett. 2014. Hands-On Programming with R. O‚ÄôReilly. https://rstudio-education.github.io/hopr/.\n\n\nR Core Team. 2023. An Introduction to R. R Foundation for Statistical Computing. https://cran.r-project.org/doc/manuals/r-release/R-intro.html.\n\n\nWikipedia, the free encyclopedia. 2023. \"Naming convention (programming)\". 2023. https://en.wikipedia.org/wiki/Naming_convention_(programming)."
  },
  {
    "objectID": "r_vetores.html#introdu√ß√£o",
    "href": "r_vetores.html#introdu√ß√£o",
    "title": "3¬† Vetores",
    "section": "3.1 Introdu√ß√£o",
    "text": "3.1 Introdu√ß√£o\nVetores s√£o o tipo de estrutura de dados mais b√°sica no R. Os vetores podem ser criados de diversas formas. Ser√£o criados dois vetores uma com a fun√ß√£o seq, que cria uma sequ√™ncia de acordo com os par√¢metros informados, e com o operador :.\n\nvetor_1 <- seq(1, 10)\nvetor_2 <- 1:10\n\nPodemos testar se dois objetos s√£o id√™nticos com a fun√ß√£o identical.\n\nidentical(vetor_1, vetor_2)\n\n[1] TRUE\n\n\nUma outra fun√ß√£o muito √∫til para avaliar um objeto √© a fun√ß√£o str, que exibe a estrutura do objeto.\n\nstr(vetor_1)\n\n int [1:10] 1 2 3 4 5 6 7 8 9 10\n\nstr(vetor_2)\n\n int [1:10] 1 2 3 4 5 6 7 8 9 10"
  },
  {
    "objectID": "r_vetores.html#selecionando-elementos",
    "href": "r_vetores.html#selecionando-elementos",
    "title": "3¬† Vetores",
    "section": "3.2 Selecionando Elementos",
    "text": "3.2 Selecionando Elementos\nPodemos selecionar elementos de vetores com os operadores [ e [[. A diferen√ßa principal √© que o primeiro pode selecionar diversos elementos, enquanto o segundo apenas um.\n\nvetor_1[5]\n\n[1] 5\n\nvetor_1[[5]]\n\n[1] 5\n\nvetor_2[5:6]\n\n[1] 5 6\n\nvetor_2[[5:6]]\n\nError in vetor_2[[5:6]]: attempt to select more than one element in vectorIndex"
  },
  {
    "objectID": "r_vetores.html#nomeando-componentes",
    "href": "r_vetores.html#nomeando-componentes",
    "title": "3¬† Vetores",
    "section": "3.3 Nomeando Componentes",
    "text": "3.3 Nomeando Componentes\nOs componentes de vetores podem ser nomeados com a fun√ß√£o names e posteriormente acessados pelo seu nome.\n\nnames(vetor_1) <- c('componente_1',\n                    'componente_2')\n\nvetor_1['componente_1']\n\ncomponente_1 \n           1 \n\n\nUsando a fun√ß√£o str podemos ver que agora o vetor possui atributos, neste caso nomes. Como foram inseridos apenas nomes para os primeiros dois elementos os demais possuem valor NA.\n\nstr(vetor_1)\n\n Named int [1:10] 1 2 3 4 5 6 7 8 9 10\n - attr(*, \"names\")= chr [1:10] \"componente_1\" \"componente_2\" NA NA ...\n\nattributes(vetor_1)\n\n$names\n [1] \"componente_1\" \"componente_2\" NA             NA             NA            \n [6] NA             NA             NA             NA             NA"
  },
  {
    "objectID": "r_vetores.html#testando",
    "href": "r_vetores.html#testando",
    "title": "3¬† Vetores",
    "section": "3.4 Testando",
    "text": "3.4 Testando\nPodemos testar se um objeto √© um vetor com a fun√ß√£o is.vector.\n\nis.vector(vetor_1)\n\n[1] TRUE\n\nis.vector(1)\n\n[1] TRUE\n\nis.vector('A')\n\n[1] TRUE\n\n\n\nR Core Team (2023)\n√öltima atualiza√ß√£o: 16/09/2023 - 14:26:54\n\n\n\n\nR Core Team. 2023. An Introduction to R. R Foundation for Statistical Computing. https://cran.r-project.org/doc/manuals/r-release/R-intro.html."
  },
  {
    "objectID": "r_tipos_dados.html#l√≥gico-logical",
    "href": "r_tipos_dados.html#l√≥gico-logical",
    "title": "4¬† Tipos de Dados",
    "section": "4.1 L√≥gico (Logical)",
    "text": "4.1 L√≥gico (Logical)\nDados do tipo l√≥gico podem assumir basicamente dois valores, verdadeiro (TRUE) e falso (FALSE). Estes valores podem ser abreviados por T e F, respectivamente.\n\nis.logical(TRUE)\n\n[1] TRUE\n\nis.logical(FALSE)\n\n[1] TRUE\n\ntypeof(T)\n\n[1] \"logical\"\n\ntypeof(F)\n\n[1] \"logical\"\n\nis.logical(1)\n\n[1] FALSE\n\nis.logical(0)\n\n[1] FALSE\n\n\nTestes l√≥gicos retornam valores l√≥gicos.\n\nis.logical(5 > 5)\n\n[1] TRUE\n\ntypeof(10 < 9)\n\n[1] \"logical\"\n\n\nTRUE e FALSE s√£o palavras reservadas, portanto n√£o podem ser usadas como objetos.\n\nTRUE <- 10\n\nError in TRUE <- 10: lado esquerdo da atribui√ß√£o inv√°lida (do_set)\n\n\n\n4.1.1 Valores Faltantes (NA)\nEm R a constante NA (Not Available) √© usada para expressar valores faltantes. O NA √© do tipo l√≥gico, mas pode ser atribu√≠do a vetores de outros tipos (exceto raw) atrav√©s de coer√ß√£o.\n\ntypeof(NA)\n\n[1] \"logical\"\n\nis.na(NA)\n\n[1] TRUE\n\nvetor_1 <- c(1:5, NA, 6:10)\nvetor_1\n\n [1]  1  2  3  4  5 NA  6  7  8  9 10\n\ntypeof(vetor_1)\n\n[1] \"integer\"\n\n\nOs valores faltantes s√£o muito importantes na an√°lise de dados, pois podem influenciar c√°lculos e transforma√ß√µes. At√© mesmo opera√ß√µes aritm√©ticas b√°sicas s√£o influenciadas pelo valores faltantes.\n\n1 + 5 + NA\n\n[1] NA\n\n\nFun√ß√µes tamb√©m s√£o influenciadas pela presen√ßa dos dados faltantes. A fun√ß√£o max, por exemplo, que retorna o maior valor dentre os informados, retorna NA se este estiver presente.\n\nmax(vetor_1)\n\n[1] NA\n\n\n\n4.1.1.1 Tratando Dados Faltantes\nR oferece algumas fun√ß√µes para tratameto de dados faltantes. Abaixo exemplo de uso da fun√ß√£o na.omit, que devolve os elementos n√£o NA. Caso o objeto n√£o contenha valores faltantes, ele ser√° ‚Äúdevolvido‚Äù de forma integral.\n\nc(1, NA, 3) |> na.omit()\n\n[1] 1 3\nattr(,\"na.action\")\n[1] 2\nattr(,\"class\")\n[1] \"omit\"\n\n\nMuitas fun√ß√µes oferecem o argumento na.rm para remo√ß√£o dos valores faltantes, exemplos: sum, max, min, prod.\n\nsum(c(1, 2, NA), na.rm = T)\n\n[1] 3\n\nprod(c(1, 2, NA), na.rm = T)\n\n[1] 2"
  },
  {
    "objectID": "r_tipos_dados.html#inteiros-integer",
    "href": "r_tipos_dados.html#inteiros-integer",
    "title": "4¬† Tipos de Dados",
    "section": "4.2 Inteiros (Integer)",
    "text": "4.2 Inteiros (Integer)\nN√∫meros inteiros s√£o do tipo integer e devem ser criados com a letra L ao seu lado. Sem este indicador, por padr√£o, o R entende o n√∫mero como do tipo double.\n\ntypeof(1L)\n\n[1] \"integer\"\n\ntypeof(1)\n\n[1] \"double\"\n\n\nPara testar se um n√∫mero √© do tipo inteiro pode-se utiliazr a fun√ß√£o is.integer.\n\nis.integer(1)\n\n[1] FALSE\n\n\nPara transformar um valor para inteiro usa-se a fun√ß√£o as.integer.\n\nis.integer(as.integer(1))\n\n[1] TRUE\n\nas.integer(1.99)\n\n[1] 1"
  },
  {
    "objectID": "r_tipos_dados.html#ponto-flutuante-double",
    "href": "r_tipos_dados.html#ponto-flutuante-double",
    "title": "4¬† Tipos de Dados",
    "section": "4.3 Ponto Flutuante (Double)",
    "text": "4.3 Ponto Flutuante (Double)\nDe forma grosseira, doubles s√£o valores num√©ricos com decimais.\n\nis.double(1)\n\n[1] TRUE\n\n\n\n4.3.1 Not a Number (NaN)\nValores NaN (‚Äòn√£o um n√∫mero‚Äô) s√£o valores de tipo double. Valores NaN impactam opera√ß√µes l√≥gicas e matem√°ticas.\n\ntypeof(NaN)\n\n[1] \"double\"\n\nNaN > 10\n\n[1] NA\n\nNaN * 10\n\n[1] NaN\n\n10/NaN\n\n[1] NaN\n\n5 + NaN\n\n[1] NaN\n\n\n\n\n4.3.2 Inf e -Inf\nNo R os valores Inf e -Inf representam infinito e infinito negativo, respectivamente.\nEstes valores impactam c√°lculos.\n\nis.infinite(Inf)\n\n[1] TRUE\n\n5 + Inf\n\n[1] Inf\n\nInf + Inf\n\n[1] Inf\n\n-Inf * -1 \n\n[1] Inf\n\nInf - Inf\n\n[1] NaN\n\n\nMas opera√ß√µes l√≥gicas seguem o ‚Äòsenso comum‚Äô.\n\nInf > 10\n\n[1] TRUE\n\nInf > -Inf\n\n[1] TRUE\n\nInf == Inf\n\n[1] TRUE\n\n\nValores infinitos podem ser gerados se muito grandes ou por valores divididos por zeros.\n\n10^308\n\n[1] 1e+308\n\n10^309\n\n[1] Inf\n\n10/0\n\n[1] Inf\n\n-10/0\n\n[1] -Inf\n\n\nMas veja que zero dividido por zero √© NaN.\n\n0/0\n\n[1] NaN\n\n0/Inf\n\n[1] 0"
  },
  {
    "objectID": "r_tipos_dados.html#fatores-factor",
    "href": "r_tipos_dados.html#fatores-factor",
    "title": "4¬† Tipos de Dados",
    "section": "4.4 Fatores (Factor)",
    "text": "4.4 Fatores (Factor)\n\n√öltima atualiza√ß√£o: 16/10/2023 - 19:09:54"
  },
  {
    "objectID": "r_ambientes.html#global-env",
    "href": "r_ambientes.html#global-env",
    "title": "5¬† Ambientes",
    "section": "5.1 Global Env",
    "text": "5.1 Global Env\nO Global Env √© o ambiente ‚Äúatual‚Äù do usu√°rio. √â nele que ficam armazenados por padr√£o os objetos e as fun√ß√µes criadas pelos usu√°rios por exemplo. Ele pode ser ‚Äúvisualizado‚Äù com os comandos abaixo:\n\nglobalenv()\n\n<environment: R_GlobalEnv>\n\n.GlobalEnv\n\n<environment: R_GlobalEnv>\n\n\nOs objetos presentes no ambiente desejado podem ser visualizados com a fun√ß√£o ls.\n\nvariavel <- 5\nls(globalenv())\n\n[1] \"variavel\"\n\nls()\n\n[1] \"variavel\""
  },
  {
    "objectID": "r_ambientes.html#ambiente-de-pacotes",
    "href": "r_ambientes.html#ambiente-de-pacotes",
    "title": "5¬† Ambientes",
    "section": "5.2 Ambiente de Pacotes",
    "text": "5.2 Ambiente de Pacotes\nOs pacotes tamb√©m possuem ambientes e podemos listar seu ‚Äúconte√∫do‚Äù com a fun√ß√£o ls. Abaixo usando ls para mostrar os 10 primeiros elementos presentes no ambiente do pacote data.table.\n\nlibrary(data.table)\nas.environment(\"package:data.table\")\n\n<environment: package:data.table>\nattr(,\"name\")\n[1] \"package:data.table\"\nattr(,\"path\")\n[1] \"C:/Users/luisg/AppData/Local/R/win-library/4.3/data.table\"\n\nls(as.environment('package:data.table'))[1:10]\n\n [1] \"%between%\"     \"%chin%\"        \"%flike%\"       \"%ilike%\"      \n [5] \"%inrange%\"     \"%like%\"        \":=\"            \"address\"      \n [9] \"alloc.col\"     \"as.data.table\""
  },
  {
    "objectID": "r_ambientes.html#ambientes-pai",
    "href": "r_ambientes.html#ambientes-pai",
    "title": "5¬† Ambientes",
    "section": "5.3 Ambientes ‚ÄúPai‚Äù",
    "text": "5.3 Ambientes ‚ÄúPai‚Äù\nCada ambiente possui um ambiente de n√≠vel superior associado, com exce√ß√£o do R_EmptyEnv.\n\n# Ambiente superior ao GlobalEnv\nparent.env(.GlobalEnv)\n\n<environment: package:data.table>\nattr(,\"name\")\n[1] \"package:data.table\"\nattr(,\"path\")\n[1] \"C:/Users/luisg/AppData/Local/R/win-library/4.3/data.table\"\n\n# Ambiente superior ao do apcote stats e base\nparent.env(as.environment(\"package:stats\"))\n\n<environment: package:graphics>\nattr(,\"name\")\n[1] \"package:graphics\"\nattr(,\"path\")\n[1] \"C:/Program Files/R/R-4.3.0/library/graphics\"\n\nparent.env(as.environment(\"package:base\"))\n\n<environment: R_EmptyEnv>"
  },
  {
    "objectID": "r_ambientes.html#criando-ambientes",
    "href": "r_ambientes.html#criando-ambientes",
    "title": "5¬† Ambientes",
    "section": "5.4 Criando Ambientes",
    "text": "5.4 Criando Ambientes\nEm R √© poss√≠vel que se fa√ßa a cria√ß√£o de novos ambientes.\n\namb1 <- new.env()\n\namb1\n\n<environment: 0x000001ed8041c8e8>\n\nparent.env(amb1)\n\n<environment: R_GlobalEnv>\n\n\nObjetos criados dentro de um ambiente podem ser acessados atrav√©s do operador $ ap√≥s o nome do ambiente. Tamb√©m √© poss√≠vel utilizar a fun√ß√£o ls com o nome do ambiente desejado para que sejam listados seus objetos.\n\n# Objeto x do amb1\namb1$x <- 10\namb1$y <- 99\n\n# Objeto x do GlobalEnv\nx <- 15\n\nx\n\n[1] 15\n\namb1$x\n\n[1] 10\n\nls(amb1)\n\n[1] \"x\" \"y\"\n\namb1$x * amb1$y\n\n[1] 990\n\n\n\nGrolemund (2014)\nDowle e Srinivasan (2023)\nMastropietro (2019)\n√öltima atualiza√ß√£o: 27/08/2023 - 23:43:16\n\n\n\n\nDowle, Matt, e Arun Srinivasan. 2023. data.table: Extension of ‚Äòdata.frame‚Äò.\n\n\nGrolemund, Garrett. 2014. Hands-On Programming with R. O‚ÄôReilly. https://rstudio-education.github.io/hopr/.\n\n\nMastropietro, Daniel. 2019. \"Getting an environment‚Äôs name in R: the envnames package\". 2019. https://www.r-bloggers.com/2019/05/getting-an-environments-name-in-r-the-envnames-package."
  },
  {
    "objectID": "r_operacoes_logicas.html#operadores-relacionais",
    "href": "r_operacoes_logicas.html#operadores-relacionais",
    "title": "6¬† Opera√ß√µes L√≥gicas",
    "section": "6.1 Operadores Relacionais",
    "text": "6.1 Operadores Relacionais\n\n\n\nOperador\nFun√ß√£o\n\n\n\n\n>\nMaior que\n\n\n<\nMenor que\n\n\n>=\nMaior ou igual a\n\n\n<=\nMenor ou igual a\n\n\n==\nIgual a\n\n\n!=\nDiferente de\n\n\n\n\n5 > 6\n\n[1] FALSE\n\n5 <= 6\n\n[1] TRUE\n\n5 == 6\n\n[1] FALSE\n\n5 != 6\n\n[1] TRUE"
  },
  {
    "objectID": "r_operacoes_logicas.html#operadores-l√≥gicos",
    "href": "r_operacoes_logicas.html#operadores-l√≥gicos",
    "title": "6¬† Opera√ß√µes L√≥gicas",
    "section": "6.2 Operadores L√≥gicos",
    "text": "6.2 Operadores L√≥gicos\n\n\n\nOperador\nFun√ß√£o\n\n\n\n\n!\nNega√ß√£o\n\n\n&\nE\n\n\n|\nOu\n\n\nxor\nOu exclusivo\n\n\nisTRUE\nTesta se verdadeiro\n\n\nisFALSE\nTesta se falso\n\n\n\n\n!FALSE\n\n[1] TRUE\n\n!TRUE\n\n[1] FALSE\n\n5 > 6\n\n[1] FALSE\n\n!5 > 6\n\n[1] TRUE\n\nisTRUE(5 > 6)\n\n[1] FALSE\n\nisFALSE(5 > 6)\n\n[1] TRUE\n\n\n\n6.2.1 Ou Exclusivo (Xor)\nO operador xor fornece sa√≠da verdadeira quando apenas um dos valores for verdadeiro.\n\n# Falso XOR Falso = Falso\nxor(5 > 6, 6 > 9)\n\n[1] FALSE\n\n# Verdadeiro XOR Verdadeiro = Falso\nxor(5 > 4, 6 > 5)\n\n[1] FALSE\n\n# Verdadeiro XOR Falso = Verdadeiro\nxor(5 > 4, 6 > 9)\n\n[1] TRUE\n\n# Falso XOR Verdadeiro = Falso\nxor(5 > 6, 6 > 5)\n\n[1] TRUE"
  },
  {
    "objectID": "r_operacoes_logicas.html#preced√™ncia",
    "href": "r_operacoes_logicas.html#preced√™ncia",
    "title": "6¬† Opera√ß√µes L√≥gicas",
    "section": "6.3 Preced√™ncia",
    "text": "6.3 Preced√™ncia\nNa utiliza√ß√£o de testes l√≥gicos √© importante observar a ordem (preced√™ncia) de aplica√ß√£o dos operadores. O uso de par√™nteses altera a o escopo de aplica√ß√£o dos operadores.\n\nPreced√™ncia de Operadores\n\n\nOrdem\nOperador\n\n\n\n\n1\n<, >, <=, >=, ==, !=\n\n\n2\n!\n\n\n3\n&\n\n\n4\n|\n\n\n\nAbaixo alguns testes.\n\n# Falso E Falso = Falso\n5 > 6 & 4 > 5\n\n[1] FALSE\n\n# Verdadeiro E Verdadeiro = Verdadeiro\n!5 > 6 & !4 > 5\n\n[1] TRUE\n\n# Verdadeiro E Falso = Falso\n!5 > 6 & 4 > 5\n\n[1] FALSE\n\n# Nega√ß√£o de(Falso E Falso) = Verdadeiro\n!(5 > 6 & 4 > 5)\n\n[1] TRUE\n\n\n\n# Falso OU Falso = Falso\n5 > 6 | 4 > 5\n\n[1] FALSE\n\n# Verdadeiro OU Verdadeiro = Verdadeiro\n!5 > 6 | !4 > 5\n\n[1] TRUE\n\n# Verdadeiro OU Falso = Verdadeiro\n!5 > 6 | 4 > 5\n\n[1] TRUE\n\n# Nega√ß√£o de (Falso OU Falso) = Verdadeiro\n!(5 > 6 | 4 > 5)\n\n[1] TRUE"
  },
  {
    "objectID": "r_operacoes_logicas.html#all-e-any",
    "href": "r_operacoes_logicas.html#all-e-any",
    "title": "6¬† Opera√ß√µes L√≥gicas",
    "section": "6.4 All e any",
    "text": "6.4 All e any\nAs fun√ß√µes all e any testam se vetores possuem valores TRUE, todos ou pelo menos 1, respectivamente.\n\nvetor_logico <- c(T, T, T)\n\nall(vetor_logico)\n\n[1] TRUE\n\nany(vetor_logico)\n\n[1] TRUE\n\n\nApenas valores FALSE:\n\nvetor_logico <- c(F, F, F)\n\nall(vetor_logico)\n\n[1] FALSE\n\nany(vetor_logico)\n\n[1] FALSE\n\n\nVetor com apenas 1 valor TRUE.\n\nvetor_logico <- c(T, F, F, F)\nall(vetor_logico)\n\n[1] FALSE\n\nany(vetor_logico)\n\n[1] TRUE\n\n\nVetor com todos os valores falsos (FALSE).\n\nvetor_logico <- c(F, F, F, F)\nall(vetor_logico)\n\n[1] FALSE\n\nany(vetor_logico)\n\n[1] FALSE\n\n\nNote que a presen√ßa de valores NA altera completamente o retorno da fun√ß√£o all, mas n√£o da fun√ß√£o any.\n\nvetor_logico <- c(T, F, T, NA)\nall(vetor_logico)\n\n[1] FALSE\n\nany(vetor_logico)\n\n[1] TRUE\n\n\nIsto ocorre, pois a fun√ß√£o any s√≥ retorna NA se existirem valores NA e FALSE no vetor.\n\nvetor_logico <- c(F, NA, NA, NA)\nany(vetor_logico)\n\n[1] NA\n\nvetor_logico <- c(NA, NA , NA, NA)\nany(vetor_logico)\n\n[1] NA\n\n\nAmbas as fun√ß√µes aceitam o par√¢metro na.rm, que remove no valores NA antes de fazer a avali√ß√£o.\n\nvetor_logico <- c(T, T, T, NA)\nall(vetor_logico, na.rm = T)\n\n[1] TRUE\n\nany(vetor_logico, na.rm = T)\n\n[1] TRUE\n\n\nCom presen√ßa de valores falsos;\n\nvetor_logico <- c(T, F, F, NA)\nall(vetor_logico, na.rm = T)\n\n[1] FALSE\n\nany(vetor_logico, na.rm = T)\n\n[1] TRUE\n\n\nEquivalente a:\n\nvetor_logico <- c(T, F, F)\nall(vetor_logico, na.rm = T)\n\n[1] FALSE\n\nany(vetor_logico, na.rm = T)\n\n[1] TRUE"
  },
  {
    "objectID": "r_operacoes_logicas.html#operador-in",
    "href": "r_operacoes_logicas.html#operador-in",
    "title": "6¬† Opera√ß√µes L√≥gicas",
    "section": "6.5 Operador %in%",
    "text": "6.5 Operador %in%\nO operador bin√°rio %in% efetua teste de presen√ßa do objeto da esquerda (left hand side) no da direita (right hand side).\n\nx <- c(1, 2, 3, 4)\ny <- c(3, 4, 5)\n\nx %in% y\n\n[1] FALSE FALSE  TRUE  TRUE\n\ny %in% x\n\n[1]  TRUE  TRUE FALSE\n\n\nVeja que o retorno √© dado pelo tamanho do objeto da esquerda. Assim x %in% y √© uma opera√ß√£o completamente diferente de y %in% x.\n\nR Core Team (2023)\n√öltima atualiza√ß√£o: 28/08/2023 - 21:31:07\n\n\n\n\nR Core Team. 2023. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/."
  },
  {
    "objectID": "r_listas.html#introdu√ß√£o",
    "href": "r_listas.html#introdu√ß√£o",
    "title": "7¬† Listas",
    "section": "7.1 Introdu√ß√£o",
    "text": "7.1 Introdu√ß√£o\nListas s√£o objetos que armazenam outros objetos, podendo ser de variados tipos."
  },
  {
    "objectID": "r_listas.html#criando-listas",
    "href": "r_listas.html#criando-listas",
    "title": "7¬† Listas",
    "section": "7.2 Criando Listas",
    "text": "7.2 Criando Listas\nAbaixo um exemplo de cria√ß√£o de lista atrav√©s da fun√ß√£o list. Os seus componentes ser√£o um data frame, um vetor de n√∫meros de 1 at√© 10 e um vetor com as letras do alfabeto.\n\nlista_1 <- list(mtcars, 1:10, letters)"
  },
  {
    "objectID": "r_listas.html#acessando-componentes",
    "href": "r_listas.html#acessando-componentes",
    "title": "7¬† Listas",
    "section": "7.3 Acessando Componentes",
    "text": "7.3 Acessando Componentes\nPara acessar os elementos das listas pode-se usar o operador [[‚Ä¶]].\n\nclass(lista_1[[1]])\n\n[1] \"data.frame\"\n\n\nDeve-se tomar cuidado ao usar o operador [], pois este operador √© gen√©rico e n√£o retorna o componente 1 da lista em sua ‚Äúforma‚Äù original e sim de uma lista contendo o objeto da lista original. Desta forma, n√£o √© poss√≠vel fazer extra√ß√£o de objetos do vetor retornado.\n\nclass(lista_1[1])\n\n[1] \"list\"\n\nlista_1[2][5]\n\n[[1]]\nNULL\n\n\nUsando [[...]] o objeto retornado mant√©m sua forma original e a extra√ß√£o ocorre normalmente.\n\nclass(lista_1[[2]])\n\n[1] \"integer\"\n\nlista_1[[2]][5]\n\n[1] 5"
  },
  {
    "objectID": "r_listas.html#nomeando-componentes",
    "href": "r_listas.html#nomeando-componentes",
    "title": "7¬† Listas",
    "section": "7.4 Nomeando Componentes",
    "text": "7.4 Nomeando Componentes\nOs componentes das listas podem ser nomeados com a fun√ß√£o names.\n\nnames(lista_1) <- c('df_mtcars', 'vetor', 'letras')\nlista_1$letras\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\nidentical(lista_1$letras, lista_1[[3]])\n\n[1] TRUE\n\nidentical(lista_1$letras, lista_1[['letras']])\n\n[1] TRUE\n\n\n\n7.4.1 Nomes Abreviados\nPara acessar componentes de listas nomeadas √© poss√≠vel informar seus nomes de forma abreviada.\n\nlista_1$le\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\n#equivalente a \nlista_1$letras\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\n\nVeja que a abrevia√ß√£o deve identificar de forma exclusiva os componentes, caso contr√°rio o valor retornado √© NULL. A lista_3 possui dois componentes que come√ßam com ‚Äòle‚Äô e assim n√£o √© poss√≠vel fazer a sele√ß√£o.\n\nlista_3 <- list(letras = letters[1:10], letras_maiusculas = LETTERS[1:10])\n\nlista_3$le\n\nNULL\n\n\n\nR Core Team (2023)\n√öltima atualiza√ß√£o: 29/08/2023 - 20:37:02\n\n\n\n\nR Core Team. 2023. An Introduction to R. R Foundation for Statistical Computing. https://cran.r-project.org/doc/manuals/r-release/R-intro.html."
  },
  {
    "objectID": "r_data_frames.html#o-que-s√£o-data-frames",
    "href": "r_data_frames.html#o-que-s√£o-data-frames",
    "title": "8¬† Data Frames",
    "section": "8.1 O que s√£o data frames ?",
    "text": "8.1 O que s√£o data frames ?\nConforme o R Core Team (2023), data frame √© a estrutura que imita de forma mais pr√≥xima um dataset do SAS ou SPSS. De forma resumida um data frame √© uma estrutura tabular com colunas (vari√°veis, atributos, etc) e linhas (registros, casos, observa√ß√µes, inst√¢ncias, etc). Diferente de uma matriz um data frame pode ter diferentes tipos de dados em suas colunas.\nUm data frame possui todas as colunas com o mesmo tamanho (quantidade de regitros). A classe de um objeto data frame possui o nome data.frame. Abaixo pode ser visualizada a classe do data frame iris (muito usado em exemplos em Ci√™ncia de Dados) e tamb√©m as primeiras linhas com o comando head.\n\nclass(iris)\n\n[1] \"data.frame\"\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\nUm data frame √© na verdade uma lista, assim as opera√ß√µes efetuadas em listas possuem equival√™ncia em data frames.\n\ntypeof(iris)\n\n[1] \"list\"\n\n\n\n8.1.1 Criando Data Frames\nObjetos da classe data.frame podem ser criados com a fun√ß√£o data.frame.\nAqui ser√£o usadas as conven√ß√µes de nomes conforme cap√≠tulos Nomeando Objetos e Conven√ß√µes.\n\ndf_exemplo <- data.frame(\n  VAR_A = c(1:5),\n  VAR_B = c(101:105)\n)\ndf_exemplo\n\n  VAR_A VAR_B\n1     1   101\n2     2   102\n3     3   103\n4     4   104\n5     5   105\n\n\n\n\n8.1.2 Aplicar conven√ß√µes de nomes\nPara continuar os pr√≥ximos t√≥picos vamos trabalhar com um data frame (df_iris) criado a partir do data frame iris. Faremos ajustes nos nomes deste data frame.\n\n# criar data frame df_iris\ndf_iris <- iris\n# mudar nomes para maiusculas\nnames(df_iris) <- toupper(names(df_iris))\n# substituir '.' por '_'\nnames(df_iris) <- gsub(names(df_iris), pattern = \"\\\\.\", replacement = \"_\")  \n\nclass(df_iris)\n\n[1] \"data.frame\"\n\nhead(df_iris)\n\n  SEPAL_LENGTH SEPAL_WIDTH PETAL_LENGTH PETAL_WIDTH SPECIES\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa"
  },
  {
    "objectID": "r_data_frames.html#atributos",
    "href": "r_data_frames.html#atributos",
    "title": "8¬† Data Frames",
    "section": "8.2 Atributos",
    "text": "8.2 Atributos\nOs atributos ‚Äúpadr√£o‚Äù de um data frame s√£o: names, class e row.names. √â poss√≠vel acess√°-los com a fun√ß√£o attributes. O atributo names tamb√©m pode ser obtido com a fun√ß√£o names.\n\nattributes(df_iris)\n\n$names\n[1] \"SEPAL_LENGTH\" \"SEPAL_WIDTH\"  \"PETAL_LENGTH\" \"PETAL_WIDTH\"  \"SPECIES\"     \n\n$class\n[1] \"data.frame\"\n\n$row.names\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108\n[109] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126\n[127] 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144\n[145] 145 146 147 148 149 150\n\nnames(df_iris)\n\n[1] \"SEPAL_LENGTH\" \"SEPAL_WIDTH\"  \"PETAL_LENGTH\" \"PETAL_WIDTH\"  \"SPECIES\""
  },
  {
    "objectID": "r_data_frames.html#dimens√µes",
    "href": "r_data_frames.html#dimens√µes",
    "title": "8¬† Data Frames",
    "section": "8.3 Dimens√µes",
    "text": "8.3 Dimens√µes\nA fun√ß√£o dim retorna as dimens√µes de um data frame (linhas e colunas). Estes dados tamb√©m podem ser obtidos com as fun√ß√µes nrow e ncol.\n\ndim(df_iris)\n\n[1] 150   5\n\nnrow(df_iris)\n\n[1] 150\n\nncol(df_iris)\n\n[1] 5"
  },
  {
    "objectID": "r_data_frames.html#acessando-dados",
    "href": "r_data_frames.html#acessando-dados",
    "title": "8¬† Data Frames",
    "section": "8.4 Acessando Dados",
    "text": "8.4 Acessando Dados\n\n8.4.1 √çndices\nComo a estrutura de um data frame √© organizada em linhas e colunas, podemos acessar os dados utilizando colchetes ([ ]): base[linha, coluna]. Podem ser usados intervalos de √≠ndices com o operador :.\n\n# Acessar primeira linha e segunda coluna (Sepal.Width)\ndf_iris[1, 2]\n\n[1] 3.5\n\n# Acessar linhas 1 at√© 3 e a segunda coluna\ndf_iris[1:3, 2]\n\n[1] 3.5 3.0 3.2\n\n\nApesar de ser poss√≠vel, utilizar o √≠ndice faz com que a refer√™ncia seja relativa, ou seja, a vari√°vel ‚Äò1‚Äô pode mudar caso o data frame seja editado. Por exemplo, caso em algum momento anterior a vari√°vel PETAL_LENGTH tenha sido exclu√≠da, uma nova vari√°vel assumir√° o √≠ndice 1. Al√©m disto, no momento da leitura do c√≥digo por um usu√°rio n√£o fica claro qual vari√°vel est√° sendo acessada.\n\n\n8.4.2 Usando Nomes das Colunas\nExistem diversas outras formas para acessar dados de um data frame, inclusive utilizando o nome da coluna de forma expl√≠cita.\n\n# Acessar primeira linha e segunda coluna (pelo nome)\ndf_iris[1:3, 'SEPAL_WIDTH']\n\n[1] 3.5 3.0 3.2\n\n\nUma forma bastante comum √© atrav√©s da utiliza√ß√£o do operador $ para acessar a coluna pelo seu nome.\n\n# Acessar primeira linha e segunda coluna\ndf_iris[1, ]$SEPAL_WIDTH\n\n[1] 3.5\n\n# Acessar linhas 1 at√© 3 e a segunda coluna\ndf_iris[1:3, ]$SEPAL_WIDTH\n\n[1] 3.5 3.0 3.2\n\n\n\n\n\n\n\n\nNome Abreviado\n\n\n\nAssim como nas listas, vari√°veis de um data frame podem ser acessadas com o m√≠nimo de caracteres que as identifiquem dentro do data frame. Por exemplo, df_iris$SP retornar√° a vari√°vel SPECIES."
  },
  {
    "objectID": "r_data_frames.html#filtrando-dados",
    "href": "r_data_frames.html#filtrando-dados",
    "title": "8¬† Data Frames",
    "section": "8.5 Filtrando Dados",
    "text": "8.5 Filtrando Dados\nDigamos que se deseje acessar apenas dados que cumpram determinada condi√ß√£o. Para isto, na sele√ß√£o das linhas do data frame, deve ser informada condi√ß√£o l√≥gica na forma abaixo:\n\n# Retorna valores de Speal.Width onde Petal.Length for maior do que 6\nx <- df_iris[df_iris$PETAL_LENGTH > 6, 'SEPAL_WIDTH']\ny <- df_iris[df_iris$PETAL_LENGTH > 6.5, ]$SEPAL_WIDTH\n\nx\n\n[1] 3.0 2.9 3.6 3.8 2.6 2.8 2.8 3.8 3.0\n\ny\n\n[1] 3.0 3.8 2.6 2.8\n\n# Fun√ß√£o que compara os objetos\nidentical(x, y)\n\n[1] FALSE\n\n\nO retorno √© dado pelas linhas em que a vari√°vel PETAL_LENGTH atende as condi√ß√µes declaradas. Este teste retorna um vetor de valores l√≥gicos, e os valores TRUE s√£o os que ‚Äúpermanecem‚Äù. Abaixo outro exemplo:\n\nhead(df_iris$PETAL_LENGTH) > 1.4\n\n[1] FALSE FALSE FALSE  TRUE FALSE  TRUE\n\n\nAplicando este vetor de valores l√≥gicos, o R entende que as posi√ß√µes correspondentes a TRUE devem ser mantidas. No exemplo abaixo, as posi√ß√µes (linhas) 4 e 6 atendem a condi√ß√£o especificada, portanto apenas estas ser√£o selecionadas.\n\ndf_iris2 <- head(df_iris)\nfiltro <- head(df_iris2$PETAL_LENGTH) > 1.4\nfiltro\n\n[1] FALSE FALSE FALSE  TRUE FALSE  TRUE\n\ndf_iris2[filtro, 'SEPAL_WIDTH']\n\n[1] 3.1 3.9\n\n\nEquivalente ao comando abaixo:\n\ndf_iris2[c(4, 6), 'SEPAL_WIDTH']\n\n[1] 3.1 3.9\n\n\n\n8.5.1 Classes de retorno\nOs filtros em data frames usados com $ ou [ ] (com apenas 1 vari√°vel) retornam vetores e n√£o data frames. Desta forma se perde a classe e a estrutura tabular caracter√≠stica do data frame original.\n\nclass(df_iris[1:3, 1])\n\n[1] \"numeric\"\n\nclass(df_iris[1:3, 'SEPAL_WIDTH'])\n\n[1] \"numeric\"\n\n\nEntretanto, sendo selecionadas mais de uma coluna, a classe retornada segue sendo data.frame.\n\nclass(df_iris[1:3, c(\"SEPAL_LENGTH\", \"SEPAL_WIDTH\")])\n\n[1] \"data.frame\"\n\nclass(df_iris[1:3, 1:2])\n\n[1] \"data.frame\""
  },
  {
    "objectID": "r_data_frames.html#fun√ß√£o-subset",
    "href": "r_data_frames.html#fun√ß√£o-subset",
    "title": "8¬† Data Frames",
    "section": "8.6 Fun√ß√£o Subset",
    "text": "8.6 Fun√ß√£o Subset\nA fun√ß√£o subset permite efetuar filtro em um data frame e muitas vezes oferece uma forma mais organizada visualmente, principalmente quando em filtros com muitas condi√ß√µes. Uma outra vantagem √© que a fun√ß√£o subset retorna faz a sele√ß√£o em um data.frame e retorna um data frame, mesmo com a sele√ß√£o de apenas 1 vari√°vel.\nEsta fun√ß√£o tamb√©m permite sele√ß√£o de colunas a serem mantidas. Note que a fun√ß√£o subset n√£o demanda que o data frame seja referenciado antes das vari√°veis e tamb√©m aceita os nomes das vari√°veis sem aspas. Isto torna o c√≥digo mais leg√≠vel.\n\nclass(subset(df_iris, select = SEPAL_WIDTH))\n\n[1] \"data.frame\"\n\n\n\ndf_mtcars <- mtcars\n# mudar nomes para maiusculas\nnames(df_mtcars) <- toupper(names(df_mtcars))\n\nsubset(x = df_mtcars, # dados\n       subset = MPG > 25, # filtro  \n       select = c(MPG, CYL, HP)) # colunas\n\n                MPG CYL  HP\nFiat 128       32.4   4  66\nHonda Civic    30.4   4  52\nToyota Corolla 33.9   4  65\nFiat X1-9      27.3   4  66\nPorsche 914-2  26.0   4  91\nLotus Europa   30.4   4 113\n\n\nUsando um filtro um pouco mais complexo e sem inserir o nome dos argumentos da fun√ß√£o (x, subset e select):\n\ndf_mtcars_filtrado <- subset(df_mtcars, # dados \n       MPG > 25 & CYL == 4 & HP > 70, # filtro  \n       c(MPG, CYL, HP)) # colunas\n\ndf_mtcars_filtrado\n\n               MPG CYL  HP\nPorsche 914-2 26.0   4  91\nLotus Europa  30.4   4 113\n\n\nNos exemplos anteriores foram declaradas de forma expl√≠cita as vari√°veis a serem mantidas. Para declarar as vari√°veis a serem exclu√≠das basta utiliza o sinal de subtra√ß√£o -, de forma an√°loga a sele√ß√£o por √≠ndices em componentes de vetores.\n\ndf_mtcars |> \n  subset(select = -c(DISP, DRAT, VS, AM)) |> \n  head()\n\n                   MPG CYL  HP    WT  QSEC GEAR CARB\nMazda RX4         21.0   6 110 2.620 16.46    4    4\nMazda RX4 Wag     21.0   6 110 2.875 17.02    4    4\nDatsun 710        22.8   4  93 2.320 18.61    4    1\nHornet 4 Drive    21.4   6 110 3.215 19.44    3    1\nHornet Sportabout 18.7   8 175 3.440 17.02    3    2\nValiant           18.1   6 105 3.460 20.22    3    1"
  },
  {
    "objectID": "r_data_frames.html#jun√ß√£o-de-dados",
    "href": "r_data_frames.html#jun√ß√£o-de-dados",
    "title": "8¬† Data Frames",
    "section": "8.7 Jun√ß√£o de Dados",
    "text": "8.7 Jun√ß√£o de Dados\nUma grande necessidade ao se trablahar com dados tabulados √© a jun√ß√£o de dados. A jun√ß√£o nada mais √© do que usar bases de dados diferentes e carregar dados entre elas a partir de uma chave de identifica√ß√£o. Vamos usar duas bases de dados, uma com c√≥digo e nome do munic√≠pio e outra com o c√≥digo do munic√≠pio e sua popula√ß√£o. Estes dados foram buscados em IBGE (s.d.).\n\ndf_cidades <-\n  data.frame(\n    COD_MUNICIPIO = c('4314902', '3550308', '3304557'),\n    NOME = c('Porto Alegre', 'S√£o Paulo', 'Rio de Janeiro')\n  )\n                        \ndf_populacao <-\n  data.frame(\n    COD_MUNICIPIO = c('4314902', '3550308', '3304557'),\n    POPULACAO = c(1332570, 11451245, 6211423)\n  )\n\nhead(df_cidades)\n\n  COD_MUNICIPIO           NOME\n1       4314902   Porto Alegre\n2       3550308      S√£o Paulo\n3       3304557 Rio de Janeiro\n\nhead(df_populacao)\n\n  COD_MUNICIPIO POPULACAO\n1       4314902   1332570\n2       3550308  11451245\n3       3304557   6211423\n\n\nPara juntar estes dados, usaremos como chave de identifica√ß√£o presente nas duas tabelas o campo COD_MUNICIPIO. A fun√ß√£o usada, merge exige dois argumentos x e y, que s√£o as bases de dados que usaremos para a jun√ß√£o.\n\ndf_completo <- merge(x = df_cidades, y = df_populacao,\n                     by = \"COD_MUNICIPIO\")\n\nhead(df_completo)\n\n  COD_MUNICIPIO           NOME POPULACAO\n1       3304557 Rio de Janeiro   6211423\n2       3550308      S√£o Paulo  11451245\n3       4314902   Porto Alegre   1332570\n\n\nEste exemplo √© o mais b√°sico, onde os dados presentes em ambas tabelas s√£o das mesmas ciades e tamb√©m s√£o ligadas por apenas uma chave de identifica√ß√£o. Vejamos um exemplo um pouco mais realista, onde alguns dados n√£o est√£o presentes em ambas tabelas.\n\n# rbind faz a inclusao de linha nas as bases criadas\ndf_cidades <- rbind(df_cidades, c('3106200', 'Belo Horizonte'))\ndf_populacao <- rbind(df_populacao, c('4106902', 1773733))\n\ndf_completo <- merge(x = df_cidades, y = df_populacao,\n                     by = \"COD_MUNICIPIO\")\n\nhead(df_completo)\n\n  COD_MUNICIPIO           NOME POPULACAO\n1       3304557 Rio de Janeiro   6211423\n2       3550308      S√£o Paulo  11451245\n3       4314902   Porto Alegre   1332570\n\n\nVeja que os dados de Belo Horizonte e do Munic√≠pio de c√≥digo 4106902 (Curitiba) n√£o foram inseridos no data frame resultante. Por padr√£o a fun√ß√£o merge faz a jun√ß√£o pelos dados presentes nos dois data frames. Caso desejemos especificar, usamos os par√¢metros all.x e all.y.\nUsando all.x informamos ao R que desejamos que todas as linhas presentes na base passada como argumento x sejam mantidas. Onde n√£o existirem dados para estas linhas na tabela y ser√£o preenchidos com NA.\n\ndf_completo_x <- merge(x = df_cidades, y = df_populacao,\n                     by = \"COD_MUNICIPIO\", all.x = T)\n\nhead(df_completo_x)\n\n  COD_MUNICIPIO           NOME POPULACAO\n1       3106200 Belo Horizonte      <NA>\n2       3304557 Rio de Janeiro   6211423\n3       3550308      S√£o Paulo  11451245\n4       4314902   Porto Alegre   1332570\n\n\nDe forma an√°loga, usar all.y informa para que as linhas da base y sejam mantidas.\n\ndf_completo_y <- merge(x = df_cidades, y = df_populacao,\n                     by = \"COD_MUNICIPIO\", all.y = T)\n\nhead(df_completo_y)\n\n  COD_MUNICIPIO           NOME POPULACAO\n1       3304557 Rio de Janeiro   6211423\n2       3550308      S√£o Paulo  11451245\n3       4106902           <NA>   1773733\n4       4314902   Porto Alegre   1332570\n\n\nPara cruzamento de todas as linhas das duas tabelas usamos o argumento all.\n\ndf_completo <- merge(x = df_cidades, y = df_populacao,\n                     by = \"COD_MUNICIPIO\", all = T)\n\nhead(df_completo)\n\n  COD_MUNICIPIO           NOME POPULACAO\n1       3106200 Belo Horizonte      <NA>\n2       3304557 Rio de Janeiro   6211423\n3       3550308      S√£o Paulo  11451245\n4       4106902           <NA>   1773733\n5       4314902   Porto Alegre   1332570\n\n\n\n√öltima atualiza√ß√£o: 13/09/2023 - 21:54:53\n\n\n\n\nIBGE. s.d. \"IBGE - Cidades\". https://cidades.ibge.gov.br/.\n\n\nR Core Team. 2023. R Language Definition. R Foundation for Statistical Computing. https://cran.r-project.org/doc/manuals/r-release/R-lang.html."
  },
  {
    "objectID": "r_operador_pipe.html#introdu√ß√£o",
    "href": "r_operador_pipe.html#introdu√ß√£o",
    "title": "9¬† Operador Pipe",
    "section": "9.1 Introdu√ß√£o",
    "text": "9.1 Introdu√ß√£o\nMuitas vezes seu c√≥digo demanda muitas transforma√ß√µes e acaba ficando muito verboso e de dific√≠l entendimento. Uma forma de facilitar a compreens√£o em torno das opera√ß√µes em sequ√™ncia √© criar um fluxo em que as opera√ß√µes v√£o sendo efetuadas em sequ√™ncia, onde as entradas s√£o as sa√≠das do passo anterior.\nO operador |> (pipe) existe com este intuito, organizar as opera√ß√µes em um fluxo cont√≠nuo. O pipe foi implementado a partir da vers√£o 4.1.0 do R e passa um valor para uma fun√ß√£o. Os dados s√£o passados do lado esquerdo (lfs - left hand side) para o lado direito (rhs - right hand side). O valor do lado esquerdo (lhs) √© passado como o primeiro argumento da fun√ß√£o do lado direito (rhs).\nVejamos um exemplo simplificado onde o vetor que possue n√∫meros de 1 at√© 20 √© passado para a fun√ß√£o head. Com o uso do |> o vetor √© passado como primeiro argumento da fun√ß√£o head e esta por sua vez exibe os seis primeiros elementos.\n\nc(1:20) |> head()\n\n[1] 1 2 3 4 5 6\n\n\nO c√≥digo acima √© equivalente a:\n\nhead(c(1:20))\n\n[1] 1 2 3 4 5 6\n\n\nCaso se deseje alterar o n√∫mero de elementos, basta usar o argumento n.\n\nc(1:20) |> head(n = 10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nEquivalente a:\n\nhead(c(1:20), n = 10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nVejamos um outro exemplo, um pouco mais realista e complexo: usar a base mtcars e a partir desta selecionar casos em que o campo mpg seja maior do que 10 e ap√≥s criar uma vari√°vel chamada media_hp, que ser√° a m√©dia a partir do campo hp. Poderia ser feito algo do tipo:\n\ndf_mtcars <- subset(mtcars, mpg > 10)\nmedia_hp <- mean(df_mtcars$hp)\nmedia_hp\n\n[1] 146.6875\n\n\nMesmo sendo um processo pequeno com apenas 2 opera√ß√µes bastante corriqueiras, ler o c√≥digo j√° se torna enfadonho, para dizer o m√≠nimo. Tamb√©m n√£o fica claro, em uma passada de olhos, se as opera√ß√µes possuem rela√ß√£o entre si.\nImagine agora criar as mesmas opera√ß√µes de forma ‚Äúconcatenada‚Äù em que uma transforma√ß√£o √© passada para a seguinte at√© que se chegue ao final do fluxo. Em linguagem ‚Äúhumana‚Äù algo do tipo:\ndata frame ‚û°Ô∏è filtrar casos ‚û°Ô∏è selecionar vari√°vel ‚û°Ô∏è calcular m√©dia\nEm R:\n\nmtcars |> \n  subset(mpg > 10) |> \n  subset(select = hp, drop = T) |> \n  mean()\n\n[1] 146.6875\n\n# ou de forma mais sucinta\nmtcars |> \n  subset(mpg > 10, select = hp, drop = T) |> \n  mean()\n\n[1] 146.6875\n\n\nEste c√≥digo √© equivalente ao anterior, por√©m aqui fica mais claro que todas as transforma√ß√µes foram feitas a fim de obter o valor da m√©dia de hp dos casos desejados (mpg > 10). Para fazer a atribui√ß√£o do resultado em uma vari√°vel basta, como de costume, ao in√≠cio ou ao final usar o operador de atribui√ß√£o <-.\n\nmedia_hp <- mtcars |> \n  subset(mpg > 10) |> \n  subset(select = hp, drop = T) |> \n  mean()\n\nmedia_hp\n\n[1] 146.6875\n\n# ou de forma menos usual\nmtcars |> \n  subset(mpg > 10) |> \n  subset(select = hp, drop = T) |> \n  mean() -> media_hp\n\nmedia_hp\n\n[1] 146.6875"
  },
  {
    "objectID": "r_operador_pipe.html#placeholder",
    "href": "r_operador_pipe.html#placeholder",
    "title": "9¬† Operador Pipe",
    "section": "9.2 Placeholder",
    "text": "9.2 Placeholder\nA partir da vers√£o 4.2.0 o pipe passou a ter um placeholder (s√≠mbolo _) que serve para que o valor lfs seja passado para outro argumento que n√£o o primeiro da fun√ß√£o rhs.\n\n8 |> head(c(1:20), n = _)\n\n[1] 1 2 3 4 5 6 7 8\n\n\nEquivalente a:\n\nhead(c(1:20), n = 8)\n\n[1] 1 2 3 4 5 6 7 8\n\n\nA partir da vers√£o 4.3.0 o placeholder tamb√©m pode ser utilizado para opera√ß√µes de extra√ß√µes com [. Replicando o exemplo do c√°lculo de media_hp, por√©m agora fazendo a extra√ß√£o da vari√°vel hp que √© retornada como um vetor e passada para a fun√ß√£o mean.\n\nmedia_hp <- mtcars |> \n  subset(mpg > 10) |> \n  _$hp |> \n  mean()\n\nmedia_hp\n\n[1] 146.6875\n\n\n\nR Core Team (2023)\nWickham (2023/04/21)\n√öltima atualiza√ß√£o: 14/08/2023 - 20:55:44\n\n\n\n\nR Core Team. 2023. \"R: A Language and Environment for Statistical Computing\". Vienna, Austria: R Foundation for Statistical Computing. 2023. https://cran.r-project.org/doc/manuals/r-devel/NEWS.html.\n\n\nWickham, Hadley. 2023/04/21. \"Differences between the base R and magrittr pipes\". 2023/04/21. https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/."
  },
  {
    "objectID": "r_funcoes.html#criando-fun√ß√µes",
    "href": "r_funcoes.html#criando-fun√ß√µes",
    "title": "10¬† Fun√ß√µes",
    "section": "10.1 Criando Fun√ß√µes",
    "text": "10.1 Criando Fun√ß√µes\nFun√ß√µes podem ser criadas atrav√©s do comando function.\n\nfnSomar <- function(param1, param2) {\n  param1 + param2\n}\n\nfnSomar(5, 8)\n\n[1] 13\n\n\nPara visualizar o c√≥digo de uma fun√ß√£o podemos usar seu nome sem os par√™nteses.\n\nfnSomar\n\nfunction(param1, param2) {\n  param1 + param2\n}\n\n\n\n10.1.1 Argumentos - Valores Padr√£o"
  },
  {
    "objectID": "r_funcoes.html#fun√ß√£o-x-ambiente",
    "href": "r_funcoes.html#fun√ß√£o-x-ambiente",
    "title": "10¬† Fun√ß√µes",
    "section": "10.2 Fun√ß√£o x Ambiente",
    "text": "10.2 Fun√ß√£o x Ambiente\nAs fun√ß√µes possuem seus pr√≥prios ambientes. Abaixo uma fun√ß√£o criada para exibir seu ambiente e seu ambiente ‚Äòpai‚Äô.\n\nfnExibirEnvs <- function() {\n  print('Ambiente atual:')\n  print(environment())\n  \n  print(paste(\n    'Ambiente Pai:', \n    environmentName(parent.env(environment()\n                               ))))\n}\n\nfnExibirEnvs()\n\n[1] \"Ambiente atual:\"\n<environment: 0x0000022167b9a1c8>\n[1] \"Ambiente Pai: R_GlobalEnv\"\n\n\n\n10.2.1 Objetos no Ambiente da Fun√ß√£o\nObjetos que s√£o criados dentro de uma fun√ß√£o existem apenas dentro do ambiente desta fun√ß√£o. Abaixo um exemplo de vari√°vel criada dentro do ambiente da fun√ß√£o e que n√£o √© acess√≠vel no GlobalEnv.\n\nfnTeste <- function(){\n  y <- 15\n  x <- 80\n  ls()\n}\n\nfnTeste()\n\n[1] \"x\" \"y\"\n\ny\n\nError in eval(expr, envir, enclos): objeto 'y' n√£o encontrado\n\n\nObjetos que existam no ambiente corrente n√£o s√£o alterados caso por estarem dentro do ambiente de fuma fun√ß√£o. A vari√°vel x √© inicializada com valor 10 no ambiente corrente. Ela pode ser acessada pela fun√ß√£o mesmo n√£o sendo informada em algum argumento.\n\nx <- 10\n\nfnTeste2 <- function(){\n  y <- 15\n  x + y\n}\n\nfnTeste2()\n\n[1] 25\n\ny\n\nError in eval(expr, envir, enclos): objeto 'y' n√£o encontrado\n\nx\n\n[1] 10\n\n\nEntretando, caso a vari√°vel x seja alterada no ambiente da fun√ß√£o ela n√£o √© alterada no ambiente corrente.\n\nx <- 10\n\nfnTeste3 <- function(){\n  y <- 15\n  x <- 80\n  x + y\n}\n\nfnTeste3()\n\n[1] 95\n\nx\n\n[1] 10\n\n\n\n10.2.1.1 Operador de Super Atribui√ß√£o (<<-)\nUsando o operador de super atribui√ß√£o <<- √© poss√≠vel alterar objetos que estejam fora do ambiente de uma fun√ß√£o. Neste caso a vari√°vel x √© atualizada no ambiente que est√° acima do ambiente da fun√ß√£o. A vari√°vel y continua n√£o existindo fora da fun√ß√£o, por√©m agora a vari√°vel x √© atualizada em ambos ambientes.\n\nls(envir = globalenv())\n\n[1] \"fnExibirEnvs\" \"fnSomar\"      \"fnTeste\"      \"fnTeste2\"     \"fnTeste3\"    \n[6] \"x\"           \n\nx\n\n[1] 10\n\nfnTeste4 <- function(){\n  y <- 15\n  x <<- 80\n  x + y\n}\n\nfnTeste4()\n\n[1] 95\n\ny\n\nError in eval(expr, envir, enclos): objeto 'y' n√£o encontrado\n\nx\n\n[1] 80\n\n\nApesar de, neste caso, produzirem o mesmo retorno, as fun√ß√µes fnTeste3 e fnTeste4 impactam de formas distintas o ambiente do R."
  },
  {
    "objectID": "r_funcoes.html#retorno",
    "href": "r_funcoes.html#retorno",
    "title": "10¬† Fun√ß√µes",
    "section": "10.3 Retorno",
    "text": "10.3 Retorno\nNa cria√ß√£o de fun√ß√µes, √© poss√≠vel utilizar o comando return a fim de definir o que ser√° retornado pela fun√ß√£o.\n\nfnRetorno <- function(){\n  return('Este √© o retorno da fun√ß√£o!')\n}\nfnRetorno()\n\n[1] \"Este √© o retorno da fun√ß√£o!\""
  },
  {
    "objectID": "r_funcoes.html#recursividade",
    "href": "r_funcoes.html#recursividade",
    "title": "10¬† Fun√ß√µes",
    "section": "10.4 Recursividade",
    "text": "10.4 Recursividade\nComo outras linguagens de programa√ß√£o, R permite o uso recursivo de fun√ß√µes.\n\nfnRecursividade <- function(x){\n  if(x > 100) return('X ultrapassou 100. Fim!')\n  x <- x + 1\n  print(paste('Valor atual de x:', x))\n  fnRecursividade(x)\n}\n\nfnRecursividade(95)\n\n[1] \"Valor atual de x: 96\"\n[1] \"Valor atual de x: 97\"\n[1] \"Valor atual de x: 98\"\n[1] \"Valor atual de x: 99\"\n[1] \"Valor atual de x: 100\"\n[1] \"Valor atual de x: 101\"\n\n\n[1] \"X ultrapassou 100. Fim!\"\n\n\n\n10.4.1 Buscar Ambiente Pai (Recursivamente)\nAbaixo fun√ß√£o que busca recursivamente os ambientes e seus ‚Äòpais‚Äô at√© que se chege no ‚Äò√∫ltimo‚Äô ambiente, o R_EmptyEnv.\n\nfnBuscarEnvsPai <- function(ambiente, nivel = 1){\n \n    if(environmentName(ambiente)==\"R_EmptyEnv\"){\n    return ('Ambiente informado √© R_EmptyEnv. Fim da busca.')\n    }\n    \n    marcacao <- ''\n    for (i in 1:nivel){\n      \n      marcacao <- paste0(' ', marcacao)\n    }\n    \n    writeLines(paste0(marcacao, '|-- ', environmentName(parent.env(ambiente))))\n\n    nivel <- nivel + 1\n    fnBuscarEnvsPai(parent.env(ambiente), nivel = nivel)\n\n}\nfnBuscarEnvsPai(globalenv())\n\n |-- tools:quarto\n  |-- tools:quarto\n   |-- package:stats\n    |-- package:graphics\n     |-- package:grDevices\n      |-- package:utils\n       |-- package:datasets\n        |-- package:methods\n         |-- Autoloads\n          |-- base\n           |-- R_EmptyEnv\n\n\n[1] \"Ambiente informado √© R_EmptyEnv. Fim da busca.\""
  },
  {
    "objectID": "r_funcoes.html#fun√ß√µes-gen√©ricas",
    "href": "r_funcoes.html#fun√ß√µes-gen√©ricas",
    "title": "10¬† Fun√ß√µes",
    "section": "10.5 Fun√ß√µes Gen√©ricas",
    "text": "10.5 Fun√ß√µes Gen√©ricas\n\nGrolemund (2014)\n√öltima atualiza√ß√£o: 27/08/2023 - 23:27:47\n\n\n\n\nGrolemund, Garrett. 2014. Hands-On Programming with R. O‚ÄôReilly. https://rstudio-education.github.io/hopr/."
  },
  {
    "objectID": "r_dados_externos.html#formato-csv",
    "href": "r_dados_externos.html#formato-csv",
    "title": "11¬† Dados Externos",
    "section": "11.1 Formato Csv",
    "text": "11.1 Formato Csv\n\n11.1.1 Importar Arquivos csv\nMuitas vezes os dados que o usu√°rio possui acesso em sua Institui√ß√£o est√£ armazenados em bancos de dados. Por√©m dados distribu√≠dos por entidades p√∫blicas muitas vezes est√£o em formato csv.\nNeste exemplo vamos importar a base Estat√≠sticas de Aprova√ß√µes - Por Porte de Empresa do BNDES.\n\ndf_aprovacoes_porte <-\n  read.csv(\n    './data/aprovacoes_por_porte_de_empresa.csv',\n    header = T,\n    sep = ';',\n    dec = ',',\n    quote = \"\\\"\"\n  )\n\ndf_aprovacoes_porte |> head()\n\n   ano mes    micro pequena    media   grande\n1 1995   1 128.4699       0 10.18922 380.2330\n2 1995   2 106.3283       0 16.21161 495.5282\n3 1995   3 234.5488       0 13.69085 715.9591\n4 1995   4 125.2196       0 16.44511 403.9919\n5 1995   5 209.4168       0 20.88794 477.2529\n6 1995   6 122.5179       0 23.86818 473.2194\n\n\n\n\n11.1.2 Exportar Arquivos csv\nPara salvar um arquivo em csv deve ser informado como par√¢metro da fun√ß√£o write.csv o nome do objeto e o arquivo no qual ele ser√° salvo.\n\ndf_aprovacoes_porte |> \n  write.csv(paste0(tempdir(), '/df_aprovacoes_porte.csv'))"
  },
  {
    "objectID": "r_dados_externos.html#formato-rds",
    "href": "r_dados_externos.html#formato-rds",
    "title": "11¬† Dados Externos",
    "section": "11.2 Formato RDS",
    "text": "11.2 Formato RDS\nO formato RDS √© espec√≠fico do R e possui diversas vantagens em rela√ß√£o ao uso do formato csv, entre elas:\n\nPermite compacta√ß√£o\nPermite salvar objetos de diversos tipo (bases de dados, vetores, listas, fun√ß√µes, etc)\nMant√©m a formata√ß√£o dos dados\n\n\n11.2.1 Importar Arquivos RDS\n\ndf_aprovacoes_porte <- readRDS('data/aprovacoes_por_porte_de_empresa.RDS')\n\n\n\n11.2.2 Exportar Arquivos RDS\n\ndf_aprovacoes_porte |> \n  saveRDS(paste0(tempdir(), '/df_aprovacoes_porte.RDS'))\n\n\n√öltima atualiza√ß√£o: NA"
  },
  {
    "objectID": "r_controles_fluxo.html#introdu√ß√£o",
    "href": "r_controles_fluxo.html#introdu√ß√£o",
    "title": "12¬† Controles de Fluxo",
    "section": "12.1 Introdu√ß√£o",
    "text": "12.1 Introdu√ß√£o\nAssim como outras linguagens de programa√ß√£o R oferece uma s√©rie de operadores para controle de fluxo de c√≥digo.\n\n\n\n\n\n\nNota\n\n\n\nControles de fluxo s√£o declara√ß√µes usadas na linguagem, mas n√£o s√£o fun√ß√µes."
  },
  {
    "objectID": "r_controles_fluxo.html#if",
    "href": "r_controles_fluxo.html#if",
    "title": "12¬† Controles de Fluxo",
    "section": "12.2 If",
    "text": "12.2 If\nO controle if √© a estrutura de controle mais b√°sica que tomada de decis√£o e ‚Äúdirecionamento‚Äù de c√≥digo. Em caso negativo do teste l√≥gico nenhuma opera√ß√£o √© executada.\n\nx <- 5\n\n# C√≥digos equivalentes\nif(x > 4) print('x √© maior do que quatro')\n\n[1] \"x √© maior do que quatro\"\n\nif(x > 4) { print('x √© maior do que quatro')}\n\n[1] \"x √© maior do que quatro\"\n\nif(x > 4) {\n  print('x √© maior do que quatro') }\n\n[1] \"x √© maior do que quatro\"\n\nif(x > 4) { print('x √© maior do que quatro')\n}\n\n[1] \"x √© maior do que quatro\"\n\nif(x > 4) {\n  print('x √© maior do que quatro')\n} # o mais organizado\n\n[1] \"x √© maior do que quatro\"\n\n\nNote que se o teste n√£o retornar TRUE ou FALSE o R reportar√° erro.\n\nx <- NA\n\nif (x > 4) print('x √© maior do que quatro')\n\nError in if (x > 4) print(\"x √© maior do que quatro\"): valor ausente onde TRUE/FALSE necess√°rio"
  },
  {
    "objectID": "r_controles_fluxo.html#ifelse",
    "href": "r_controles_fluxo.html#ifelse",
    "title": "12¬† Controles de Fluxo",
    "section": "12.3 Ifelse",
    "text": "12.3 Ifelse\nR possui a fun√ß√£o ifelse, que apesar de n√£o ser para controle de fluxo, possui l√≥gica de uso muito semelhante ao if e por este motivo ser√° tratada neste cap√≠tulo. Esta fun√ß√£o efetua teste em valor de entrada e define um valor a ser retornado caso verdadeiro e outro caso falso.\nO retorno de ifelse possui o mesmo formato da estrutura informada no argumento test. Esta fun√ß√£o pode ser usada para atribui√ß√£o em data frames de forma mais sucinta.\nVejamos um exemplo:\n\ndf_mtcars6 <-\n  mtcars |> \n  subset(select = c('hp', 'mpg', 'cyl')) |> \n  head()\n\ndf_mtcars6                 \n\n                   hp  mpg cyl\nMazda RX4         110 21.0   6\nMazda RX4 Wag     110 21.0   6\nDatsun 710         93 22.8   4\nHornet 4 Drive    110 21.4   6\nHornet Sportabout 175 18.7   8\nValiant           105 18.1   6\n\ndf_mtcars6[df_mtcars6$hp > 100, 'RESULTADO'] <-\n  df_mtcars6[df_mtcars6$hp > 100, ]$mpg\n\ndf_mtcars6[df_mtcars6$hp <= 100, 'RESULTADO'] <-\n  df_mtcars6[df_mtcars6$hp <= 100,]$cyl\n\ndf_mtcars6\n\n                   hp  mpg cyl RESULTADO\nMazda RX4         110 21.0   6      21.0\nMazda RX4 Wag     110 21.0   6      21.0\nDatsun 710         93 22.8   4       4.0\nHornet 4 Drive    110 21.4   6      21.4\nHornet Sportabout 175 18.7   8      18.7\nValiant           105 18.1   6      18.1\n\n# com ifelse\ndf_mtcars6$RESULTADO2 <- \n  ifelse(df_mtcars6$hp > 100, \n         df_mtcars6$mpg, \n         df_mtcars6$cyl)\n\ndf_mtcars6\n\n                   hp  mpg cyl RESULTADO RESULTADO2\nMazda RX4         110 21.0   6      21.0       21.0\nMazda RX4 Wag     110 21.0   6      21.0       21.0\nDatsun 710         93 22.8   4       4.0        4.0\nHornet 4 Drive    110 21.4   6      21.4       21.4\nHornet Sportabout 175 18.7   8      18.7       18.7\nValiant           105 18.1   6      18.1       18.1"
  },
  {
    "objectID": "r_controles_fluxo.html#if-else",
    "href": "r_controles_fluxo.html#if-else",
    "title": "12¬† Controles de Fluxo",
    "section": "12.4 If Else",
    "text": "12.4 If Else\nO if else pode ser usado para inserir uma a√ß√£o ap√≥s o retorno negativo do teste feito pelo if.\n\nx <- 3\nif(x > 4) {\n  print('x √© maior do que quatro')\n} else {\n   print('x n√£o √© maior do que quatro')\n}\n\n[1] \"x n√£o √© maior do que quatro\"\n\n\nVeja que podem ser usadas muitas declara√ß√£o else em sequ√™ncia.\n\nx <- 3\nif(x > 3) {\n  print('x √© maior do que tr√™s')\n} else if (x < 3){\n  print('x √© menor do que tr√™s')\n} else if (x == 3){\n  print('x √© igual a tr√™s')\n}\n\n[1] \"x √© igual a tr√™s\""
  },
  {
    "objectID": "r_controles_fluxo.html#la√ßo-for",
    "href": "r_controles_fluxo.html#la√ßo-for",
    "title": "12¬† Controles de Fluxo",
    "section": "12.5 La√ßo For",
    "text": "12.5 La√ßo For\nUm la√ßo for √© uma estrutura que efetua uma determinada quantidade de passos de acordo com a sequ√™ncia informada. a declara√ß√£o deve ser feita no formato: for(x in seq), sendo x a vari√°vel que ser√° atualizada a cada itera√ß√£o iniciando no ¬¥rimeiro valor informado em seq e ecerrando no √∫ltimo. Um exemplo:\n\nfor(x in 1:5){\n  print(paste('Itera√ß√£o:', x))\n}\n\n[1] \"Itera√ß√£o: 1\"\n[1] \"Itera√ß√£o: 2\"\n[1] \"Itera√ß√£o: 3\"\n[1] \"Itera√ß√£o: 4\"\n[1] \"Itera√ß√£o: 5\"\n\n\nCaso se deseje mudar o incremento a cada passo pode ser usada a fun√ß√£o seq. Tamb√©m √© poss√≠vel usar um passo decrescente.\n\nfor(x in seq(2, 1, -0.25)) {\n  print(paste('Valor de x:', x))\n}\n\n[1] \"Valor de x: 2\"\n[1] \"Valor de x: 1.75\"\n[1] \"Valor de x: 1.5\"\n[1] \"Valor de x: 1.25\"\n[1] \"Valor de x: 1\"\n\n\nNo exemplo acima, x √© inicializada com valor 1 e vai sendo incrementada em 1 unidade ao in√≠cio do pr√≥ximo passo. Um la√ßo for tamb√©m pode fazer itera√ß√µes sobre vetores com texto, por exemplo.\n\nfor(i in c('S√£o Paulo', 'Rio de Janeiro', 'Porto Alegre')){\n  print(paste('Cidade atual:', i))\n}\n\n[1] \"Cidade atual: S√£o Paulo\"\n[1] \"Cidade atual: Rio de Janeiro\"\n[1] \"Cidade atual: Porto Alegre\"\n\n\nNo la√ßo for a sequ√™ncia no qual ser√° feita a itera√ß√£o √© considerada antes de se iniciar o la√ßo, assim mesmo se houver alguma altera√ß√£o nesta sequ√™ncia em um dos passos esta altera√ß√£o n√£o impactar√° na execu√ß√£o.\n\nx <- 3\nfor(i in 1:x) {\n  x <- x + 2\n  print(x)\n}\n\n[1] 5\n[1] 7\n[1] 9"
  },
  {
    "objectID": "r_controles_fluxo.html#while",
    "href": "r_controles_fluxo.html#while",
    "title": "12¬† Controles de Fluxo",
    "section": "12.6 While",
    "text": "12.6 While\n\n\n\n\n\n\nFor x While\n\n\n\nUm la√ßo for √© utilizado quando se tem uma sequ√™ncia definida de passos. Caso se deseje executar alguma opera√ß√£o at√© o atendimeto de uma condi√ß√£o, use while.\n\n\nA estrutura while possui a seguinte configura√ß√£o: while(condi√ß√£o). Assim, a repeti√ß√£o do c√≥digo dentro de um bloco while ocorre at√© que a condi√ß√£o n√£o seja mais satisfeita. Exemplo:\n\ncondicao <- 5\nwhile(condicao < 7){\n  print(condicao)\n  condicao <- condicao + 1\n}\n\n[1] 5\n[1] 6\n\n\nA vari√°vel condicao √© iniciada com valor 5 e atende a condi√ß√£o se < 7. O c√≥digo ent√£o √© executado, imprimindo no console o valor da variav√©l e ap√≥s esta recebe seu pr√≥prio valor mais 1. Na itera√ß√£o seguinte seu valor √© 6 e ainda atende a condi√ß√£o de se < 7. Na terceira itera√ß√£o seu valor, novamente atualizado, ser√° 7 e n√£o cumprindo a condi√ß√£o o while √© encerrado.\nA estrutura while pode ficar operando indefinidamente se por algum motivo a condi√ß√£o seja sempre atendida. Teste o c√≥digo abaixo e veja que ele rodar√° indefinidamente. Voc√™ pode par√°-lo teclando ESC no teclado.\n\nwhile(TRUE){\n  print(condicao)\n  condicao <- condicao + 1\n}"
  },
  {
    "objectID": "r_controles_fluxo.html#repeat",
    "href": "r_controles_fluxo.html#repeat",
    "title": "12¬† Controles de Fluxo",
    "section": "12.7 Repeat",
    "text": "12.7 Repeat\nE estrutura repeat funciona de forma an√°loga ao while, entretanto esta n√£o testa condi√ß√£o de parada. Para efetuar a parada o usu√°rio deve fazer de forma expl√≠cita.\n\nx <- 1\ny <- 2\n  \nrepeat{\n  x <- x + y  \n  print(x)  \n  if (x > 11) break\n}\n\n[1] 3\n[1] 5\n[1] 7\n[1] 9\n[1] 11\n[1] 13"
  },
  {
    "objectID": "r_controles_fluxo.html#break-e-next",
    "href": "r_controles_fluxo.html#break-e-next",
    "title": "12¬† Controles de Fluxo",
    "section": "12.8 Break e Next",
    "text": "12.8 Break e Next\nO break encerra as estruturas for, while e repeat. Next, por sua vez, interrompe a execu√ß√£o da itera√ß√£o atual e inicia a pr√≥xima.\nAbaixo um exemplo com uso de break em um la√ßo for. Note que apenas a primeira itera√ß√£o √© executada.\n\nfor (i in 1:3){\n  print(i)\n  break\n}\n\n[1] 1\n\n\nAbaixo um exemplo de uso do next. Repare que o comando print('Teste') nunca √© executado, pois o next interrompe a execu√ß√£o da itera√ß√£o atual, assim tudo que for colocado ap√≥s esta linha (dentro do la√ßo) n√£o √© executado.\n\nfor (i in 1:3){\n  print(i)\n  next\n  print('Teste')\n}\n\n[1] 1\n[1] 2\n[1] 3\n\n\nEm caso de la√ßos embutidos, break e next impactam apenas o mais ‚Äúinterno‚Äù.\n\nfor (i in 1:3){\n  for (j in 1:3){\n    break\n    print(paste('Valor de j √©:', j))\n  }\n  print(paste('Valor de i √©:', i))\n}\n\n[1] \"Valor de i √©: 1\"\n[1] \"Valor de i √©: 2\"\n[1] \"Valor de i √©: 3\"\n\n\n\nDataMentor (s.d.)\nR Core Team (2023)\n√öltima atualiza√ß√£o: 30/09/2023 - 21:38:39\n\n\n\n\nDataMentor. s.d. \"R repeat loop\". https://www.datamentor.io/r-programming/repeat-loop.\n\n\nR Core Team. 2023. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/."
  },
  {
    "objectID": "r_graficos.html#introdu√ß√£o",
    "href": "r_graficos.html#introdu√ß√£o",
    "title": "13¬† Gr√°ficos",
    "section": "13.1 Introdu√ß√£o",
    "text": "13.1 Introdu√ß√£o\nR oferece uma s√©rie de fun√ß√µes nativas para cria√ß√£o de gr√°ficos. Estas fun√ß√µes possuem muitos par√¢metros que permitem melhorar visualamente as apresenta√ß√µes dos gr√°ficos."
  },
  {
    "objectID": "r_graficos.html#fun√ß√£o-plot",
    "href": "r_graficos.html#fun√ß√£o-plot",
    "title": "13¬† Gr√°ficos",
    "section": "13.2 Fun√ß√£o Plot",
    "text": "13.2 Fun√ß√£o Plot\nA fun√ß√£o plot, do pacote graphics, √© uma fun√ß√£o que gera gr√°ficos de dispers√£o e oferece uma gama de op√ß√µes para customiza√ß√£o. Mas vejamos primeiro um exemplo m√≠nimo.\nOs argumentos x e y s√£o usados nas coordenadas e j√° s√£o suficientes para a gera√ß√£o do. Por padr√£o o gr√°fico gerado √© de pontos (argumento type = \"p\").\n\ndf_aprovacoes <- readRDS('data/aprovacoes_por_porte_de_empresa.RDS')\n\nplot(x = df_aprovacoes$ANO, y = df_aprovacoes$GRANDE)\n\n\n\n\nPodemos incluir diversos elementos no gr√°fico, por exemplo, main √© o argumento que define o t√≠tulo, enquanto que xlab e ylab s√£o os labels dos eixos e col define a cor. Note que o R possui muitas cores que podem ser identificadas como strings. Voc√™ pode ver as dispon√≠veis com a fun√ß√£o colors.\n\nplot(df_aprovacoes$ANO, df_aprovacoes$GRANDE, \n     col ='brown3', main = 'Gr√°fico - Aprova√ß√µes - Porte: Grande', \n     xlab = 'Ano', ylab = 'Valor Aprovado')\n\n\n\n\nVeja que o gr√°fico foi exibido com pontos para os valores. O par√¢metro type permite outras op√ß√µes:\n\np (padr√£o): pontos\nl: linhas\nb: pontos e linhas\nc: pontos ‚Äòvazios‚Äô ligados por linhas\n\nObviamente, nem todos os tipos de gr√°ficos se enquadram para todos os tipos de dados. Se usarmos um gr√°fico de pontos e linhas nos dados do exemplo acima, as linhas n√£o far√£o muito sentido, pois elas far√£o a liga√ß√£o entre os pontos.\n\nplot(df_aprovacoes$ANO, df_aprovacoes$GRANDE, \n     type = 'b',\n     col ='brown3', \n     main = 'Gr√°fico - Aprova√ß√µes - Porte: Grande', \n     xlab = 'Ano', ylab = 'Valor Aprovado')\n\n\n\n\nVamos criar gr√°fico de linhas com a base de dados da Taxa Selic Acumulado no M√™s divulgada pelo Banco Central do Brasil. Vamos utilizar os par√¢metros lty (de line type) para determinar o tipo de linha e lwd (de line width) para determinar a largura da linha.\n\ndf_taxa_selic <- read.csv2('./data/csv_serie_sgs_4390.csv',\n                           dec = ',', quote = '\\\"',\n                           col.names = c('DATA', 'SELIC'))\n\n# formatar data\ndf_taxa_selic$DATA <- as.Date(df_taxa_selic$DATA, format = '%d/%m/%Y')\n\n# filtrar a partir de 2017\ndf_taxa_selic <- df_taxa_selic |> \n  subset(DATA >= '2017-01-01')\n\nplot(df_taxa_selic$DATA, df_taxa_selic$SELIC, \n     type = 'b', col ='firebrick3', lty = 3, lwd = 1.5,\n     main = 'Taxa Selic Acumulada Mensal', \n     xlab = 'Data', ylab = 'Selic Acumulada (% a.m.)')"
  },
  {
    "objectID": "r_graficos.html#fun√ß√£o-hist",
    "href": "r_graficos.html#fun√ß√£o-hist",
    "title": "13¬† Gr√°ficos",
    "section": "13.3 Fun√ß√£o Hist",
    "text": "13.3 Fun√ß√£o Hist\nAbaixo um exemplo de um histograma:\n\nhist(df_taxa_selic$SELIC, col ='cyan4', \n     main = 'Selic', \n     xlab = 'Taxa Selic',\n     ylab = 'Qtde')\n\n\n\nhist(df_aprovacoes$PEQUENA, col = 'cyan3', \n   main = 'Aprova√ß√µes - Porte: Pequena', \n   xlab = 'Valor - Aprova√ß√µes',\n   ylab = 'Qtde')\n\n\n\n\nCom o argumento breaks podemos controlar quantas divis√µes ser√£o exibidas no histograma.\n\nhist(df_aprovacoes$PEQUENA, col = 'cyan3', \n   main = 'Aprova√ß√µes - Porte: Pequena', \n   xlab = 'Valor - Aprova√ß√µes',\n   ylab = 'Qtde',\n   breaks = 20)\n\n\n\n\n\nKassambara (s.d.)\nSchmuller (2019)\n√öltima atualiza√ß√£o: 30/09/2023 - 22:01:48\n\n\n\n\nKassambara, Alboukadel. s.d. \"Statistical tools for high-throughput data analysis\". http://www.sthda.com/english/.\n\n\nSchmuller, Joseph. 2019. An√°lise Estat√≠stica com R. Alta Books."
  },
  {
    "objectID": "r_sumarizacao.html#fun√ß√µes-b√°sicas",
    "href": "r_sumarizacao.html#fun√ß√µes-b√°sicas",
    "title": "14¬† Sumariza√ß√£o de Dados",
    "section": "14.1 Fun√ß√µes B√°sicas",
    "text": "14.1 Fun√ß√µes B√°sicas\nNesta se√ß√£o s√£o detalhadas algumas das fun√ß√µes mais b√°sicas para sumariza√ß√£o de dados.\n\n14.1.1 Soma\nA fun√ß√£o sum retorna a soma dos elementos informados como argumentos.\n\nsum(1:10)\n\n[1] 55\n\nsum(NA)\n\n[1] NA\n\nsum(NA, na.rm = T)\n\n[1] 0\n\n\n\n\n14.1.2 M√©dia\n\nmean(1:20)\n\n[1] 10.5\n\nmean(c(NA, 1, 2, 3))\n\n[1] NA\n\nmean(NA, na.rm = T)\n\n[1] NaN\n\n\n\n\n14.1.3 Mediana\n\nmedian(1:11)\n\n[1] 6\n\nmedian(c(NA, 1, 2, 3))\n\n[1] NA\n\nmedian(NA, na.rm = T)\n\n[1] NA\n\n\n\n\n14.1.4 M√°ximo e m√≠nimo\n\nmax(99:15)\n\n[1] 99\n\nmin(15:99)\n\n[1] 15\n\n\nEstas fun√ß√µes tamb√©m oferecem o argumento na.rm. Veja que vetores vazios recebem retornos Inf e -Inf.\n\nmax(c(NA, NA), na.rm = T)\n\nWarning in max(c(NA, NA), na.rm = T): nenhum argumento n√£o faltante para max;\nretornando -Inf\n\n\n[1] -Inf\n\nmin(c(NA, NA), na.rm = T)\n\nWarning in min(c(NA, NA), na.rm = T): nenhum argumento n√£o faltante para min;\nretornando Inf\n\n\n[1] Inf"
  },
  {
    "objectID": "r_sumarizacao.html#agrega√ß√£o",
    "href": "r_sumarizacao.html#agrega√ß√£o",
    "title": "14¬† Sumariza√ß√£o de Dados",
    "section": "14.2 Agrega√ß√£o",
    "text": "14.2 Agrega√ß√£o\nUma tarefa muito rotineira em an√°lise de dados √© a sumariza√ß√£o de valores por grupos de interesse.\nVejamos um exemplo na base Estat√≠sticas de Aprova√ß√µes - Por Porte de Empresa (BNDES). Uma informa√ß√£o de interesse, por exemplo, pode ser o valor total de Aprova√ß√µes por ano para cada porte das empresas. Como a base de dados originalmente traz os valores abertos para cada m√™s, ser√° necess√°ria opera√ß√£o de agrega√ß√£o.\n\ndf_aprovacoes_porte <-\n  readRDS(\n    './data/aprovacoes_por_porte_de_empresa.RDS')\n\ndf_aprovacoes_porte |> head()\n\n   ANO MES    MICRO PEQUENA    MEDIA   GRANDE\n1 1995   1 128.4699       0 10.18922 380.2330\n2 1995   2 106.3283       0 16.21161 495.5282\n3 1995   3 234.5488       0 13.69085 715.9591\n4 1995   4 125.2196       0 16.44511 403.9919\n5 1995   5 209.4168       0 20.88794 477.2529\n6 1995   6 122.5179       0 23.86818 473.2194\n\n\nPodemos ent√£o fazer a agrega√ß√£o usando a vari√°vel ANO como vari√°vel chave na fun√ß√£o aggregate. Esta fun√ß√£o exige (dentre outros argumentos opcionais) um objeto sobre os quais a fun√ß√£o informada ser√° aplicada, uma lista de elementos para definir o agrupamento e a fun√ß√£o a ser aplicada. No exemplo, usaremos a fun√ß√£o sum, que retorna a soma dos valores.\n\nsomatorio <-\n  aggregate(subset(df_aprovacoes_porte, select = c(-ANO, -MES)),\n            by = list(df_aprovacoes_porte$ANO),\n            sum)\n\nhead(somatorio)\n\n  Group.1    MICRO    PEQUENA     MEDIA   GRANDE\n1    1995 1711.645   0.000000  216.8279  7048.91\n2    1996 1431.916   0.000000  271.6768 11362.08\n3    1997 2179.985   1.053206  137.0893 16672.74\n4    1998 1375.066  34.909957 1454.6207 20161.79\n5    1999 1394.739 426.779631 1083.7491 16634.18\n6    2000 2366.893 864.823930 1534.4957 22858.39\n\n\nVeja que a fun√ß√£o subset foi usada pois as somas de ANO e MES n√£o s√£o de interesse aqui. Sem remov√™-las a fun√ß√£o aggregate faria a soma de seus valores.\nA mesma opera√ß√£o pode ser feita usando o pipe:\n\ndf_aprovacoes_porte |>\n  subset(select = c(-ANO, -MES)) |> \n  aggregate(by = list(df_aprovacoes_porte$ANO),\n            sum) |> \n  head()\n\n  Group.1    MICRO    PEQUENA     MEDIA   GRANDE\n1    1995 1711.645   0.000000  216.8279  7048.91\n2    1996 1431.916   0.000000  271.6768 11362.08\n3    1997 2179.985   1.053206  137.0893 16672.74\n4    1998 1375.066  34.909957 1454.6207 20161.79\n5    1999 1394.739 426.779631 1083.7491 16634.18\n6    2000 2366.893 864.823930 1534.4957 22858.39\n\n\nUma forma equivalente e ainda mais sucinta √© poss√≠vel com a utiliza√ß√£o do . (indicando todas as vari√°veis) e do ~ (indicando que as vari√°veis ‚Äúdependem‚Äù ou s√£o ‚Äúexplicadas‚Äù pela vari√°vel ANO). Como aqui a vari√°vel ANO ser√° indicada como ‚Äúexplicativa‚Äù das demais ela n√£o deve ser descartada no comando subset, como feito no exemplo anterior.\n\ndf_aprovacoes_porte |>\n  subset(select = -MES) |> \n  aggregate(by = . ~ ANO, sum) |> \n  head()\n\n   ANO    MICRO    PEQUENA     MEDIA   GRANDE\n1 1995 1711.645   0.000000  216.8279  7048.91\n2 1996 1431.916   0.000000  271.6768 11362.08\n3 1997 2179.985   1.053206  137.0893 16672.74\n4 1998 1375.066  34.909957 1454.6207 20161.79\n5 1999 1394.739 426.779631 1083.7491 16634.18\n6 2000 2366.893 864.823930 1534.4957 22858.39"
  },
  {
    "objectID": "r_sumarizacao.html#valores-faltantes---na",
    "href": "r_sumarizacao.html#valores-faltantes---na",
    "title": "14¬† Sumariza√ß√£o de Dados",
    "section": "14.3 Valores Faltantes - NA",
    "text": "14.3 Valores Faltantes - NA\nA fun√ß√£o aggregate possui como padr√£o o argumento na.action = na.omit, assim os valores NA s√£o omitidos. Caso seja necess√°iro considerar os valores faltantes deve ser informada uma fun√ß√£o ‚Äúalternativa‚Äù, que trata estes registros. No exemplo abaixo foi informado NULL, ou seja, ‚Äúnenhuma‚Äù fun√ß√£o a ser aplicada sobre os valores faltantes. Assim eles ser√£o considerados no c√°lculo.\n\ndf_aprovacoes_porte_na <- df_aprovacoes_porte\n\ndf_aprovacoes_porte_na[1,]$MICRO <- NA\n\nhead(df_aprovacoes_porte_na)\n\n   ANO MES    MICRO PEQUENA    MEDIA   GRANDE\n1 1995   1       NA       0 10.18922 380.2330\n2 1995   2 106.3283       0 16.21161 495.5282\n3 1995   3 234.5488       0 13.69085 715.9591\n4 1995   4 125.2196       0 16.44511 403.9919\n5 1995   5 209.4168       0 20.88794 477.2529\n6 1995   6 122.5179       0 23.86818 473.2194\n\ndf_aprovacoes_porte_na |>\n  subset(select = -MES) |>\n  aggregate(by = . ~ ANO, sum, \n            na.action = NULL) |>\n  head()\n\n   ANO    MICRO    PEQUENA     MEDIA   GRANDE\n1 1995       NA   0.000000  216.8279  7048.91\n2 1996 1431.916   0.000000  271.6768 11362.08\n3 1997 2179.985   1.053206  137.0893 16672.74\n4 1998 1375.066  34.909957 1454.6207 20161.79\n5 1999 1394.739 426.779631 1083.7491 16634.18\n6 2000 2366.893 864.823930 1534.4957 22858.39\n\n\nVeja que agora a soma para o ano de 1995 para o porte MICRO √© NA.\nCaso seja inserido na.rm = T como argumento da fun√ß√£o sum, os valores faltantes s√£o desconsiderados novamente, mesmo na.action sendo nulo.\n\ndf_aprovacoes_porte_na |>\n  subset(select = -MES) |>\n  aggregate(by = . ~ ANO, sum, na.rm = T,\n            na.action = NULL) |>\n  head()\n\n   ANO    MICRO    PEQUENA     MEDIA   GRANDE\n1 1995 1583.175   0.000000  216.8279  7048.91\n2 1996 1431.916   0.000000  271.6768 11362.08\n3 1997 2179.985   1.053206  137.0893 16672.74\n4 1998 1375.066  34.909957 1454.6207 20161.79\n5 1999 1394.739 426.779631 1083.7491 16634.18\n6 2000 2366.893 864.823930 1534.4957 22858.39\n\n\n\n√öltima atualiza√ß√£o: 16/10/2023 - 19:16:05"
  },
  {
    "objectID": "r_utilidades.html#listar-arquivos",
    "href": "r_utilidades.html#listar-arquivos",
    "title": "15¬† Utilidades",
    "section": "15.1 Listar Arquivos",
    "text": "15.1 Listar Arquivos\nA fun√ß√£o list.files exibe arquivos em um diret√≥rio informado no argumento path.\n\nlist.files('./data/')\n\n[1] \"aprovacoes_por_porte_de_empresa.csv\" \"aprovacoes_por_porte_de_empresa.RDS\"\n[3] \"csv_serie_sgs_4390.csv\"             \n\n\nPodem ser retornados os caminos completos dos arquivos com o par√¢metro full.names.\n\nlist.files('./data/', full.names = T)\n\n[1] \"./data/aprovacoes_por_porte_de_empresa.csv\"\n[2] \"./data/aprovacoes_por_porte_de_empresa.RDS\"\n[3] \"./data/csv_serie_sgs_4390.csv\"             \n\n\nEsta fun√ß√£o tamb√©m oferece a op√ß√£o de buscar arquivos com algum padr√£o em seu nome atrav√©s do par√¢metros pattern.\n\nlist.files('.', pattern = '.yml')\n\n[1] \"_quarto.yml\""
  },
  {
    "objectID": "r_utilidades.html#listar-diret√≥rios",
    "href": "r_utilidades.html#listar-diret√≥rios",
    "title": "15¬† Utilidades",
    "section": "15.2 Listar diret√≥rios",
    "text": "15.2 Listar diret√≥rios\nDe forma an√°loga √† fun√ß√£o list.files, a fun√ß√£o list.dir exibe os diret√≥rios de um caminho informado. Por√©m esta fun√ß√£o possui TRUE como valores padr√£o dos argumentos full.names e recursive.\n\nlist.dirs(\"C:/Arquivos de Programas/R/\", recursive = F)\n\n[1] \"C:/Arquivos de Programas/R/R-4.3.0\""
  },
  {
    "objectID": "r_utilidades.html#informa√ß√µes-de-arquivos",
    "href": "r_utilidades.html#informa√ß√µes-de-arquivos",
    "title": "15¬† Utilidades",
    "section": "15.3 Informa√ß√µes de arquivos",
    "text": "15.3 Informa√ß√µes de arquivos\nA fun√ß√£o file.info retorna uma s√©rie de informa√ß√µes sobre o arquivo como tamanho, modo, hor√°rio de modifica√ß√£o, etc.\n\nt(file.info('./data/aprovacoes_por_porte_de_empresa.csv'))\n\n      ./data/aprovacoes_por_porte_de_empresa.csv\nsize  \"24212\"                                   \nisdir \"FALSE\"                                   \nmode  \"444\"                                     \nmtime \"2023-08-22 20:20:27\"                     \nctime \"2023-08-22 21:22:18\"                     \natime \"2023-10-16 19:17:33\"                     \nexe   \"no\"                                      \n\n\n\n√öltima atualiza√ß√£o: 24/09/2023 - 18:44:16"
  },
  {
    "objectID": "sobre_pacotes.html#o-que-s√£o-pacotes",
    "href": "sobre_pacotes.html#o-que-s√£o-pacotes",
    "title": "Pacotes",
    "section": "O que s√£o pacotes?",
    "text": "O que s√£o pacotes?\nUm pacote em R √© basicamente um conjunto de fun√ß√µes e/ou funcionalidades criadas por terceiros que ‚Äúexpandem‚Äù o poder da linguagem. A principal op√ß√£o para instala√ß√£o de pacotes √© atrav√©s do CRAN. O CRAN √© um reposit√≥rio que cont√©m milhares de pacotes (19910 em 16/10/2023). Nele tamb√©m podem ser encontrados pacotes em suas vers√µes ‚Äúantigas‚Äù. Caso algum pacote n√£o esteja hospedado no CRAN, ele tamb√©m pode ser instalado, diretamente do arquivo fornecido pelo desenvolvedor do pacote por exemplo (muitos distribuem atrav√©s do Github).\nExistem alguns pacotes ‚Äúespeciais‚Äù em R que comp√µem a pr√≥pria linguagem. Estes pacotes possuem suas vers√µes id√™nticas √† da linguagem e s√£o ‚Äúclassificados‚Äù com prioridade ‚Äúbase‚Äù. Assim quando se faz a instala√ß√£o da linguagem R, muitos pacotes tamb√©m s√£o instalados.\n\nR Core Team (2023)\n√öltima atualiza√ß√£o: 12/08/2023 - 20:39:38\n\n\n\n\nR Core Team. 2023. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/."
  },
  {
    "objectID": "pacotes_intro.html#pacotes-instalados",
    "href": "pacotes_intro.html#pacotes-instalados",
    "title": "16¬† Introdu√ß√£o a Pacotes",
    "section": "16.1 Pacotes Instalados",
    "text": "16.1 Pacotes Instalados\nPodemos ver os pacotes instalados com o comando installed.packages:\n\n# Exibindo 5 primeiros\nas.data.frame(installed.packages())$Package[1:5]\n\n[1] \"abind\"      \"askpass\"    \"assertthat\" \"backports\"  \"base64enc\" \n\n\nA fun√ß√£o installed.packages retorna uma s√©rie de informa√ß√µes a respeito dos pacotes. Abaixo alguns exemplos de pacotes bastante utilizados. Para simplificar a visualiza√ß√£o foi usada fun√ß√£o t, que transp√µe o data.frame de colunas para linhas.\n\npacotes <- as.data.frame(installed.packages())\n# pacote base\nt(pacotes[pacotes$Package == 'base',])\n\n                      base                                \nPackage               \"base\"                              \nLibPath               \"C:/Program Files/R/R-4.3.0/library\"\nVersion               \"4.3.0\"                             \nPriority              \"base\"                              \nDepends               NA                                  \nImports               NA                                  \nLinkingTo             NA                                  \nSuggests              \"methods\"                           \nEnhances              NA                                  \nLicense               \"Part of R 4.3.0\"                   \nLicense_is_FOSS       NA                                  \nLicense_restricts_use NA                                  \nOS_type               NA                                  \nMD5sum                NA                                  \nNeedsCompilation      NA                                  \nBuilt                 \"4.3.0\"                             \n\n# pacote MASS\nt(pacotes[pacotes$Package == 'MASS',])\n\n                      MASS                                             \nPackage               \"MASS\"                                           \nLibPath               \"C:/Program Files/R/R-4.3.0/library\"             \nVersion               \"7.3-58.4\"                                       \nPriority              \"recommended\"                                    \nDepends               \"R (>= 4.3.0), grDevices, graphics, stats, utils\"\nImports               \"methods\"                                        \nLinkingTo             NA                                               \nSuggests              \"lattice, nlme, nnet, survival\"                  \nEnhances              NA                                               \nLicense               \"GPL-2 | GPL-3\"                                  \nLicense_is_FOSS       NA                                               \nLicense_restricts_use NA                                               \nOS_type               NA                                               \nMD5sum                NA                                               \nNeedsCompilation      \"yes\"                                            \nBuilt                 \"4.3.0\"                                          \n\n# pacote bit64\nt(pacotes[pacotes$Package == 'bit64',])\n\n                      bit64                                                \nPackage               \"bit64\"                                              \nLibPath               \"C:/Users/luisg/AppData/Local/R/win-library/4.3\"     \nVersion               \"4.0.5\"                                              \nPriority              NA                                                   \nDepends               \"R (>= 3.0.1), bit (>= 4.0.0), utils, methods, stats\"\nImports               NA                                                   \nLinkingTo             NA                                                   \nSuggests              NA                                                   \nEnhances              NA                                                   \nLicense               \"GPL-2 | GPL-3\"                                      \nLicense_is_FOSS       NA                                                   \nLicense_restricts_use NA                                                   \nOS_type               NA                                                   \nMD5sum                NA                                                   \nNeedsCompilation      \"yes\"                                                \nBuilt                 \"4.3.1\"                                              \n\n\nPode ser visto no campo Priority que para o pacote base o conte√∫do √© ‚Äúbase‚Äù, isto significa que este faz parte da instala√ß√£o do R. J√° o pacote MASS, por exemplo, √© um pacote recomendado. O pacote bit64, que √© um pacote ‚Äúnormal‚Äù, n√£o possui informa√ß√£o no campo Priority.\nTamb√©m podemos visualizar dados do pacote (arquivo DESCRIPTION do pr√≥prio pacote) com o comando packageDescription:\n\npackageDescription('base')\n\nPackage: base\nVersion: 4.3.0\nPriority: base\nTitle: The R Base Package\nAuthor: R Core Team and contributors worldwide\nMaintainer: R Core Team <do-use-Contact-address@r-project.org>\nContact: R-help mailing list <r-help@r-project.org>\nDescription: Base R functions.\nLicense: Part of R 4.3.0\nSuggests: methods\nBuilt: R 4.3.0; ; 2023-04-21 09:22:06 UTC; windows\n\n-- File: C:/PROGRA~1/R/R-43~1.0/library/base/Meta/package.rds"
  },
  {
    "objectID": "pacotes_intro.html#pasta-de-instala√ß√£o",
    "href": "pacotes_intro.html#pasta-de-instala√ß√£o",
    "title": "16¬† Introdu√ß√£o a Pacotes",
    "section": "16.2 Pasta de Instala√ß√£o",
    "text": "16.2 Pasta de Instala√ß√£o\nO R possui pastas de instala√ß√£o dos pacotes. Para visualiz√°-las basta usar o comando .libPaths. A pasta padr√£o de instala√ß√£o traz os diversos pacotes que foram instalados junto com o R (os ‚Äúb√°sicos‚Äù e os recomendados).\n\n.libPaths()\n\n[1] \"C:/Users/luisg/AppData/Local/R/win-library/4.3\"\n[2] \"C:/Program Files/R/R-4.3.0/library\"            \n\n# Exibir 10 primeiros da primeira pasta\nlist.files(.libPaths()[1])[1:10]\n\n [1] \"abind\"      \"askpass\"    \"assertthat\" \"backports\"  \"base64enc\" \n [6] \"bit\"        \"bit64\"      \"bizdays\"    \"blob\"       \"brio\"      \n\n# Exibir 10 primeiros da segunda pasta\nlist.files(.libPaths()[2])[1:10]\n\n [1] \"base\"      \"boot\"      \"class\"     \"cluster\"   \"codetools\" \"compiler\" \n [7] \"datasets\"  \"foreign\"   \"graphics\"  \"grDevices\""
  },
  {
    "objectID": "pacotes_intro.html#pacotes-dispon√≠veis",
    "href": "pacotes_intro.html#pacotes-dispon√≠veis",
    "title": "16¬† Introdu√ß√£o a Pacotes",
    "section": "16.3 Pacotes Dispon√≠veis",
    "text": "16.3 Pacotes Dispon√≠veis\nA fun√ß√£o available.packages procura pacotes dispon√≠veis no valor informado no argumento repos. Por padr√£o √© buscado de getOption(\"repos\").\n\n# Definir reposit√≥rio\noptions(repos = 'https://cran.rstudio.com/')\n\n# Exibindo 5 primeiros\navailable.packages()[1:5]\n\n[1] \"A3\"            \"AalenJohansen\" \"AATtools\"      \"ABACUS\"       \n[5] \"abasequence\""
  },
  {
    "objectID": "pacotes_intro.html#depend√™ncias-de-pacotes",
    "href": "pacotes_intro.html#depend√™ncias-de-pacotes",
    "title": "16¬† Introdu√ß√£o a Pacotes",
    "section": "16.4 Depend√™ncias de Pacotes",
    "text": "16.4 Depend√™ncias de Pacotes\nOs pacotes podem e em sua maioria utilizam fun√ß√µes de outros pacotes. Estes ‚Äúoutros pacotes‚Äù s√£o denominadas de depend√™ncias. As informa√ß√µes de depend√™ncias tamb√©m constam no DESCRIPTION do pacote.\nO pacote tools, que faz parte da base do R, oferece uma fun√ß√£o para busca de depend√™ncias de pacotes. Inclusive existe a op√ß√£o de recursividade, ou seja, busca tamb√©m as depend√™ncias das depend√™ncias do pacote desejado.\n\ntools::package_dependencies('dplyr')\n\n$dplyr\n [1] \"cli\"        \"generics\"   \"glue\"       \"lifecycle\"  \"magrittr\"  \n [6] \"methods\"    \"pillar\"     \"R6\"         \"rlang\"      \"tibble\"    \n[11] \"tidyselect\" \"utils\"      \"vctrs\"     \n\ntools::package_dependencies('dplyr', recursive = T)\n\n$dplyr\n [1] \"cli\"        \"generics\"   \"glue\"       \"lifecycle\"  \"magrittr\"  \n [6] \"methods\"    \"pillar\"     \"R6\"         \"rlang\"      \"tibble\"    \n[11] \"tidyselect\" \"utils\"      \"vctrs\"      \"fansi\"      \"utf8\"      \n[16] \"pkgconfig\"  \"withr\"      \"grDevices\"  \"graphics\"   \"stats\""
  },
  {
    "objectID": "pacotes_intro.html#instala√ß√£o-de-pacotes",
    "href": "pacotes_intro.html#instala√ß√£o-de-pacotes",
    "title": "16¬† Introdu√ß√£o a Pacotes",
    "section": "16.5 Instala√ß√£o de Pacotes",
    "text": "16.5 Instala√ß√£o de Pacotes\nPara efetuar a instala√ß√£o de pacotes usa-se a fun√ß√£o install.packages. Os pacotes podem ser instalados diretamente de reposit√≥rios na Internet (como o CRAN) ou de arquivos locais.\n\n√öltima atualiza√ß√£o: 16/09/2023 - 14:46:10"
  },
  {
    "objectID": "pacotes_data_table.html#criando-um-data-table",
    "href": "pacotes_data_table.html#criando-um-data-table",
    "title": "17¬† Pacote data.table",
    "section": "17.1 Criando um Data Table",
    "text": "17.1 Criando um Data Table\n\n17.1.1 Fun√ß√£o data.table\nA cria√ß√£o de um data table se d√° de forma an√°loga a um data frame atrav√©s da fun√ß√£o data.table.\n\ndf_exemplo <- data.table(x = 1:10)\ndf_exemplo |> class()\n\n[1] \"data.table\" \"data.frame\"\n\n\n\n\n17.1.2 Fun√ß√£o setDT\nTamb√©m podemos criar um data table a partir de um data frame com o comando setDT ou com a fun√ß√£o as.data.table.\n\ndf_aprovacoes_as <- as.data.table(df_aprovacoes)\ndf_aprovacoes_as |> class()\n\n[1] \"data.table\" \"data.frame\"\n\ndf_aprovacoes <- setDT(df_aprovacoes)\ndf_aprovacoes |> class()\n\n[1] \"data.table\" \"data.frame\"\n\nidentical(df_aprovacoes_as, df_aprovacoes)\n\n[1] TRUE\n\n\nAs opera√ß√µes realizadas com data tables possuem sintaxe espec√≠fica e bastante sucinta. As opera√ß√µes s√£o feitas sobre a base de dados na seguinte forma:\nbase[ linhas, colunas, agrega√ß√£o ]"
  },
  {
    "objectID": "pacotes_data_table.html#filtrando-dados",
    "href": "pacotes_data_table.html#filtrando-dados",
    "title": "17¬† Pacote data.table",
    "section": "17.2 Filtrando Dados",
    "text": "17.2 Filtrando Dados\nDe forma an√°logo a um data frame padr√£o, os filtros nas linhas ocorrem antes da v√≠rgula e podem usar operadores l√≥gicos e relacionais. Uma grande vantagem √© que as colunas podem ser referenciadas apenas pelo seu nome, sem incluir o nome do objeto.\n\ndf_aprovacoes[ANO == 2022 & MES > 6, ]\n\n    ANO MES     MICRO   PEQUENA    MEDIA    GRANDE\n1: 2022   7 1763.7773 3843.3850 3286.456  1873.511\n2: 2022   8 2378.3861 4640.6140 3965.469  3147.633\n3: 2022   9  874.7404 1198.8596 2163.194  4625.476\n4: 2022  10  419.9439  932.4995 1970.361  9020.808\n5: 2022  11  323.8321  828.8072 2259.412  7908.244\n6: 2022  12  413.4742 1087.6930 3795.945 37107.079"
  },
  {
    "objectID": "pacotes_data_table.html#selecionando-colunas",
    "href": "pacotes_data_table.html#selecionando-colunas",
    "title": "17¬† Pacote data.table",
    "section": "17.3 Selecionando Colunas",
    "text": "17.3 Selecionando Colunas\nPara sele√ß√£o de colunas, podemos colocar o nome da coluna diretamente ap√≥s a v√≠rgula, por√©m o reotrno √© dado em forma de vetor e n√£o mant√©m a estrutura do data table.\n\ndf_aprovacoes[, GRANDE] |> \n  is.vector()\n\n[1] TRUE\n\ndf_aprovacoes[, GRANDE] |> \n  is.data.table()\n\n[1] FALSE\n\n\nPara sele√ß√£o mais robusta devem ser informadas as colunas dentro de uma lista, que pode ser abreviada por um ponto.\n\ndf_aprovacoes[, list(GRANDE)] |> \n  is.data.table()\n\n[1] TRUE\n\n# selecioanndo mais de uma coluna\ndf_aprovacoes[, list(GRANDE, PEQUENA)] |> \n  head(3)\n\n     GRANDE PEQUENA\n1: 380.2330       0\n2: 495.5282       0\n3: 715.9591       0\n\n# usando ponto\ndf_aprovacoes[, .(GRANDE, PEQUENA)] |> \n  head(3)\n\n     GRANDE PEQUENA\n1: 380.2330       0\n2: 495.5282       0\n3: 715.9591       0"
  },
  {
    "objectID": "pacotes_data_table.html#alterando-vari√°veis",
    "href": "pacotes_data_table.html#alterando-vari√°veis",
    "title": "17¬† Pacote data.table",
    "section": "17.4 Alterando Vari√°veis",
    "text": "17.4 Alterando Vari√°veis\nA cria√ß√£o/altera√ß√£o de vari√°veis pode ser feita basicamente de duas formas: forma funcional ou LHS := RHS. Em ambas as formas as opera√ß√µes s√£o feitas diretamente no pr√≥prio objeto, n√£o exigindo o operador de atribui√ß√£o <-.\n\n17.4.1 Forma Funcional\nNa forma funcional se faz o uso do operador := (assignment by reference), que deixa o c√≥digo bastante limpo e reduzido, facilitando a leitura.\n\ndf_aprovacoes[, RAZAO_GRANDE_MICRO := GRANDE / MICRO]\ndf_aprovacoes[, RAZAO_GRANDE_MICRO] |> head()\n\n[1] 2.959705 4.660361 3.052496 3.226267 2.278962 3.862450\n\n\n√â poss√≠vel efetuar a atualiza√ß√£o/cria√ß√£o de v√°rias vari√°veis simultaneamente.\n\ndf_aprovacoes[, `:=`(RAZAO_GRANDE_PEQUENA = GRANDE / PEQUENA,\n                     RAZAO_GRANDE_MEDIA = GRANDE/MEDIA)]\n\n\n\n17.4.2 Forma LHS := RHS\nUma forma alternativa pode ser usada com dois ‚Äúvetores‚Äù, um com as vari√°veis a serem criadas e outro com os valores a serem atribu√≠dos.\n\ndf_aprovacoes2 <- copy(df_aprovacoes)\ndf_aprovacoes[, c('RAZAO_GRANDE_PEQUENA', 'RAZAO_GRANDE_MEDIA') :=\n                     list(GRANDE / PEQUENA, GRANDE/MEDIA)]\n\nidentical(df_aprovacoes, df_aprovacoes2)\n\n[1] TRUE"
  },
  {
    "objectID": "pacotes_data_table.html#agrupando",
    "href": "pacotes_data_table.html#agrupando",
    "title": "17¬† Pacote data.table",
    "section": "17.5 Agrupando",
    "text": "17.5 Agrupando\nO agrupamento/agrega√ß√£o ocorre com o operador by. Exemplo com cria√ß√£o da m√©dia de valores aprovados para o porte MICRO por ano, sendo que o ano deve ser a partir de 2020.\n\ndf_aprovacoes[ANO > 2019, list(MEAN_MICRO = mean(MICRO)), by = ANO]\n\n    ANO MEAN_MICRO\n1: 2020   536.0065\n2: 2021   536.2352\n3: 2022   662.1226\n4: 2023   312.2800"
  },
  {
    "objectID": "pacotes_data_table.html#ordenando-dados",
    "href": "pacotes_data_table.html#ordenando-dados",
    "title": "17¬† Pacote data.table",
    "section": "17.6 Ordenando Dados",
    "text": "17.6 Ordenando Dados\nA fun√ß√£o setorder permite ordena√ß√£o da base de dados sem exigir atribui√ß√£o como usado com R base (df <- df[order(df$var),]).\n\ndf_aprovacoes |> head()\n\n    ANO MES    MICRO PEQUENA    MEDIA   GRANDE RAZAO_GRANDE_MICRO\n1: 1995   1 128.4699       0 10.18922 380.2330           2.959705\n2: 1995   2 106.3283       0 16.21161 495.5282           4.660361\n3: 1995   3 234.5488       0 13.69085 715.9591           3.052496\n4: 1995   4 125.2196       0 16.44511 403.9919           3.226267\n5: 1995   5 209.4168       0 20.88794 477.2529           2.278962\n6: 1995   6 122.5179       0 23.86818 473.2194           3.862450\n   RAZAO_GRANDE_PEQUENA RAZAO_GRANDE_MEDIA\n1:                  Inf           37.31717\n2:                  Inf           30.56625\n3:                  Inf           52.29471\n4:                  Inf           24.56609\n5:                  Inf           22.84825\n6:                  Inf           19.82637\n\nsetorder(df_aprovacoes, -ANO, MES)\ndf_aprovacoes |> head(n = 8)\n\n    ANO MES    MICRO   PEQUENA     MEDIA   GRANDE RAZAO_GRANDE_MICRO\n1: 2023   1 235.2636  654.6506 1048.4110 1337.163           5.683680\n2: 2023   2 528.9812 1639.7768 2111.9314 1088.138           2.057045\n3: 2023   3 260.0790  647.7431 1546.9274 1843.952           7.089969\n4: 2023   4 157.7072  501.0023 1190.8649 3445.090          21.844841\n5: 2023   5 119.9866  519.2932 1797.9574 2222.737          18.524876\n6: 2023   6 571.6626 1985.3709 3554.8101 6506.082          11.380983\n7: 2022   1 293.7928  412.8598  826.2161 1182.581           4.025222\n8: 2022   2 195.4029  571.3932  910.6876 1460.593           7.474776\n   RAZAO_GRANDE_PEQUENA RAZAO_GRANDE_MEDIA\n1:            2.0425595          1.2754186\n2:            0.6635891          0.5152336\n3:            2.8467333          1.1920093\n4:            6.8763948          2.8929308\n5:            4.2803128          1.2362571\n6:            3.2770111          1.8302194\n7:            2.8643651          1.4313220\n8:            2.5561957          1.6038352"
  },
  {
    "objectID": "pacotes_data_table.html#encadeamento",
    "href": "pacotes_data_table.html#encadeamento",
    "title": "17¬† Pacote data.table",
    "section": "17.7 Encadeamento",
    "text": "17.7 Encadeamento\nExiste a possibilidade de opera√ß√µes encadeadas. Esta opera√ß√µes s√£o √∫teis quando se deseja transforma uma vari√°vel rec√©m criada, por exemplo.\n\ndf_aprovacoes3 <- copy(df_aprovacoes)\ndf_aprovacoes3[, `:=`(DATA_ATUAL = Sys.Date(),\n                     ANO_ATUAL = format(DATA_ATUAL, '%y'))]\n\nError in eval(jsub, SDenv, parent.frame()): objeto 'DATA_ATUAL' n√£o encontrado\n\n\nSem o encadeamento n√£o √© poss√≠vel extrair o ano da vari√°vel DATA_ATUAL pois ela ainda n√£o foi criada.\n\ndf_aprovacoes4 <- copy(df_aprovacoes)\ndf_aprovacoes4[, DATA_ATUAL := Sys.Date()][,\n   ANO_ATUAL := format(DATA_ATUAL, '%y')]\n\nO encadeamento √© equivalente ao uso do pipe e o placeholder indicando o data table.\n\ndf_aprovacoes5 <- copy(df_aprovacoes)\ndf_aprovacoes5[, DATA_ATUAL := Sys.Date()] |> \n  _[, ANO_ATUAL := format(DATA_ATUAL, '%y')]\n\nidentical(df_aprovacoes4, df_aprovacoes5)\n\n[1] TRUE\n\n\n\nDowle e Srinivasan (2023)\n√öltima atualiza√ß√£o: 01/10/2023 - 18:19:38\n\n\n\n\nDowle, Matt, e Arun Srinivasan. 2023. data.table: Extension of ‚Äòdata.frame‚Äò."
  },
  {
    "objectID": "sobre_rstudio.html#o-que-√©-o-rstudio",
    "href": "sobre_rstudio.html#o-que-√©-o-rstudio",
    "title": "RStudio",
    "section": "O que √© o RStudio?",
    "text": "O que √© o RStudio?\nO RStudio √© um IDE (Integrated Development Environment) criado pela Posit para as linguagens R e Python. Apesar de n√£o ser necess√°rio para uiliza√ß√£o de R, o RStudio fornece muitas funcionalidades para programa√ß√£o. Nesta se√ß√£o ser√£o apresentados alguns de seus principais recursos.\n\n\n\n\n\nFigura¬†1: RStudio - Tela inicial\n\n\n\n\n\n\n\n\n\nFigura¬†2: About RStudio\n\n\n\n\n\nRStudio - User Guide\nIDE\n√öltima atualiza√ß√£o: 12/08/2023 - 20:23:16"
  },
  {
    "objectID": "rstudio_intro.html#layout",
    "href": "rstudio_intro.html#layout",
    "title": "18¬† Introdu√ß√£o ao RStudio",
    "section": "18.1 Layout",
    "text": "18.1 Layout\nStatus üü®üü®üü®\nO RStudio possui basicamente 4 pain√©is dimension√°veis e cada um deles pain√©is pode trazer uma s√©rie de abas. Voc√™ pode configurar a localiza√ß√£o de cada painel conforme sua prefer√™ncia nos menus: View > Panes > Pane Layout ou em Tools > Global Options > Pane Layout.\n\n\n\n\n\nFigura¬†18.1: Pane Layout\n\n\n\n\nDentro dos pain√©is Environment e Files podem ser adicionadas ou removidas diversas abas (basta marcar/desmarcar checkbox). Muitas delas ficam ocultas e s√£o ‚Äúchamadas‚Äù pelo RStudio apenas quando necess√°rias."
  },
  {
    "objectID": "rstudio_intro.html#console",
    "href": "rstudio_intro.html#console",
    "title": "18¬† Introdu√ß√£o ao RStudio",
    "section": "18.2 Console",
    "text": "18.2 Console\nNeste painel est√° embutido o R propriamente dito.\n\n\n\n\n\nFigura¬†18.2: Console"
  },
  {
    "objectID": "rstudio_intro.html#output",
    "href": "rstudio_intro.html#output",
    "title": "18¬† Introdu√ß√£o ao RStudio",
    "section": "18.3 Output",
    "text": "18.3 Output\nPainel com diversas sa√≠das fornecidas. Gr√°ficos (Plots), Estrutura de Pastas(Files), Ajuda (Help), Pacotes(Packages), etc aparecem neste painel. Este √© um painel muito √∫til para navega√ß√£o nos arquivos do projeto e visualiza√ß√£o/exporta√ß√£o de gr√°ficos.\n\n\n\n\n\nFigura¬†18.3: Files"
  },
  {
    "objectID": "rstudio_intro.html#environment",
    "href": "rstudio_intro.html#environment",
    "title": "18¬† Introdu√ß√£o ao RStudio",
    "section": "18.4 Environment",
    "text": "18.4 Environment\nApresenta os objetos criados no ambiente do R.\n\n\n\n\n\nFigura¬†18.4: Environment"
  },
  {
    "objectID": "rstudio_intro.html#source",
    "href": "rstudio_intro.html#source",
    "title": "18¬† Introdu√ß√£o ao RStudio",
    "section": "18.5 Source",
    "text": "18.5 Source\nAqui s√£o abertos os arquivos de c√≥digos (scripts, Rmarkdown, Quarto, SQL, etc).\n\n\n\n\n\nFigura¬†18.5: Source\n\n\n\n\n\nRStudio - User Guide\nIDE\n√öltima atualiza√ß√£o: 16/08/2023 - 20:02:32"
  },
  {
    "objectID": "rstudio_tools.html#install-packages",
    "href": "rstudio_tools.html#install-packages",
    "title": "19¬† Menu Tools",
    "section": "19.1 Install Packages",
    "text": "19.1 Install Packages\nNesta op√ß√£o √© aberta a janela para instala√ß√£o de pacotes.\n\n\n\n\n\nFigura¬†19.2: Install Packages\n\n\n\n\n\nInstall From: local de busca dos pacotes a serem instalados\n\nRepository: reposit√≥rio configurado\n\nPackages: nome dos pacotes a serem instalados. Podem ser escolhidos m√∫ltiplos pacotes, devendo ser separados por espa√ßo ou v√≠rgula\n\nPackage Archive File: op√ß√£o para busca de arquivo a partir da m√°quina do usu√°rio. Esta op√ß√£o habilita bot√£o para busca do pacote\n\nPackage archive: arquivo do pacote a ser instalado\n\n\n\n\n\n\n\n\nFigura¬†19.3: Install From\n\n\n\n\n\n\n\n\n\nFigura¬†19.4: Package Archive File\n\n\n\n\n\nInstall to Library: pasta de instala√ß√£o dos pacotes\nInstall Dependencies: marca√ß√£o para que seja feita instala√ß√£o de depend√™ncias dos pacotes selecionados."
  },
  {
    "objectID": "rstudio_tools.html#check-for-package-updates",
    "href": "rstudio_tools.html#check-for-package-updates",
    "title": "19¬† Menu Tools",
    "section": "19.2 Check for Package Updates",
    "text": "19.2 Check for Package Updates\nEste op√ß√£o abre a janela Update Packages, permitindo visualizar quais pacotes possuem vers√µes mais recentes. A coluna NEWS possibilita visualizar o arquivo com dados de atuializa√ß√µes feitas no pacote.\n\n\n\n\n\nFigura¬†19.5: Check for Package Updates"
  },
  {
    "objectID": "rstudio_tools.html#version-control",
    "href": "rstudio_tools.html#version-control",
    "title": "19¬† Menu Tools",
    "section": "19.3 Version Control",
    "text": "19.3 Version Control\nOferece op√ß√£o de controle de vers√µes de c√≥digo atrav√©s do Git ou SVN."
  },
  {
    "objectID": "rstudio_tools.html#terminal",
    "href": "rstudio_tools.html#terminal",
    "title": "19¬† Menu Tools",
    "section": "19.4 Terminal",
    "text": "19.4 Terminal\nPermite acesso ao terminal do sistema operacional a partir do RStudio.\n\n\n\n\n\nFigura¬†19.6: Terminal"
  },
  {
    "objectID": "rstudio_tools.html#background-jobs",
    "href": "rstudio_tools.html#background-jobs",
    "title": "19¬† Menu Tools",
    "section": "19.5 Background Jobs",
    "text": "19.5 Background Jobs\nFornece op√ß√µes para execu√ß√£o de ‚ÄòJobs‚Äô, basicamente scripts em R, em outra inst√¢ncia do R. Desta forma a sess√£o aberta no RStudio n√£o fica ocupada e permite que o usu√°rio continue seu trabalho. Esta op√ß√£o √© muito √∫til para processamentos mais demorados.\n\n\n\n\n\nFigura¬†19.7: Background Jobs"
  },
  {
    "objectID": "rstudio_tools.html#global-options",
    "href": "rstudio_tools.html#global-options",
    "title": "19¬† Menu Tools",
    "section": "19.6 Global Options",
    "text": "19.6 Global Options\nEsta op√ß√£o abre a janela Options do RStudio onde podem ser feitas as principais configura√ß√µes de comportamento da ferramenta.\n\n\n\n\n\nFigura¬†19.8: Global Options\n\n\n\n\n\n19.6.1 Geral > Basic\nNesta tela incial Geral > Basic podemos definir muitas caracter√≠sticas do RStudio, algumas das principais:\n\nR Sessions\n\nR Version: vers√£o a ser usada do R dentro do RStudio. Esta vers√£o pode ser alterada caso exista uma outra isntala√ß√£o no computador.\nRestore most recently opened project at startup: define se o projeto mais recente ser√° carregado ao inicializar.\nRestore previously open source documents at startup: define se arquivos de c√≥digo (sources) recentemente usados ser√£o carregados al inicializar.\n\nWorkspace\n\nRestore .RData into workspace at startup: define se ao ser inicializado o RStudio carregar√° o arquivo .RData do projeto. Esta op√ß√£o pode ser muito √∫til, pois resgata a sess√£o anterior onde ela foi fechada. Entretando caso sejam usados arquivos muito grandes o inicializa√ß√£o pode demorar.\nSave workspace to .RData on exit: o ‚Äúinverso‚Äù do anterior, define se os dados da sess√£o ser√£o salvas ao fechar o RStudio. As op√ß√µes s√£o: Always, Never e Ask.\n\nHistory\n\nAlways saves History: os comandos passados para o R ser√£o ou n√£o armazenados para consulta posterior?\nRemove duplicate entries: elimina as repeti√ß√µes, muitas vezes quando se efetuam testes os mesmos comandos s√£o executados diversas vezes.\n\nOther\n\nAutomatically notify me of RStudio updates: verificar e avisar o usu√°rio se existirem atualiza√ß√µes do RStudio.\n\n\n\n\n19.6.2 Appearance\nAqui s√£o disponibilizadas diversas configura√ß√µes visuais para o RStudio, inclusive permitindo a inclus√£o de um tema externo.\n\n\n\n\n\nFigura¬†19.9: Global Options - Appearance\n\n\n\n\n\nRStudio - User Guide\nIDE\n√öltima atualiza√ß√£o: 14/09/2023 - 17:31:28"
  },
  {
    "objectID": "sobre_estatistica.html#o-que-√©-estat√≠stica",
    "href": "sobre_estatistica.html#o-que-√©-estat√≠stica",
    "title": "Estat√≠stica",
    "section": "O que √© Estat√≠stica",
    "text": "O que √© Estat√≠stica\nPara Larson e Farber (2007), ‚Äòestat√≠sitica √© a ci√™ncia que se ocupa de coletar, organizar, analisar e interpretar dados a fim de tomar decis√µes‚Äô.\n\n√öltima atualiza√ß√£o: 24/08/2023 - 22:13:17\n\n\n\n\nLarson, Ron, e Betsy Farber. 2007. Estat√≠stica Aplicada. Prentice Hall."
  },
  {
    "objectID": "est_intro.html#dados-qualitativos",
    "href": "est_intro.html#dados-qualitativos",
    "title": "20¬† Introdu√ß√£o",
    "section": "20.1 Dados Qualitativos",
    "text": "20.1 Dados Qualitativos"
  },
  {
    "objectID": "est_intro.html#dados-quantitativos",
    "href": "est_intro.html#dados-quantitativos",
    "title": "20¬† Introdu√ß√£o",
    "section": "20.2 Dados Quantitativos",
    "text": "20.2 Dados Quantitativos"
  },
  {
    "objectID": "est_intro.html#par√¢metros",
    "href": "est_intro.html#par√¢metros",
    "title": "20¬† Introdu√ß√£o",
    "section": "20.3 Par√¢metros",
    "text": "20.3 Par√¢metros"
  },
  {
    "objectID": "est_intro.html#estat√≠sticas",
    "href": "est_intro.html#estat√≠sticas",
    "title": "20¬† Introdu√ß√£o",
    "section": "20.4 Estat√≠sticas",
    "text": "20.4 Estat√≠sticas"
  },
  {
    "objectID": "est_intro.html#popula√ß√£o",
    "href": "est_intro.html#popula√ß√£o",
    "title": "20¬† Introdu√ß√£o",
    "section": "20.5 Popula√ß√£o",
    "text": "20.5 Popula√ß√£o\nO termo popula√ß√£o √© usado em estat√≠stica no sentido de todo um conjunto de dados de interesse."
  },
  {
    "objectID": "est_intro.html#amostra",
    "href": "est_intro.html#amostra",
    "title": "20¬† Introdu√ß√£o",
    "section": "20.6 Amostra",
    "text": "20.6 Amostra\nAmostra √© a defini√ß√£o usada para fra√ß√µes de uma popula√ß√£o."
  },
  {
    "objectID": "est_intro.html#tipos-de-dados",
    "href": "est_intro.html#tipos-de-dados",
    "title": "20¬† Introdu√ß√£o",
    "section": "20.7 Tipos de Dados",
    "text": "20.7 Tipos de Dados\n\n20.7.1 Nominal\nDados do tipo nominal s√£o qualitativos, usados para nomea√ß√£o (r√≥tulos) de grupos, classes, categorias, etc. Nenhum c√°lculo matem√°tico pode ser feito sobre estes dados.\nUm exemplo bastante comum de dado nominal √© o sexo, geralmente descritos pelos valores F e M. Em R os dados nominais s√£o criados com a fun√ß√£o factor.\n\nsexos <- c('F', 'M')\ntypeof(sexos)  \n\n[1] \"character\"\n\nis.factor(sexos)\n\n[1] FALSE\n\nsexos <- factor(c('F', 'M'))\nis.factor(sexos)\n\n[1] TRUE\n\ntypeof(sexos)\n\n[1] \"integer\"\n\nclass(sexos)\n\n[1] \"factor\"\n\n\nNote que n√∫meros podem ser usados como dados nominais e ainda assim n√£o podem ser feitas opera√ß√µes matem√°ticas sobre eles.\n\nsexos <- factor(c('1', '2'))\nsexos + 2\n\nWarning in Ops.factor(sexos, 2): '+' not meaningful for factors\n\n\n[1] NA NA\n\n\n\n\n20.7.2 Ordinal\n\n\n20.7.3 Intervalar\n\n\n20.7.4 Raz√£o\n\nLarson e Farber (2007)\nR Core Team (2023)\n√öltima atualiza√ß√£o: 24/09/2023 - 18:59:28\n\n\n\n\nLarson, Ron, e Betsy Farber. 2007. Estat√≠stica Aplicada. Prentice Hall.\n\n\nR Core Team. 2023. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/."
  },
  {
    "objectID": "sobre_cd.html#defini√ß√µes",
    "href": "sobre_cd.html#defini√ß√µes",
    "title": "Ci√™ncia de Dados",
    "section": "Defini√ß√µes",
    "text": "Defini√ß√µes\nSegundo Provost e Fawcett (Provost e Fawcett 2016, p 3) ‚Äòdata science √© um conjunto de princ√≠pios fundamentais que norteiam a extra√ß√£o de conhecimentos a partir de dados‚Äô.\nUma defini√ß√£o da IBM (2023) para Ci√™ncia de Dados:\n‚ÄòA ci√™ncia de dados combina matem√°tica e estat√≠stica, programa√ß√£o especializada, an√°lise avan√ßada, intelig√™ncia artificial (IA) e aprendizado de m√°quina com conhecimento em dom√≠nio espec√≠fico para revelar insights acion√°veis ocultos nos dados de uma organiza√ß√£o‚Äô.\nUma defini√ß√£o mais sucinta da AWS (2023):\n‚ÄòA ci√™ncia de dados √© o estudo dos dados para extrair insights significativos para os neg√≥cios‚Äô.\n\n√öltima atualiza√ß√£o: 12/08/2023 - 20:28:18\n\n\n\n\nAWS. 2023. \"O que √© ci√™ncia de dados?\" 2023. https://aws.amazon.com/pt/what-is/data-science/.\n\n\nIBM. 2023. \"What is data science?\" 2023. https://www.ibm.com/topics/data-science.\n\n\nProvost, Foster, e Tom Fawcett. 2016. DataScience para Neg√≥cios. Alta Books."
  },
  {
    "objectID": "cd_vies_var.html",
    "href": "cd_vies_var.html",
    "title": "21¬† Trade-Off Vi√©s x Vari√¢ncia",
    "section": "",
    "text": "Status: ‚¨õ‚¨õ‚¨õ\n\n√öltima atualiza√ß√£o: 12/08/2023 - 20:23:23"
  },
  {
    "objectID": "bases_dados.html#banco-central-do-brasil",
    "href": "bases_dados.html#banco-central-do-brasil",
    "title": "Bases de Dados",
    "section": "Banco Central do Brasil",
    "text": "Banco Central do Brasil\n\nTaxa de juros - Selic acumulada no m√™s\nAcesso em: 28/08/2023 - 20:15\nTaxa de juros que representa a taxa m√©dia ajustada das opera√ß√µes compromissadas com prazo de um dia √∫til lastreadas com t√≠tulos p√∫blicos federais custodiados no Sistema Especial de Liquida√ß√£o e de Cust√≥dia (Selic). Divulga√ß√£o em % a.m."
  },
  {
    "objectID": "bases_dados.html#bndes",
    "href": "bases_dados.html#bndes",
    "title": "Bases de Dados",
    "section": "BNDES",
    "text": "BNDES\n\nPor porte de empresa - Aprova√ß√µes\nAcesso em: 22/08/2023 - 20:20\nDicion√°rio de dados.\nDescri√ß√£o: Estat√≠sticas de aprova√ß√µes de financiamentos considerando porte do cliente, setor, distribui√ß√£o regional, grupo de produtos e outros.\n\n√öltima atualiza√ß√£o: 21/09/2023 - 19:59:48"
  },
  {
    "objectID": "convencoes.html#marca√ß√µes-no-texto",
    "href": "convencoes.html#marca√ß√µes-no-texto",
    "title": "Conven√ß√µes",
    "section": "Marca√ß√µes no Texto",
    "text": "Marca√ß√µes no Texto\nA fim de facilitar a leitura e evidenciar itens importantes no texto, ser√£o adotadas as seguintes marca√ß√µes:\n\n\n\n\n\n\n\n\nTipo do Texto\nMarca√ß√£o\nExemplo\n\n\n\n\nFun√ß√µes, argumentos, operadores do R\nC√≥digo\nprint\n\n\nObjetos criados no R (vetores, data frames, vari√°veis de data frames) e termos relevantes\nNegrito\ndf_mtcars\n\n\nPalavras de l√≠ngua estrangeira\nIt√°lico\npipe"
  },
  {
    "objectID": "convencoes.html#nomes-de-objetos",
    "href": "convencoes.html#nomes-de-objetos",
    "title": "Conven√ß√µes",
    "section": "Nomes de Objetos",
    "text": "Nomes de Objetos\nAbaixo conven√ß√µes a serem usadas neste material.\n\nConven√ß√µes de c√≥digo\n\n\n\n\n\n\n\nTipo Objeto\nConven√ß√£o\nExemplo\n\n\n\n\nData.frame, tibble ou data.table\nsnake_case iniciado por df (data frame)\ndf_clientes\n\n\nVari√°veis de datasets\nSCREAMING_SNAKE_CASE\nNOME_CLIENTE\n\n\nFun√ß√µes\ncamelCase iniciado por fn, sendo a primeira palavra ap√≥s fn um verbo\nfnBuscarClientes\n\n\nDemais (vetores, listas, etc.)\nsnake_case\nnomes_cidades"
  },
  {
    "objectID": "convencoes.html#status-do-material",
    "href": "convencoes.html#status-do-material",
    "title": "Conven√ß√µes",
    "section": "Status do Material",
    "text": "Status do Material\nPara indica√ß√£o de status do material apresentado ser√£o usados os s√≠mbolos abaixo no topo de cada cap√≠tulo:\n\n\n\nIndicador\nEstrutura\nConte√∫do\nStatus Geral\n\n\n\n\n‚¨õ‚¨õ‚¨õ\nn√£o iniciado\nn√£o iniciado\nn√£o iniciado\n\n\nüü®‚¨õüü®\nincipiente\nn√£o criado\nincipiente\n\n\nüü®üü®üü®\nincipiente\nincipiente\nincipiente\n\n\nüü®üü¶üü®\nincipiente\nem revis√£o\nincipiente\n\n\nüü¶üü¶üü¶\nem revis√£o\nem revis√£o\nem revis√£o\n\n\nüü¶üü©üü¶\nem revis√£o\namadurecido\nem revis√£o\n\n\nüü¶üü®üü®\nem revis√£o\nincipiente\nincipiente\n\n\nüü®üü©üü®\nincipiente\namadurecido\nincipiente\n\n\nüü®üü•üü•\nincipiente\ndesatualizado\ndesatualizado\n\n\nüü©üü®üü®\namadurecido\nincipiente\nincipiente\n\n\nüü©üü¶üü¶\namadurecido\nem revis√£o\nem revis√£o\n\n\nüü©üü•üü•\namadurecido\ndesatualizado\ndesatualizado\n\n\nüü©üü©üü©\namadurecido\namadurecido\namadurecido\n\n\n\n\nüü® incipiente: rec√©m iniciado, √© o status mais vol√°til. Ap√≥s melhores defini√ß√µes passa a ser marcado como üü¶.\nüü¶ em revis√£o: em altera√ß√µes (grandes) para melhorias. Ap√≥s este status ser√° marcado como üü©.\nüü© amadurecido: j√° passado por revis√£o. Pode sofrer pequenas altera√ß√µes e atualiza√ß√µes. Caso se identifique que necessite de grandes altera√ß√µes ser√° marcado como:\n\nüü¶ para revis√£o por decis√£o\nüü• para revis√£o por desatualiza√ß√£o\n\nüü• desatualizado: necessita ser reescrito por for√ßa maior, como desatualiza√ß√£o de conceitos ou c√≥digos.\n‚¨õ n√£o iniciado: serve como marca√ß√£o de ‚Äòtodo‚Äô. usado para se√ß√µes que se entendem necess√°rias mas que ainda n√£o foram iniciadas.\n\n\n√öltima atualiza√ß√£o: 18/09/2023 - 19:54:39"
  },
  {
    "objectID": "referencias.html",
    "href": "referencias.html",
    "title": "Refer√™ncias",
    "section": "",
    "text": "AWS. 2023. ‚ÄúO Que √© Ci√™ncia de Dados?‚Äù 2023. https://aws.amazon.com/pt/what-is/data-science/.\n\n\nDataMentor. n.d. ‚ÄúR Repeat Loop.‚Äù https://www.datamentor.io/r-programming/repeat-loop.\n\n\nDowle, Matt, and Arun Srinivasan. 2023. Data.table: Extension of\n‚ÄòData.frame‚Äò.\n\n\nGrolemund, Garrett. 2014. Hands-on Programming with r.\nO‚ÄôReilly. https://rstudio-education.github.io/hopr/.\n\n\nIBGE. n.d. ‚ÄúIBGE - Cidades.‚Äù https://cidades.ibge.gov.br/.\n\n\nIBM. 2023. ‚ÄúWhat Is Data Science?‚Äù 2023. https://www.ibm.com/topics/data-science.\n\n\nKassambara, Alboukadel. n.d. ‚ÄúStatistical Tools for\nHigh-Throughput Data Analysis.‚Äù http://www.sthda.com/english/.\n\n\nLarson, Ron, and Betsy Farber. 2007. Estat√≠stica Aplicada.\nPrentice Hall.\n\n\nMastropietro, Daniel. 2019. ‚ÄúGetting an Environment‚Äôs Name in r:\nThe Envnames Package.‚Äù 2019. https://www.r-bloggers.com/2019/05/getting-an-environments-name-in-r-the-envnames-package.\n\n\nProvost, Foster, and Tom Fawcett. 2016. DataScience Para\nNeg√≥cios. Alta Books.\n\n\nR Core Team. 2023a. An Introduction to r. R Foundation for\nStatistical Computing. https://cran.r-project.org/doc/manuals/r-release/R-intro.html.\n\n\n‚Äî‚Äî‚Äî. 2023b. R Language Definition. R Foundation for Statistical\nComputing. https://cran.r-project.org/doc/manuals/r-release/R-lang.html.\n\n\n‚Äî‚Äî‚Äî. 2023c. R: A Language and Environment for Statistical\nComputing. Vienna, Austria: R Foundation for Statistical Computing.\nhttps://www.R-project.org/.\n\n\n‚Äî‚Äî‚Äî. 2023d. ‚ÄúR: A Language and Environment for Statistical\nComputing.‚Äù Vienna, Austria: R Foundation for Statistical\nComputing. 2023. https://cran.r-project.org/doc/manuals/r-devel/NEWS.html.\n\n\nSchmuller, Joseph. 2019. An√°lise Estat√≠stica Com r. Alta Books.\n\n\nWickham, Hadley. 2023/04/21. ‚ÄúDifferences Between the Base r and\nMagrittr Pipes.‚Äù 2023/04/21. https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/.\n\n\nWikipedia, the free encyclopedia. 2023. ‚ÄúNaming Convention\n(Programming).‚Äù 2023. https://en.wikipedia.org/wiki/Naming_convention_(programming)."
  }
]