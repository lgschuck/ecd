---
engine: knitr
---

# FunÃ§Ãµes

[Status](convencoes.html#status-do-material) ğŸŸ¦ğŸŸ¨ğŸŸ¨

## Criando FunÃ§Ãµes

FunÃ§Ãµes podem ser criadas atravÃ©s do comando `function`.

```{r}

fnSomar <- function(param1, param2) {
  param1 + param2
}

fnSomar(5, 8)
```

Para visualizar o cÃ³digo de uma funÃ§Ã£o podemos usar seu nome sem os parÃªnteses.

```{r}
fnSomar
```

### Argumentos - Valores PadrÃ£o

## FunÃ§Ã£o x Ambiente

As funÃ§Ãµes possuem seus prÃ³prios ambientes. Abaixo uma funÃ§Ã£o criada para exibir seu ambiente e seu ambiente 'pai'.

```{r}
fnExibirEnvs <- function() {
  print('Ambiente atual:')
  print(environment())
  
  print(paste(
    'Ambiente Pai:', 
    environmentName(parent.env(environment()
                               ))))
}

fnExibirEnvs()
```

### Objetos no Ambiente da FunÃ§Ã£o

Objetos que sÃ£o criados dentro de uma funÃ§Ã£o existem apenas dentro do ambiente desta funÃ§Ã£o. Abaixo um exemplo de variÃ¡vel criada dentro do ambiente da funÃ§Ã£o e que nÃ£o Ã© acessÃ­vel no **GlobalEnv**.

```{r, error = T}
fnTeste <- function(){
  y <- 15
  x <- 80
  ls()
}

fnTeste()
y
```

Objetos que existam no ambiente corrente nÃ£o sÃ£o alterados caso por estarem dentro do ambiente de fuma funÃ§Ã£o. A variÃ¡vel **x** Ã© inicializada com valor 10 no ambiente corrente. Ela pode ser acessada pela funÃ§Ã£o mesmo nÃ£o sendo informada em algum argumento.

```{r, error = T}
x <- 10

fnTeste2 <- function(){
  y <- 15
  x + y
}

fnTeste2()
y
x

```

Entretando, caso a variÃ¡vel **x** seja alterada no ambiente da funÃ§Ã£o ela nÃ£o Ã© alterada no ambiente corrente.

```{r}
x <- 10

fnTeste3 <- function(){
  y <- 15
  x <- 80
  x + y
}

fnTeste3()
x
```

#### Operador de Super AtribuiÃ§Ã£o (`<<-`)

Usando o operador de super atribuiÃ§Ã£o `<<-` Ã© possÃ­vel alterar objetos que estejam fora do ambiente de uma funÃ§Ã£o. Neste caso a variÃ¡vel **x** Ã© atualizada no ambiente que estÃ¡ acima do ambiente da funÃ§Ã£o. A variÃ¡vel **y** continua nÃ£o existindo fora da funÃ§Ã£o, porÃ©m agora a variÃ¡vel **x** Ã© atualizada em ambos ambientes.

```{r, error = T}
ls(envir = globalenv())
x
fnTeste4 <- function(){
  y <- 15
  x <<- 80
  x + y
}

fnTeste4()
y
x

```

Apesar de, neste caso, produzirem o mesmo retorno, as funÃ§Ãµes `fnTeste3` e `fnTeste4` impactam de formas distintas o ambiente do R.

## Retorno

Na criaÃ§Ã£o de funÃ§Ãµes, Ã© possÃ­vel utilizar o comando `return` a fim de definir o que serÃ¡ retornado pela funÃ§Ã£o.

```{r}
fnRetorno <- function(){
  return('Este Ã© o retorno da funÃ§Ã£o!')
}
fnRetorno()
```

## Recursividade

Como outras linguagens de programaÃ§Ã£o, R permite o uso recursivo de funÃ§Ãµes.

```{r}
fnRecursividade <- function(x){
  if(x > 100) return('X ultrapassou 100. Fim!')
  x <- x + 1
  print(paste('Valor atual de x:', x))
  fnRecursividade(x)
}

fnRecursividade(95)
```


### Buscar Ambiente Pai (Recursivamente)

Abaixo funÃ§Ã£o que busca recursivamente os ambientes e seus 'pais' atÃ© que se chege no 'Ãºltimo' ambiente, o **R_EmptyEnv**.

```{r}

fnBuscarEnvsPai <- function(ambiente, nivel = 1){
 
    if(environmentName(ambiente)=="R_EmptyEnv"){
    return ('Ambiente informado Ã© R_EmptyEnv. Fim da busca.')
    }
    
    marcacao <- ''
    for (i in 1:nivel){
      
      marcacao <- paste0(' ', marcacao)
    }
    
    writeLines(paste0(marcacao, '|-- ', environmentName(parent.env(ambiente))))

    nivel <- nivel + 1
    fnBuscarEnvsPai(parent.env(ambiente), nivel = nivel)

}
fnBuscarEnvsPai(globalenv())

```

## FunÃ§Ãµes GenÃ©ricas

FunÃ§Ãµes genÃ©ricas sÃ£o funÃ§Ãµes que contÃ©m mÃ©todos associados. Os mÃ©todos sÃ£o chamados de acordo com a classe do objeto informado.

Por exemplo a funÃ§Ã£o print possui diversos mÃ©todos associados. Quando um **data.frame** Ã© informado como argumento o R chama a funÃ§Ã£o `print.data.frame`, ao passo que se o argumento da funÃ§Ã£o for uma data o mÃ©todo invocado Ã© `print.Date`.
```{r}
mtcars[1:2, 1:5] |> print.data.frame()
Sys.Date() |> print.Date()

# o mesmo que
mtcars[1:2, 1:5] |> print()
Sys.Date() |> print()
```

## Operadores UnÃ¡rios

A operador de soma `+` Ã© na verdade uma funÃ§Ã£o e Ã© em geral utilizado na forma de operador unÃ¡rio, ou seja, recebe os valores da direita e da esquerda como seus argumentos. Veja o cÃ³digo que Ã© reotrnado quando a funÃ§Ã£o Ã© chamada sem informaÃ§Ã£o de argumentos e parÃªnteses:

```{r}
`+`
```

VocÃª poderia usar a funÃ§Ã£o de somar de outra formacom a funÃ§Ã£o `do.call` ou mesmo chamando esta com uso de crÃ¡ses. Obviamente nÃ£o Ã© a forma mais sucinta, mas serve para demosntrar que `+` nÃ£o passa de uma funÃ§Ã£o como as demais.

```{r}
do.call(`+`, list(1,3))

`+`(8,7)
```

O mais interessante Ã© que vocÃª tambÃ©m pode criar funÃ§Ãµes para serem usadas na forma de operador unÃ¡rio. Para isto basta criÃ¡-la com **%** ao inÃ­cio e ao fim do nome da funÃ§Ã£o. Abaixo as duas formas de uso desta funÃ§Ã£o:

```{r}
`%fnSomar2%`<- function(x, y){
  x + y
}

10 %fnSomar2% 15

`%fnSomar2%`(2,5)
```

------------------------------------------------------------------------

@grolemund2014

Ãšltima atualizaÃ§Ã£o: `r format(file.info('r_funcoes.qmd')$mtime, '%d/%m/%Y - %H:%M:%S')`
