# FunÃ§Ãµes

[Status](convencoes.html#status-do-material) ğŸŸ¦ğŸŸ¨ğŸŸ¨

## Criando FunÃ§Ãµes

FunÃ§Ãµes podem ser criadas atravÃ©s do comando `function`.

```{r}

fnSomar <- function(param1, param2) {
  param1 + param2
}

fnSomar(5, 8)
```

Para visualizar o cÃ³digo de uma funÃ§Ã£o podemos usar seu nome sem os parÃªnteses.

```{r}
fnSomar
```

## FunÃ§Ã£o x Ambiente

As funÃ§Ãµes possuem seus prÃ³prios ambientes. Abaixo uma funÃ§Ã£o criada para exibir seu ambiente e seu ambiente 'pai'.

```{r}
fnExibirEnvs <- function() {
  print('Ambiente atual:')
  print(environment())
  
  print(paste(
    'Ambiente Pai:', 
    environmentName(parent.env(environment()
                               ))))
}

fnExibirEnvs()
```

### Objetos no Ambiente da FunÃ§Ã£o

Objetos que sÃ£o criados dentro de uma funÃ§Ã£o existem apenas dentro do ambiente desta funÃ§Ã£o. Abaixo um exemplo de variÃ¡vel criada dentro do ambiente da funÃ§Ã£o e que nÃ£o Ã© acessÃ­vel no GlobalEnv.

```{r, error = T}
fnTeste <- function(){
  y <- 15
  x <- 80
  ls()
}

fnTeste()
y
```

Objetos que existam no ambiente corrente nÃ£o sÃ£o alterados caso por estarem dentro do ambiente de fuma funÃ§Ã£o. A variÃ¡vel x Ã© inicializada com valor 10 no ambiente corrente. Ela pode ser acessada pela funÃ§Ã£o memso nÃ£o sendo informada em algum argumento.

```{r, error = T}
x <- 10

fnTeste2 <- function(){
  y <- 15
  x + y
}

fnTeste2()
y
x

```

Entretando, caso a variÃ¡vel x seja alterada no ambiente da funÃ§Ã£o ela nÃ£o Ã© alterada no ambiente corrente.

```{r}
x <- 10

fnTeste3 <- function(){
  y <- 15
  x <- 80
  x + y
}

fnTeste3()
x
```

#### Operador `<<-`

Usando o operador de atribuiÃ§Ã£o `<<-` Ã© possÃ­vel alterar objetos que estejam fora do ambiente de uma funÃ§Ã£o. Neste caso a variÃ¡vel x Ã© atualizada no Environment que estÃ¡ acima do Environment da funÃ§Ã£o. A variÃ¡vel y continua nÃ£o existindo fora da funÃ§Ã£o, porÃ©m agora a variÃ¡vel x Ã© atualizada tanto no ambiente da funÃ§Ã£o como no ambiente acima deste.

```{r, error = T}
ls(envir = globalenv())
x
fnTeste4 <- function(){
  y <- 15
  x <<- 80
  x + y
}

fnTeste4()
y
x

```

Apesar de, neste caso, produzirem o mesmo retorno, as funÃ§Ãµes `fnTeste3` e `fnTeste4` impactam de formas distintas o ambiente do R.

------------------------------------------------------------------------

@grolemund2014

Ãšltima atualizaÃ§Ã£o: `r format(file.info('funcoes.qmd')$mtime, '%d/%m/%Y - %H:%M:%S')`
