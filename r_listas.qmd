---
engine: knitr
---

# Listas

[Status](convencoes.html#status-do-material) ğŸŸ¨ğŸŸ¨ğŸŸ¨

## IntroduÃ§Ã£o

**Listas** sÃ£o objetos que armazenam outros objetos, podendo ser de variados tipos.

## Criando Listas

Abaixo um exemplo de criaÃ§Ã£o de **lista** atravÃ©s da funÃ§Ã£o `list`. Os seus componentes serÃ£o um data frame, um vetor de nÃºmeros de 1 atÃ© 10 e um vetor com as letras do alfabeto.

```{r}
lista_1 <- list(mtcars, 1:10, letters)
```

## Acessando Componentes

Para acessar os elementos das listas pode-se usar o operador `[[â€¦]]`.

```{r}
class(lista_1[[1]])
```

Deve-se tomar cuidado ao usar o operador `[]`, pois este operador Ã© genÃ©rico e nÃ£o retorna o componente 1 da lista em sua "forma" original e sim de uma lista contendo o objeto da lista original. Desta forma, nÃ£o Ã© possÃ­vel fazer extraÃ§Ã£o de objetos do vetor retornado.

```{r}
class(lista_1[1])
lista_1[2][5]
```

Usando `[[...]]` o objeto retornado mantÃ©m sua forma original e a extraÃ§Ã£o ocorre normalmente.

```{r}
class(lista_1[[2]])
lista_1[[2]][5]
```

## Nomeando Componentes

Os componentes das listas podem ser nomeados com a funÃ§Ã£o `names`.

```{r}
names(lista_1) <- c('df_mtcars', 'vetor', 'letras')
lista_1$letras

identical(lista_1$letras, lista_1[[3]])
identical(lista_1$letras, lista_1[['letras']])
```

### Nomes Abreviados

Para acessar componentes de listas nomeadas Ã© possÃ­vel informar seus nomes de forma abreviada.

```{r}
lista_1$le
#equivalente a 
lista_1$letras
```

Veja que a abreviaÃ§Ã£o deve identificar de forma exclusiva os componentes, caso contrÃ¡rio o valor retornado Ã© `NULL`. A **lista_3** possui dois componentes que comeÃ§am com 'le' e assim nÃ£o Ã© possÃ­vel fazer a seleÃ§Ã£o.

```{r}
lista_3 <- list(letras = letters[1:10], letras_maiusculas = LETTERS[1:10])

lista_3$le

```

------------------------------------------------------------------------

@introduction_r

Ãšltima atualizaÃ§Ã£o: `r format(file.info('r_listas.qmd')$mtime, '%d/%m/%Y - %H:%M:%S')`
