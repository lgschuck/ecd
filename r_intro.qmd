# Introdu√ß√£o

[Status](convencoes.html#status-do-material) üü®üü®üü®

Este cap√≠tulo tem como objetivo fornecer uma vis√£o inicial m√≠nima para que o usu√°rio possa dar os primeiros passos na linguagem.

## Iniciando o R...Studio

R √© uma linguagem de programa√ß√£o e n√£o est√° focada em oferecer uma interface sofisticada de intera√ß√£o com o usu√°rio. Este papel fica por conta de outras ferramentas, como o **RStudio**, o **IDE** mais usado para a linguagem. Na pr√°tica "ningu√©m" usa o R puro para desenvolver seus projetos.

Desta forma usaremos o RStudio como ferramenta de desenvolvimento, pois ela ir√° nos fornecer muitas funcionalidades como preenchimento de c√≥digo (*code completion*), janelas para instalar pacotes, janelas com arquivos de scripts, navega√ß√£o por pastas, visualiza√ß√£o e exporta√ß√£o de gr√°fico e claro comunica√ß√£o direta com o R.

Ao longo deste livro ser√£o usadas diversas funcionalidades do RStudio. Por√©m o foco ser√° sempre no conte√∫do, pois o detalhamento das principais funcionalidades do RStudio √© tratada em se√ß√£o [espec√≠fica](sobre_rstudio.html "RStudio").

```{r, label = 'fig-r-intro-rstudio-layout', fig.cap = "Tela Inicial do RStudio", echo = FALSE}
knitr::include_graphics('images/rstudio/rstudio_layout.png')
```

Neste cap√≠tulo focaremos no painel **Console**, que "abriga" o R e no **Source**, que permite utiliza√ß√£o de scripts.

```{r, label = 'fig-r-intro-rstudio-console', fig.cap = "Aba Console", echo = FALSE}
knitr::include_graphics('images/r/intro/console.png')
```

```{r, label = 'fig-r-intro-rstudio-source', fig.cap = "Aba Source", echo = FALSE}
knitr::include_graphics('images/r/intro/source.png')
```

::: callout-note
### Outros IDE's

Al√©m do RStudio existem outras ferramentas para utiliza√ß√£o em conjunto com R, entre elas: [Jupyter](https://jupyter.org/), [VS Code](https://code.visualstudio.com/docs/languages/r) e [RKWard](https://rkward.kde.org/).
:::

## Console do R

A tela inicial do R em si √© um console, onde s√£o passados comandos e seu interpratador os executa e, se for o caso, exibe sa√≠das. O cursor fica posicionado ao lado do s√≠mbolo do *prompt* do R, `>`. Este s√≠mbolo indica que o sistema est√° pronto para receber novo comando.

```{r, label = 'fig-r-intro-tela-inicial', fig.cap = "Tela Inicial", echo = FALSE}
knitr::include_graphics('images/r/intro/tela_inicial.png')
```

### Executando Comandos

A tela inicial fornece algumas sugest√µes para consulta a dados sobre R, como licen√ßa da linguagem, cita√ß√£o, ajudas, etc. Usaremos como exemplo inicial o comando `license()`. Ap√≥s a digita√ß√£o do comando devemos confirmar com **ENTER** para que o R execute o comando informado e exiba na tela o resultado, no caso a licen√ßa da pr√≥pria linguagem. Ap√≥s a execu√ß√£o um novo sinal do *prompt* √© exibido em aguardo de um poss√≠vel pr√≥ximo comando.

```{r, label = 'fig-r-intro-tela-inicial-licenca', fig.cap = "Tela Inicial - Licen√ßa", echo = FALSE}
knitr::include_graphics('images/r/intro/tela_inicial_licenca.png')
```

Podemos digitar `q()`, por exemplo, que √© a fun√ß√£o que efetua o encerramento do R.

```{r, label = 'fig-r-intro-tela-inicial-quit', fig.cap = "Tela Inicial - Quit (sair)", echo = FALSE}
knitr::include_graphics('images/r/intro/tela_inicial_quit.png')
```

Agora considere um cen√°rio diferente, onde executamos o comando `license()` seguido do comando `citation()` (que mostra como deve ser feita a cita√ß√£o da Linguagem R). Conforme os comandos forem sendo passados, o console vai sendo preenchido com estes comandos e suas respectivas sa√≠das. A medida que a tela vai ficando "cheia" os dados exibidos no topo v√£o "sumindo" para dar lugar aos mais recentes, na parte inferior.

```{r, label = 'fig-r-intro-tela-inicial-atualizacao-console', fig.cap = "Tela Inicial - Atualiza√ß√£o do Console", echo = FALSE}
knitr::include_graphics('images/r/intro/tela_inicial_atualizacao_console.png')
```

::: callout-tip
## Buscando Comandos Anteriores

Para buscar comandos executados anteriormente, pode-se usar a seta para cima do teclado. Os comandos v√£o sendo apresentados do mais recente ao mais antigo.
:::

### Erros

Sempre que ocorrer algum erro na execu√ß√£o de um comando ser√° exibida no console uma mensagem com o termo **Error**. Muitas vezes a mensagem de erro auxilia na identifica√ß√£o da causa do erro reportado. Abaixo um exemplo com erro retornado pelo R ap√≥s a tentativa de execu√ß√£o de uma fun√ß√£o inexistente (erro na digita√ß√£o do comando).

```{r, error = T}
citatin()
```

## Trabalhando com Scripts

Scripts s√£o arquivos de texto que recebem c√≥digos e conforme desejo do usu√°rio s√£o enviados ao console para execu√ß√£o. Na pr√°tica usar o console diretamente √© √∫til para pequenas opera√ß√µes. No Rstudio voc√™ pode criar um script em File \> New File \> R Script. O arquivo de script ser√° aberto no painel **Source**.

```{r, label = 'fig-r-intro-script1', fig.cap = "Script - Painel Source", echo = FALSE}
knitr::include_graphics('images/r/intro/script1.png')
```

Para executar comandos de um arquivo de script voc√™ pode usar atalhos de teclado (Ctrl + Enter) ou atrav√©s do bot√£o Run no topo superior direito da aba Source. Ambas op√ß√µes executam ou a linha corrente ou a parte do texto selecionada.

```{r, label = 'fig-r-intro-source-run', fig.cap = "Source - Bot√£o Run", echo = FALSE}
knitr::include_graphics('images/r/intro/source_run.png')
```

```{r, label = 'fig-r-intro-script2', fig.cap = "Script - C√≥digo a Processar", echo = FALSE}
knitr::include_graphics('images/r/intro/script2.png')
```

```{r, label = 'fig-r-intro-console-script2', fig.cap = "Console - Resultado", echo = FALSE}
knitr::include_graphics('images/r/intro/console_script2.png')
```

### Coment√°rios

R aceita coment√°rios em seu c√≥digo atrav√©s do caractere sustenido (*hashtag*), '**\#'**. Coment√°rios s√£o muito importantes para facilitar a leitura do c√≥digo posteriormente. Uma forma interessante de organizar o seu c√≥digo √© criar uma linha de coment√°rio para separa√ß√£o de etapas de processamento. Perceba que as linhas de coment√°rios foram passadas para o console e este n√£o emitiu nenhuma mensagem, tampouco efetuou qualquer opera√ß√£o.

::: callout-tip
### Porqu√™...

Em opera√ß√µes mais complexas procure colocar coment√°rios que expliquem os motivos de se executar alguma opera√ß√£o e n√£o o que o c√≥digo est√° fazendo. Foque no **'porqu√™'** de cada opera√ß√£o e n√£o no **'o que'**.
:::

## Objetos

R opera sobre entidades que s√£o conhecidas como **objetos** [@introduction_r, cap 3]. Existem diversos tipos de objetos em R como listas, matrizes, bases de dados, s√©ries temporais, gr√°ficos, modelos, etc. Neste cap√≠tulo inicial ser√£o utilizados os **vetores**, pois s√£o as estruturas mais b√°sicas. As opera√ß√µes anteriores, por exemplo, de soma e multiplica√ß√£o, foram feitas sobre n√∫meros, que em R s√£o vetores.

::: callout-note
## Vari√°veis

Muitas vezes objetos em R s√£o chamados de **vari√°veis**, no sentido de que vari√°veis armazenam dados. Isto ocorre principalmente para objetos que armazenam um √∫nico valor, como um √∫nico n√∫mero ou texto.
:::

### Vetores (At√¥micos)

Vetores s√£o entidades que armazenam dados em posi√ß√µes [@r_language_definition, cap 2]. Os vetores s√£o ditos **at√¥micos**, pois seus dados s√£o todos do mesmo tipo. Voc√™ pode pensar em um vetor como uma "local" onde ser√£o armazenados dados. Os vetores podem ser de um dos 6 tipos abaixo:

| Tipo        | Descri√ß√£o                         | Exemplo               |
|-------------|-----------------------------------|-----------------------|
| *logical*   | valor l√≥gico                      | TRUE, FALSE           |
| *integer*   | n√∫mero inteiro                    | 1                     |
| *double*    | n√∫mero com ponto flutuante (real) | 1.5                   |
| *complex*   | n√∫mero complexo                   | 1i                    |
| *character* | texto (*strings*)                 | 'R √© software livre.' |
| *raw*       | bytes                             |                       |

: Tipos de Vetores

## Cria√ß√£o de Objetos

Para cria√ß√£o de objetos no R s√£o usados os operadores de atribui√ß√£o, `<-` e `=`. O operador mais usado √© o `<-`. Assim para cria√ß√£o de um objeto do tipo vetor, pode ser usado o c√≥digo abaixo:

```{r}
objeto1 <- 10 # atribui valor 10
```

Para cria√ß√£o de vari√°veis do tipo texto, devem ser usadas aspas, simples ou duplas. Aqui o **objeto2** foi criado com uso de aspas para que o R trate o valor como *character*.

```{r}
objeto2 = 'texto' # atribui texto
```

## Opera√ß√µes com Objetos

Objetos podem ser atualizados/alterados, novamente, com o operador `<-`. No exemplo abaixo vamos criar um vetor de nome **objeto3** com o operador `:`, que cria sequ√™ncias de valores. Na sequ√™ncia o **objeto3** ser√° atualizado recebendo seu pr√≥prio conte√∫do acrescido do valor 10.

```{r}
objeto3 <- 1:5
objeto3
objeto3 <- objeto3 + 10
```

O vetor objeto3 foi criado com 5 posi√ß√µes, armazenando os valores de 1 a 5. Podemos acessar, por exemplo a terceira posi√ß√£o do vetor, atrav√©s do operador de extra√ß√£o **\[** em combina√ß√£o com o √≠ndice do vetor.

```{r}
objeto3[3] # exibe terceiro elemento
objeto3[3] + 10 # somando valor
```

Note que sem o operador de atribui√ß√£o o valor da posi√ß√£o 3 do objeto3 n√£o √© atualizada, apenas exibida no console. Para atualizar seu valor usamos:

```{r}
objeto3
objeto3[3] <- objeto3[3] + 30
objeto3
```

### Coer√ß√£o

Quando vetores recebem dados de um tipo diferente o R tenta fazer uma opera√ß√£o de **coer√ß√£o**, transformando os valores a fim de "atender" a todos. Nem sempre esta opera√ß√£o √© poss√≠vel e ela muitas vezes altera o vetor original. No exemplo abaixo o valor da posi√ß√£o 1 do vetor ser√° atualizado para receber a letra **A**. Como o vetor originalmente era do tipo **integer**, o R far√° a convers√£o dos valores para tipo **character**. Desta forma opera√ß√µes matem√°ticas n√£o ser√£o mais poss√≠veis sobre este vetor.

```{r, error = T}
objeto3[1] <- 'A'
objeto3
objeto3 + 10
```

## Exibindo Objetos

O R possui a fun√ß√£o `ls` que exibe os objetos existentes no ambiente.

```{r}
ls()
```

## Remo√ß√£o de Objetos

Objetos podem ser removidos (exclu√≠dos) com a fun√ß√£o `rm`.

```{r}
rm(objeto2)
ls()
```

## Usando Fun√ß√µes

O cora√ß√£o da linguag√©m R s√£o suas fun√ß√µes. Atrav√©s delas s√£o feitas as mais diversas opera√ß√µes sobre os objetos. Basicamente fun√ß√µes devem ser usadas atrav√©s de seus nomes e com os argumentos dentro de par√™nteses: funcao(argumento1, argumento2, ...).

Por exemplo, a fun√ß√£o `typeof` exige a informa√ß√£o de um argumento (um objeto do R). O R processa esta fun√ß√£o e devolve seu retorno, no caso qual o tipo do **objeto1**.

```{r}
typeof(objeto1)
```

A fun√ß√£o `is.vector` por sua vez testa se um objeto √© um vetor e retorna um valor l√≥gico, `TRUE` ou `FALSE`.

```{r}
is.vector(5)
```

Pode-se visualizar o valor armazenado em um objeto com a fun√ß√£o `print`, bem como exibir os objetos criados no R com a fun√ß√£o `ls`. Note que a fun√ß√£o `ls` aparentemente n√£o exige argumentos.

```{r}
print(objeto1)
ls()
```

### Argumentos de Fun√ß√µes

As fun√ß√µes em R podem ter diversos argumentos e muitas vezes estes argumentos possuem valores definidos por padr√£o. Assim caso o usu√°rio n√£o informe nenhum valor para os argumentos da fun√ß√£o esta usar√° os valores previamente definidos em seu c√≥digo. Por este motivo a fun√ß√£o `ls` usada "sem" argumentos √© processada normalmente. Mais detlahes em [Fun√ß√µes](r_funcoes.html).

Importante notar que os argumento possuem nomes e estes podem/devem ser usados. Voltemos a fun√ß√£o `typeof`, ela possui apenas um argumento de nome **x**. Podemos usar a fun√ß√£o `typeof` informando o nome do argumento e obtendo mesmo resultado anterior.

```{r}
typeof(x = objeto1)
```

Os argumentos podem ser omitidos e ser√£o interpretados pelo R na ordem em que forem informados. Por exemplo a fun√ß√£o `rep.int` retorna valores os valores indicados no argumento **x** n (**times**) vezes.

```{r}
rep.int(5, 4)
rep.int(x = 5, times = 4) # de forma expl√≠cita
```

Perceba que os argumentos podem ser informados em ordem diversa, entretanto devem ser atribuidos de forma expl√≠cita. `rep.int(times = 4, x = 5)` √© diferente de `rep.int(4, 5)`.

```{r}
rep.int(times = 4, x = 5)

rep.int(4, 5)
```

::: callout-note
Algumas fun√ß√µes n√£o possuem argumentos e "apenas" executam seu c√≥digo, n√£o exigindo intera√ß√£o de entrada por parte do usu√°rio, como por exemplo as fun√ß√µes `Sys.Date()` e `Sys.time()`, que retornam a data e data e hora respectivamente.
:::

### Armazenando Retorno

Para que o valor retornado por uma fun√ß√£o seja armazenado em um objeto basta usar o operador de atribui√ß√£o.

```{r}
tipo <- typeof(objeto1)
print(tipo)
typeof(tipo)
is.vector(tipo)
is.character(tipo)
is.double(tipo)
```

Agora o objeto **tipo** armazena o valor retornado pelo fun√ß√£o `typeof` em formto texto (*character*) e seu conte√∫do √© "*double*". Veja que a fun√ß√£o `is.double` que testa se o objeto √© *double* retorna `FALSE`. Cuidado para n√£o confundir o tipo do objeto com seu conte√∫do.

------------------------------------------------------------------------

√öltima atualiza√ß√£o: `r format(file.info('r_intro.qmd')$mtime, '%d/%m/%Y - %H:%M:%S')`
