# Introdu√ß√£o

[Status](convencoes.html#status-do-material) üü®üü®üü®

## Objetos

Conforme o R Core Team[@introduction_r, cap 3] 'as entidades nas quais R opera s√£o tecnicamente conhecidas como objetos'. Existem diversos tipos de estrutura de dados em R, mas neste cap√≠tulo inicial ser√£o usados objetos do tipo **vetor**, pois este √© o objeto mais b√°sico.

::: callout-note
Muitas vezes objetos em R s√£o chamados de **vari√°veis**, no sentido de que vari√°veis armazenam dados. Isto ocorre principalmente para objetos que armazenam um √∫nico valor, como um √∫nico n√∫mero ou texto.
:::

### Vetores

Vetores s√£o entidades que armazenam dados em posi√ß√µes [@r_language_definition, cap 2]. Os vetores s√£o ditos **at√¥micos**, pois seus dados s√£o todos do mesmo tipo. Voc√™ pode pensar em um vetor como uma "local" onde ser√£o armazenados dados. Os vetores podem ser de um dos 6 tipos abaixo:

| Tipo        | Descri√ß√£o                         | Exemplo             |
|-------------|-----------------------------------|---------------------|
| *logical*   | l√≥gico                            | TRUE                |
| *integer*   | n√∫mero inteiro                    | 1                   |
| *double*    | n√∫mero com ponto flutuante (real) | 1.5                 |
| *complex*   | n√∫mero complexo                   | 1i                  |
| *character* | texto (*strings*)                 | R √© software livre. |
| *raw*       | bytes                             |                     |

: Tipos de Vetores

### Atribui√ß√£o

Para cria√ß√£o de objetos no R s√£o usados os operadores de atribui√ß√£o, `<-` e `=`. O operador mais usado √© o `<-`. Assim para cria√ß√£o de um objeto pode ser usado o c√≥digo abaixo:

```{r}
objeto1 <- 10 # atribui valor 10
```

Para cria√ß√£o de vari√°veis do tipo etxto, devem ser usadas aspas, simples ou duplas. Aqui o **objeto2** foi criado com uso de aspas para que o R trate o valor como *character*.

```{r}
objeto2 = 'texto' # atribui texto
```

::: callout-note
# \# Coment√°rios

R aceita coment√°rios em seu c√≥digo atrav√©s do caractere sustenido (*hashtag*), '**\#'**. Qualquer texto ap√≥s ser√° ignorado pelo interpretador.
:::

## Usando Fun√ß√µes

O cora√ß√£o da linguag√©m R s√£o suas fun√ß√µes. Atrav√©s delas s√£o feitas as mais diversas opera√ß√µes sobre os objetos. Basicamente fun√ß√µes devem ser usadas atrav√©s de seus nomes e com os argumentos dentro de par√™nteses: funcao(argumento).

Por exemplo, a fun√ß√£o `typeof` exige a informa√ß√£o de um argumento (um objeto do R).

```{r}
typeof(objeto1)
```

O R processa esta fun√ß√£o e devolve seu retorno.

Pode-se visualizar o valor armazenado em um objeto com a fun√ß√£o `print`, bem como exibir os objetos criados no R com a fun√ß√£o `ls`. Note que a fun√ß√£o `ls` aparentemente n√£o exige argumentos.

```{r}
print(objeto1)
ls()
```

### Argumentos de Fun√ß√µes

As fun√ß√µes em R podem ter diversos argumentos e muitas vezes estes argumentos possuem valores definidos por padr√£o. Assim caso o usu√°rio n√£o informe nenhum valor para os argumentos da fun√ß√£o esta usar√° os valores previamente definidos em seu c√≥digo. Por este motivo a fun√ß√£o `ls` usada "sem" argumentos √© processada normalmente.

### Armazenando Retorno

Para que o valor retornado por uma fun√ß√£o seja armazenado, basta usar o operador de traibui√ß√£o:

```{r}
tipo <- typeof(objeto2)
print(tipo)
typeof(tipo)
```

Agora o objeto **tipo** armazena o valor retornado pelo fun√ß√£o `typeof`, no caso o texto (*character*) "double".

## Remo√ß√£o de Objetos

Objetos podem ser removidos (exclu√≠dos) com a fun√ß√£o `rm`;

```{r}
rm(objeto1)
```

## Coer√ß√£o

------------------------------------------------------------------------

√öltima atualiza√ß√£o: `r format(file.info('r_intro.qmd')$mtime, '%d/%m/%Y - %H:%M:%S')`
