# Introdu√ß√£o

[Status](convencoes.html#status-do-material) üü®üü®üü®

Este cap√≠tulo tem como objetivo fornecer uma vis√£o inicial m√≠nima para que o usu√°rio possa dar os primeiros passos na linguagem.

## Tela Inicial

A tela inicial do R √© um console, onde s√£o passados comandos e o interpratador do R os executa e, se for o caso, exibe sa√≠das. O cursor fica posicionado ao lado do s√≠mbolo do *prompt* do R, `>`. Este s√≠mbolo indica que o sistema est√° pronto para receber novo comando.

```{r, label = 'fig-r-intro-tela-inicial', fig.cap = "Tela Inicial", echo = FALSE}
knitr::include_graphics('images/r/intro/tela_inicial.png')
```

### Executando Comandos

A tela inicial fornece algumas sugest√µes para consulta a dados sobre R, como licen√ßa da linguagem, cita√ß√£o, ajudas, etc. Usaremos como exemplo inicial o comando `license()`. Ap√≥s a digita√ß√£o do comando devemos confirmar com **ENTER** para que o R execute o comando informado e exiba na tela o resultado, no caso a licen√ßa da pr√≥pria linguagem. Ap√≥s a execu√ß√£o um novo sinal do *prompt* √© exibido em aguardo de um poss√≠vel pr√≥ximo comando.

```{r, label = 'fig-r-intro-tela-inicial-licenca', fig.cap = "Tela Inicial - Licen√ßa", echo = FALSE}
knitr::include_graphics('images/r/intro/tela_inicial_licenca.png')
```

Podemos digitar `q()`, por exemplo, que √© a fun√ß√£o que efetua o encerramento do R.

```{r, label = 'fig-r-intro-tela-inicial-quit', fig.cap = "Tela Inicial - Quit (sair)", echo = FALSE}
knitr::include_graphics('images/r/intro/tela_inicial_quit.png')
```

Agora considere um cen√°rio diferente, onde executamos o comando `license()` seguido do comando `citation()` (que mostra como deve ser feita a cita√ß√£o da Linguagem R). Conforme os comandos forem sendo passados o console vai sendo preenchido com estes comandos e suas respectivas sa√≠das. A medida que a tela vai ficando "cheia" os dados exibidos no topo v√£o "sumindo" para dar lugar aos mais recentes, na parte inferior.

```{r, label = 'fig-r-intro-tela-inicial-atualizacao-console', fig.cap = "Tela Inicial - Atualiza√ß√£o do Console", echo = FALSE}
knitr::include_graphics('images/r/intro/tela_inicial_atualizacao_console.png')
```

::: callout-tip
## Buscando Comandos Anteriores

Para buscar comandos executados anteriormente, pode-se usar a seta para cima do teclado. Os comandos v√£o sendo apresentados do mais recente ao mais antigo.
:::

### Erros

Sempre que ocorrer algum erro na execu√ß√£o de um comando ser√° exibida no console uma mensagem com o termo **Error**. Muitas vezes a mensagem de erro auxilia na identifica√ß√£o da causa do erro reportado. Abaixo um exemplo com erro retornado pelo R ap√≥s a tentativa de execu√ß√£o de uma fun√ß√£o inexistente (erro na digita√ß√£o do comando).

```{r, error = T}
citatin()
```

## Objetos

Conforme o R Core Team[@introduction_r, cap 3] 'as entidades nas quais R opera s√£o tecnicamente conhecidas como objetos'. Existem diversos tipos de estrutura de dados em R, mas neste cap√≠tulo inicial ser√£o usados objetos do tipo **vetor**, pois este √© o objeto mais b√°sico.

::: callout-note
## Vari√°veis

Muitas vezes objetos em R s√£o chamados de **vari√°veis**, no sentido de que vari√°veis armazenam dados. Isto ocorre principalmente para objetos que armazenam um √∫nico valor, como um √∫nico n√∫mero ou texto.
:::

### Vetores

Vetores s√£o entidades que armazenam dados em posi√ß√µes [@r_language_definition, cap 2]. Os vetores s√£o ditos **at√¥micos**, pois seus dados s√£o todos do mesmo tipo. Voc√™ pode pensar em um vetor como uma "local" onde ser√£o armazenados dados. Os vetores podem ser de um dos 6 tipos abaixo:

| Tipo        | Descri√ß√£o                         | Exemplo             |
|-------------|-----------------------------------|---------------------|
| *logical*   | l√≥gico                            | TRUE                |
| *integer*   | n√∫mero inteiro                    | 1                   |
| *double*    | n√∫mero com ponto flutuante (real) | 1.5                 |
| *complex*   | n√∫mero complexo                   | 1i                  |
| *character* | texto (*strings*)                 | R √© software livre. |
| *raw*       | bytes                             |                     |

: Tipos de Vetores

## Atribui√ß√£o

Para cria√ß√£o de objetos no R s√£o usados os operadores de atribui√ß√£o, `<-` e `=`. O operador mais usado √© o `<-`. Assim para cria√ß√£o de um objeto pode ser usado o c√≥digo abaixo:

```{r}
objeto1 <- 10 # atribui valor 10
```

Para cria√ß√£o de vari√°veis do tipo etxto, devem ser usadas aspas, simples ou duplas. Aqui o **objeto2** foi criado com uso de aspas para que o R trate o valor como *character*.

```{r}
objeto2 = 'texto' # atribui texto
```

::: callout-note
# \# Coment√°rios

R aceita coment√°rios em seu c√≥digo atrav√©s do caractere sustenido (*hashtag*), '**\#'**. Qualquer texto ap√≥s ser√° ignorado pelo interpretador.
:::

## Opera√ß√µes com Objetos

Objetos podem ser atualizados novamente com o operador `<-`. No exemplo abaixo vamos criar um vetor de nome **objeto3** com a fun√ß√£o`c`, que concatena valores, em conjunto com o operador **:**, que cria sequ√™ncias de valores. Na sequ√™ncia o **objeto3** ser√° atualizado recebendo seu pr√≥prio conte√∫do acrescido do valor 10.

```{r}
objeto3 <- c(1:5)
objeto3
typeof(objeto3)
objeto3 <- objeto3 + 10
```

O vetor objeto3 foi criado com 5 posi√ß√µes, armazenando os valores de 1 a 5. Podemos acessar, por exemplo a terceira posi√ß√£o do vetor, atrav√©s do operador de extra√ß√£o **[** em combina√ß√£o com o √≠ndice do vetor.

```{r}
objeto3[3] # exibe terceiro elemento
objeto3[3] + 10 # somando valor
```

Note que sem o operador de atribui√ß√£o o valor da posi√ß√£o 3 do objeto3 n√£o √© atualizada, apenas exibda no console. Para atualizar seu valor usamos:

```{r}
objeto3
objeto3[3] <- objeto3[3] + 30
objeto3
```

### Coer√ß√£o

Quando vetores recebem dados de um tipo diferente o R tenta fazer uma opera√ß√£o de **coer√ß√£o**, transformando os valores a fim de "atender" a todos. Nem sempre esta opera√ß√£o √© poss√≠vel e ela muitas vezes altera o vetor original. No exemplo abaixo o valor da posi√ß√£o 1 do vetor ser√° atualizado para receber a letra **A**. Como o vetor originalmente era do tipo **integer**, o R far√° a convers√£o dos valores para tipo **character**. Desta forma opera√ß√µes matem√°ticas n√£o ser√£o mais poss√≠veis sobre este vetor.

```{r, error = T}
objeto3[1] <- 'A'
objeto3
typeof(objeto3)
objeto3 + 10
```

## Exibindo Objetos

O R possui a fun√ß√£o `ls` que exibe os objetos existentes no ambiente.

```{r}
ls()
```

## Remo√ß√£o de Objetos

Objetos podem ser removidos (exclu√≠dos) com a fun√ß√£o `rm`.

```{r}
rm(objeto2)
ls()
```

## Usando Fun√ß√µes

O cora√ß√£o da linguag√©m R s√£o suas fun√ß√µes. Atrav√©s delas s√£o feitas as mais diversas opera√ß√µes sobre os objetos. Basicamente fun√ß√µes devem ser usadas atrav√©s de seus nomes e com os argumentos dentro de par√™nteses: funcao(argumento1, argumento2, ...).

Por exemplo, a fun√ß√£o `typeof` exige a informa√ß√£o de um argumento (um objeto do R).

```{r}
typeof(objeto1)
```

O R processa esta fun√ß√£o e devolve seu retorno, no caso qual o tipo do **objeto1**.

Pode-se visualizar o valor armazenado em um objeto com a fun√ß√£o `print`, bem como exibir os objetos criados no R com a fun√ß√£o `ls`. Note que a fun√ß√£o `ls` aparentemente n√£o exige argumentos.

```{r}
print(objeto1)
ls()
```

### Argumentos de Fun√ß√µes

As fun√ß√µes em R podem ter diversos argumentos e muitas vezes estes argumentos possuem valores definidos por padr√£o. Assim caso o usu√°rio n√£o informe nenhum valor para os argumentos da fun√ß√£o esta usar√° os valores previamente definidos em seu c√≥digo. Por este motivo a fun√ß√£o `ls` usada "sem" argumentos √© processada normalmente. Mais detlahes em [Fun√ß√µes](r_funcoes.html).

Importante notar que os argumento possuem nomes e estes podem/devem ser usados. Voltemos a fun√ß√£o `typeof`, ela possui apenas um argumento de nome **x**. Podemos usar a fun√ß√£o `typeof` informando o nome do argumento e obtendo mesmo resultado anterior.

```{r}
typeof(x = objeto1)
```

Os argumentos podem ser omitidos e ser√£o interpretados pelo R na ordem em que forem informados. Por exemplo a fun√ß√£o `rep.int` retorna valores os valores indicados no argumento **x** n (**times**) vezes.

```{r}
rep.int(5, 4)
rep.int(x = 5, times = 4) # de forma expl√≠cita
```

Perceba que os argumentos podem ser informados em ordem diversa, entretanto devem ser atribuidos de forma expl√≠cita. `rep.int(times = 4, x = 5)` √© diferente de `rep.int(4, 5)`.

```{r}
rep.int(times = 4, x = 5)

rep.int(4, 5)
```

:::callout-note
Algumas fun√ß√µes n√£o possuem argumentos e "apenas" executam seu c√≥digo, n√£o exigindo intera√ß√£o de entrada por parte do usu√°rio, como por exemplo as fun√ß√µes Sys.Date() e Sys.time(), que retornam a data e data e hora respectivamente.
:::

### Armazenando Retorno

Para que o valor retornado por uma fun√ß√£o seja armazenado, basta usar o operador de traibui√ß√£o:

```{r}
tipo <- typeof(objeto1)
print(tipo)
typeof(tipo)
```

Agora o objeto **tipo** armazena o valor retornado pelo fun√ß√£o `typeof`, no caso o texto (*character*) "double".



------------------------------------------------------------------------

√öltima atualiza√ß√£o: `r format(file.info('r_intro.qmd')$mtime, '%d/%m/%Y - %H:%M:%S')`
