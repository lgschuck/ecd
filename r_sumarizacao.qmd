# Sumariza√ß√£o de Dados

[Status](convencoes.html#status-do-material) üü®üü®üü®

## Fun√ß√µes B√°sicas

Nesta se√ß√£o s√£o detalhadas algumas das fun√ß√µes mais b√°sicas para sumariza√ß√£o de dados.

### Soma

A fun√ß√£o `sum` retorna a soma dos elementos informados como argumentos.

```{r}
sum(1:10)
```

### M√©dia

```{r}
mean(1:20)
```

### Mediana

```{r}
median(1:11)
```

### M√°ximo e m√≠nimo

```{r}
max(99:15)
min(15:99)
```

## Agrega√ß√£o

Uma tarefa muito rotineira em an√°lise de dados √© a sumariza√ß√£o de valores por grupos de interesse.

Vejamos um exemplo na base Estat√≠sticas de Aprova√ß√µes - Por Porte de Empresa (BNDES). Uma informa√ß√£o de interesse, por exemplo, pode ser o valor total de Aprova√ß√µes por ano para cada porte das empresas. Como a base de dados originalmente traz os valores abertos para cada m√™s, ser√° necess√°ria opera√ß√£o de agrega√ß√£o.

```{r}
df_aprovacoes_porte <-
  readRDS(
    './data/aprovacoes_por_porte_de_empresa_aprovacoes.RDS')

df_aprovacoes_porte |> head()
```

Podemos ent√£o fazer a agrega√ß√£o usando a vari√°vel **ANO** como vari√°vel chave na fun√ß√£o `aggregate`. Esta fun√ß√£o exige (dentre outros argumentos opcionais) um objeto sobre os quais a fun√ß√£o informada ser√° aplicada, uma lista de elementos para definir o agrupamento e a fun√ß√£o a ser aplicada. No exemplo, usaremos a fun√ß√£o `sum`, que retorna a soma dos valores.

```{r}
somatorio <-
  aggregate(subset(df_aprovacoes_porte, select = c(-ANO, -MES)),
            by = list(df_aprovacoes_porte$ANO),
            sum)

head(somatorio)
```

Veja que a fun√ß√£o `subset` foi usada pois as somas de **ANO** e **MES** n√£o s√£o de interesse aqui. Sem remov√™-las a fun√ß√£o `aggregate` faria a soma de seus valores.

A mesma opera√ß√£o pode ser feita usando o *pipe*:

```{r}
df_aprovacoes_porte |>
  subset(select = c(-ANO, -MES)) |> 
  aggregate(by = list(df_aprovacoes_porte$ANO),
            sum) |> 
  head()
```

Uma forma equivalente e ainda mais sucinta √© poss√≠vel com a utiliza√ß√£o do `.` (indicando todas as vari√°veis) e do `~` (indicando que as vari√°veis "dependem" ou s√£o "explicadas" pela vari√°vel **ANO**). Como aqui a vari√°vel **ANO** ser√° indicada como "explicativa" das demais ela n√£o deve ser descartada no comando `subset`, como feito no exemplo anterior.

```{r}
df_aprovacoes_porte |>
  subset(select = -MES) |> 
  aggregate(by = . ~ ANO, sum) |> 
  head()
```

## Valores Faltantes - NA

A fun√ß√£o `aggregate` possui como padr√£o o argumento `na.action = na.omit`, assim os valores `NA` s√£o omitidos. Caso seja necess√°iro considerar os valores faltantes deve ser informada uma fun√ß√£o "alternativa", que trata estes registros. No exemplo abaixo foi informado `NULL`, ou seja, "nenhuma" fun√ß√£o a ser aplicada sobre os valores faltantes. Assim eles ser√£o considerados no c√°lculo.

```{r}
df_aprovacoes_porte_na <- df_aprovacoes_porte

df_aprovacoes_porte_na[1,]$MICRO <- NA

head(df_aprovacoes_porte_na)

df_aprovacoes_porte_na |>
  subset(select = -MES) |>
  aggregate(by = . ~ ANO, sum, 
            na.action = NULL) |>
  head()
```

Veja que agora a soma para o ano de 1995 para o porte MICRO √© `NA`.

Caso seja for inserido `na.rm = T` como argumento da fun√ß√£o `sum`, os valores faltantes s√£o desconsiderados novamente, mesmo `na.action` sendo nulo.

```{r}
df_aprovacoes_porte_na |>
  subset(select = -MES) |>
  aggregate(by = . ~ ANO, sum, na.rm = T,
            na.action = NULL) |>
  head()
```

------------------------------------------------------------------------

√öltima atualiza√ß√£o: `r format(file.info('r_sumarizacao.qmd')$mtime, '%d/%m/%Y - %H:%M:%S')`
