# Data Frames

## O que são data frames ?

Conforme o próprio manual do R, data.frame é a estrutura que imita de forma mais próxima um dataset do SAS ou SPSS. De forma resumida um data.frame é uma estrutura tabular com colunas (variáveis, atributos, etc) e registros (casos, observações, instâncias, etc). Diferente de uma matriz um data.frame pode ter diferentes tipos de dados.

Um data.frame possui todas as colunas com o mesmo tamanho (quantidade de regitros). A classe de um objeto data.frame possui o mesmo nome 'data.frame'. Abaixo pode ser visualizada a classe do data.frame [Iris](https://archive.ics.uci.edu/ml/datasets/iris) (muito usado em exemplos em Ciência de Dados) e também as primeiras linhas com o comando head.

```{r}
class(iris)
head(iris)

```

## Atributos

Os atributos "padrão" de um data.frame são: names, class e row.names. É possível acessá-los com a função attributes. O atributo names também pode ser obtido com a função names.

```{r}
attributes(iris)
names(iris)
```

## Dimensões

A função dim retorna as dimensões de um data.frame (linhas e colunas). Estes dados também podem ser obtidos com as funções nrow e ncol.

```{r}
dim(iris)
nrow(iris)
ncol(iris)
```

## Acessando Dados

### Índices

Como a estrutura de um data.frame é organizada em linhas e colunas, podemos acessar os dados utilizando colchetes (\[ \]): base\[linha, coluna\]. Podem ser usados intervalos de índices com o operador ':'.

```{r}
# Acessar primeira linha e segunda coluna (Sepal.Width)
iris[1,2]
# Acessar linhas 1 até 3 e a segunda coluna
iris[1:3, 2]
```

Apesar de ser possível, utilizar o índice faz com que a referência seja relativa, ou seja, a variável '1' pode mudar caso o data.frame seja editado. Por exemplo, caso em algum momento anterior a variável Sepal.Length tenha sido excluída, uma nova variável assumirá o índice 1. Além disto ao se ler o código não fica claro qual variável está sendo acessada.

### Usando Nomes das Colunas

Existem diversas outras formas para acessar dados de um data.frame, inclusive utilizando o nome da coluna de forma explícita.

```{r}
# Acessar primeira linha e segunda coluna (pelo nome)
iris[1:3,'Sepal.Width']

```

Uma forma mais comum é utilizando o operador \$ para acessar a coluna pelo seu nome.

```{r}
# Acessar primeira linha e segunda coluna (pelo nome)
iris[1,]$Sepal.Width
# Acessar linhas 1 até 3 e a segunda coluna (pelo nome)
iris[1:3,]$Sepal.Width
```

### Filtrando Dados

Digamos que se deseje acessar apenas dados que cumpram determinada condição. Para isto, na seleção das linhas do data.frame, deve ser informada condição lógica na forma abaixo:

```{r}
# Retorna valores de Speal.Width onde Petal.Length for maior do que 6
x <- iris[iris$Petal.Length > 6,'Sepal.Width']
y <- iris[iris$Petal.Length > 6,]$Sepal.Width

x
y
# Função que compara os objetos
identical(x, y)
```

O retorno é dado pelas linhas em que a variável Petal.Length atende as condições declaradas. Este teste retorna um vetor de valores lógicos, e os valores TRUE são os que "permanecem". Abaixo outro exemplo:

```{r}
head(iris$Petal.Length) > 1.4
```

Aplicando este vetor de valores lógicos, o R entende que as posições correspondentes a TRUE devem ser mantidas. No exemplo abaixo, as posições (linhas) 4 e 6 atendem a condição especificada, portanto apenas estas serão selecionadas.

```{r}
iris2 <- head(iris)
filtro <- head(iris2$Petal.Length) > 1.4

iris2[filtro,'Sepal.Width']
```

Equivalente ao comando abaixo:

```{r}
iris2[c(4,6), 'Sepal.Width']
```

#### Função Subset

A função subset permite efetuar filtro em um data.frame e muitas vezes oferece uma forma mais organizada visualmente, principalmente quando em filtros com muitas condiões. Esta função também permite seleção de colunas a serem mantidas. Note que a função subset não demanda que o data.frame seja referenciado antes das variáveis e também aceita os nomes das variáveis sem aspas. Isto torna o código mais legível.

```{r}
subset(x = mtcars, # dados
       subset = mpg > 25, # filtro  
       select = c(mpg, cyl, hp)) # colunas
```

Usando um filtro um pouco mais complexo e sem a informação do nome dos parâmetros:

```{r}
subset(mtcars, # dados 
       mpg > 25 & cyl == 4 & hp > 70, # filtro  
       c(mpg, cyl, hp)) # colunas
```

------------------------------------------------------------------------

[R Manuals :: R Language Definition - Capítulo 2](https://rstudio.github.io/r-manuals/r-lang/Objects.html#data-frame-objects)

Última atualização: `r format(file.info('data_frames.qmd')$mtime, '%d/%m/%Y - %H:%M:%S')`
